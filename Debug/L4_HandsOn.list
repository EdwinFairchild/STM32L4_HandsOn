
L4_HandsOn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a238  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000798  0800a3c8  0800a3c8  0000b3c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab60  0800ab60  0000cb7c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab60  0800ab60  0000bb60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab68  0800ab68  0000cb7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab68  0800ab68  0000bb68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab6c  0800ab6c  0000bb6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b7c  20000000  0800ab70  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ca8  20000b7c  0800b6ec  0000cb7c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001824  0800b6ec  0000d824  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000cb7c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018cbb  00000000  00000000  0000cbac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f15  00000000  00000000  00025867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c0  00000000  00000000  00029780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010bc  00000000  00000000  0002ad40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002be48  00000000  00000000  0002bdfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c48c  00000000  00000000  00057c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103531  00000000  00000000  000740d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00177601  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006814  00000000  00000000  00177644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  0017de58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000b7c 	.word	0x20000b7c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a3b0 	.word	0x0800a3b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000b80 	.word	0x20000b80
 80001cc:	0800a3b0 	.word	0x0800a3b0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2uiz>:
 8000b9c:	004a      	lsls	r2, r1, #1
 8000b9e:	d211      	bcs.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba4:	d211      	bcs.n	8000bca <__aeabi_d2uiz+0x2e>
 8000ba6:	d50d      	bpl.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb0:	d40e      	bmi.n	8000bd0 <__aeabi_d2uiz+0x34>
 8000bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bce:	d102      	bne.n	8000bd6 <__aeabi_d2uiz+0x3a>
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	4770      	bx	lr
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b96a 	b.w	8000ec8 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f806 	bl	8000c0c <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	9d08      	ldr	r5, [sp, #32]
 8000c12:	460c      	mov	r4, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14e      	bne.n	8000cb6 <__udivmoddi4+0xaa>
 8000c18:	4694      	mov	ip, r2
 8000c1a:	458c      	cmp	ip, r1
 8000c1c:	4686      	mov	lr, r0
 8000c1e:	fab2 f282 	clz	r2, r2
 8000c22:	d962      	bls.n	8000cea <__udivmoddi4+0xde>
 8000c24:	b14a      	cbz	r2, 8000c3a <__udivmoddi4+0x2e>
 8000c26:	f1c2 0320 	rsb	r3, r2, #32
 8000c2a:	4091      	lsls	r1, r2
 8000c2c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c34:	4319      	orrs	r1, r3
 8000c36:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3e:	fa1f f68c 	uxth.w	r6, ip
 8000c42:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c46:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c4a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c52:	fb04 f106 	mul.w	r1, r4, r6
 8000c56:	4299      	cmp	r1, r3
 8000c58:	d90a      	bls.n	8000c70 <__udivmoddi4+0x64>
 8000c5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c62:	f080 8112 	bcs.w	8000e8a <__udivmoddi4+0x27e>
 8000c66:	4299      	cmp	r1, r3
 8000c68:	f240 810f 	bls.w	8000e8a <__udivmoddi4+0x27e>
 8000c6c:	3c02      	subs	r4, #2
 8000c6e:	4463      	add	r3, ip
 8000c70:	1a59      	subs	r1, r3, r1
 8000c72:	fa1f f38e 	uxth.w	r3, lr
 8000c76:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c7a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c82:	fb00 f606 	mul.w	r6, r0, r6
 8000c86:	429e      	cmp	r6, r3
 8000c88:	d90a      	bls.n	8000ca0 <__udivmoddi4+0x94>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c92:	f080 80fc 	bcs.w	8000e8e <__udivmoddi4+0x282>
 8000c96:	429e      	cmp	r6, r3
 8000c98:	f240 80f9 	bls.w	8000e8e <__udivmoddi4+0x282>
 8000c9c:	4463      	add	r3, ip
 8000c9e:	3802      	subs	r0, #2
 8000ca0:	1b9b      	subs	r3, r3, r6
 8000ca2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	b11d      	cbz	r5, 8000cb2 <__udivmoddi4+0xa6>
 8000caa:	40d3      	lsrs	r3, r2
 8000cac:	2200      	movs	r2, #0
 8000cae:	e9c5 3200 	strd	r3, r2, [r5]
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d905      	bls.n	8000cc6 <__udivmoddi4+0xba>
 8000cba:	b10d      	cbz	r5, 8000cc0 <__udivmoddi4+0xb4>
 8000cbc:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4608      	mov	r0, r1
 8000cc4:	e7f5      	b.n	8000cb2 <__udivmoddi4+0xa6>
 8000cc6:	fab3 f183 	clz	r1, r3
 8000cca:	2900      	cmp	r1, #0
 8000ccc:	d146      	bne.n	8000d5c <__udivmoddi4+0x150>
 8000cce:	42a3      	cmp	r3, r4
 8000cd0:	d302      	bcc.n	8000cd8 <__udivmoddi4+0xcc>
 8000cd2:	4290      	cmp	r0, r2
 8000cd4:	f0c0 80f0 	bcc.w	8000eb8 <__udivmoddi4+0x2ac>
 8000cd8:	1a86      	subs	r6, r0, r2
 8000cda:	eb64 0303 	sbc.w	r3, r4, r3
 8000cde:	2001      	movs	r0, #1
 8000ce0:	2d00      	cmp	r5, #0
 8000ce2:	d0e6      	beq.n	8000cb2 <__udivmoddi4+0xa6>
 8000ce4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce8:	e7e3      	b.n	8000cb2 <__udivmoddi4+0xa6>
 8000cea:	2a00      	cmp	r2, #0
 8000cec:	f040 8090 	bne.w	8000e10 <__udivmoddi4+0x204>
 8000cf0:	eba1 040c 	sub.w	r4, r1, ip
 8000cf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf8:	fa1f f78c 	uxth.w	r7, ip
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb08 4416 	mls	r4, r8, r6, r4
 8000d0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0e:	fb07 f006 	mul.w	r0, r7, r6
 8000d12:	4298      	cmp	r0, r3
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x11c>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d1e:	d202      	bcs.n	8000d26 <__udivmoddi4+0x11a>
 8000d20:	4298      	cmp	r0, r3
 8000d22:	f200 80cd 	bhi.w	8000ec0 <__udivmoddi4+0x2b4>
 8000d26:	4626      	mov	r6, r4
 8000d28:	1a1c      	subs	r4, r3, r0
 8000d2a:	fa1f f38e 	uxth.w	r3, lr
 8000d2e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d32:	fb08 4410 	mls	r4, r8, r0, r4
 8000d36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3a:	fb00 f707 	mul.w	r7, r0, r7
 8000d3e:	429f      	cmp	r7, r3
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x148>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x146>
 8000d4c:	429f      	cmp	r7, r3
 8000d4e:	f200 80b0 	bhi.w	8000eb2 <__udivmoddi4+0x2a6>
 8000d52:	4620      	mov	r0, r4
 8000d54:	1bdb      	subs	r3, r3, r7
 8000d56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5a:	e7a5      	b.n	8000ca8 <__udivmoddi4+0x9c>
 8000d5c:	f1c1 0620 	rsb	r6, r1, #32
 8000d60:	408b      	lsls	r3, r1
 8000d62:	fa22 f706 	lsr.w	r7, r2, r6
 8000d66:	431f      	orrs	r7, r3
 8000d68:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d6c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d70:	ea43 030c 	orr.w	r3, r3, ip
 8000d74:	40f4      	lsrs	r4, r6
 8000d76:	fa00 f801 	lsl.w	r8, r0, r1
 8000d7a:	0c38      	lsrs	r0, r7, #16
 8000d7c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d80:	fbb4 fef0 	udiv	lr, r4, r0
 8000d84:	fa1f fc87 	uxth.w	ip, r7
 8000d88:	fb00 441e 	mls	r4, r0, lr, r4
 8000d8c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d90:	fb0e f90c 	mul.w	r9, lr, ip
 8000d94:	45a1      	cmp	r9, r4
 8000d96:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9a:	d90a      	bls.n	8000db2 <__udivmoddi4+0x1a6>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000da2:	f080 8084 	bcs.w	8000eae <__udivmoddi4+0x2a2>
 8000da6:	45a1      	cmp	r9, r4
 8000da8:	f240 8081 	bls.w	8000eae <__udivmoddi4+0x2a2>
 8000dac:	f1ae 0e02 	sub.w	lr, lr, #2
 8000db0:	443c      	add	r4, r7
 8000db2:	eba4 0409 	sub.w	r4, r4, r9
 8000db6:	fa1f f983 	uxth.w	r9, r3
 8000dba:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dbe:	fb00 4413 	mls	r4, r0, r3, r4
 8000dc2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dca:	45a4      	cmp	ip, r4
 8000dcc:	d907      	bls.n	8000dde <__udivmoddi4+0x1d2>
 8000dce:	193c      	adds	r4, r7, r4
 8000dd0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd4:	d267      	bcs.n	8000ea6 <__udivmoddi4+0x29a>
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d965      	bls.n	8000ea6 <__udivmoddi4+0x29a>
 8000dda:	3b02      	subs	r3, #2
 8000ddc:	443c      	add	r4, r7
 8000dde:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000de2:	fba0 9302 	umull	r9, r3, r0, r2
 8000de6:	eba4 040c 	sub.w	r4, r4, ip
 8000dea:	429c      	cmp	r4, r3
 8000dec:	46ce      	mov	lr, r9
 8000dee:	469c      	mov	ip, r3
 8000df0:	d351      	bcc.n	8000e96 <__udivmoddi4+0x28a>
 8000df2:	d04e      	beq.n	8000e92 <__udivmoddi4+0x286>
 8000df4:	b155      	cbz	r5, 8000e0c <__udivmoddi4+0x200>
 8000df6:	ebb8 030e 	subs.w	r3, r8, lr
 8000dfa:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfe:	fa04 f606 	lsl.w	r6, r4, r6
 8000e02:	40cb      	lsrs	r3, r1
 8000e04:	431e      	orrs	r6, r3
 8000e06:	40cc      	lsrs	r4, r1
 8000e08:	e9c5 6400 	strd	r6, r4, [r5]
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	e750      	b.n	8000cb2 <__udivmoddi4+0xa6>
 8000e10:	f1c2 0320 	rsb	r3, r2, #32
 8000e14:	fa20 f103 	lsr.w	r1, r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e20:	4094      	lsls	r4, r2
 8000e22:	430c      	orrs	r4, r1
 8000e24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e28:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e2c:	fa1f f78c 	uxth.w	r7, ip
 8000e30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e34:	fb08 3110 	mls	r1, r8, r0, r3
 8000e38:	0c23      	lsrs	r3, r4, #16
 8000e3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3e:	fb00 f107 	mul.w	r1, r0, r7
 8000e42:	4299      	cmp	r1, r3
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x24c>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e4e:	d22c      	bcs.n	8000eaa <__udivmoddi4+0x29e>
 8000e50:	4299      	cmp	r1, r3
 8000e52:	d92a      	bls.n	8000eaa <__udivmoddi4+0x29e>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1a5b      	subs	r3, r3, r1
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e60:	fb08 3311 	mls	r3, r8, r1, r3
 8000e64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e68:	fb01 f307 	mul.w	r3, r1, r7
 8000e6c:	42a3      	cmp	r3, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x276>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e78:	d213      	bcs.n	8000ea2 <__udivmoddi4+0x296>
 8000e7a:	42a3      	cmp	r3, r4
 8000e7c:	d911      	bls.n	8000ea2 <__udivmoddi4+0x296>
 8000e7e:	3902      	subs	r1, #2
 8000e80:	4464      	add	r4, ip
 8000e82:	1ae4      	subs	r4, r4, r3
 8000e84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e88:	e739      	b.n	8000cfe <__udivmoddi4+0xf2>
 8000e8a:	4604      	mov	r4, r0
 8000e8c:	e6f0      	b.n	8000c70 <__udivmoddi4+0x64>
 8000e8e:	4608      	mov	r0, r1
 8000e90:	e706      	b.n	8000ca0 <__udivmoddi4+0x94>
 8000e92:	45c8      	cmp	r8, r9
 8000e94:	d2ae      	bcs.n	8000df4 <__udivmoddi4+0x1e8>
 8000e96:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e9a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9e:	3801      	subs	r0, #1
 8000ea0:	e7a8      	b.n	8000df4 <__udivmoddi4+0x1e8>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	e7ed      	b.n	8000e82 <__udivmoddi4+0x276>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	e799      	b.n	8000dde <__udivmoddi4+0x1d2>
 8000eaa:	4630      	mov	r0, r6
 8000eac:	e7d4      	b.n	8000e58 <__udivmoddi4+0x24c>
 8000eae:	46d6      	mov	lr, sl
 8000eb0:	e77f      	b.n	8000db2 <__udivmoddi4+0x1a6>
 8000eb2:	4463      	add	r3, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e74d      	b.n	8000d54 <__udivmoddi4+0x148>
 8000eb8:	4606      	mov	r6, r0
 8000eba:	4623      	mov	r3, r4
 8000ebc:	4608      	mov	r0, r1
 8000ebe:	e70f      	b.n	8000ce0 <__udivmoddi4+0xd4>
 8000ec0:	3e02      	subs	r6, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	e730      	b.n	8000d28 <__udivmoddi4+0x11c>
 8000ec6:	bf00      	nop

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	@ 0x28
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	2224      	movs	r2, #36	@ 0x24
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f007 fc81 	bl	80087e0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000ede:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <MX_DAC1_Init+0x5c>)
 8000ee0:	4a12      	ldr	r2, [pc, #72]	@ (8000f2c <MX_DAC1_Init+0x60>)
 8000ee2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000ee4:	4810      	ldr	r0, [pc, #64]	@ (8000f28 <MX_DAC1_Init+0x5c>)
 8000ee6:	f001 fe62 	bl	8002bae <HAL_DAC_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ef0:	f000 fab9 	bl	8001466 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000ef8:	2324      	movs	r3, #36	@ 0x24
 8000efa:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f08:	1d3b      	adds	r3, r7, #4
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4806      	ldr	r0, [pc, #24]	@ (8000f28 <MX_DAC1_Init+0x5c>)
 8000f10:	f001 ff5a 	bl	8002dc8 <HAL_DAC_ConfigChannel>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000f1a:	f000 faa4 	bl	8001466 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	3728      	adds	r7, #40	@ 0x28
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000b98 	.word	0x20000b98
 8000f2c:	40007400 	.word	0x40007400

08000f30 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	@ 0x28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a2b      	ldr	r2, [pc, #172]	@ (8000ffc <HAL_DAC_MspInit+0xcc>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d14f      	bne.n	8000ff2 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000f52:	4b2b      	ldr	r3, [pc, #172]	@ (8001000 <HAL_DAC_MspInit+0xd0>)
 8000f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f56:	4a2a      	ldr	r2, [pc, #168]	@ (8001000 <HAL_DAC_MspInit+0xd0>)
 8000f58:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000f5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f5e:	4b28      	ldr	r3, [pc, #160]	@ (8001000 <HAL_DAC_MspInit+0xd0>)
 8000f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	4b25      	ldr	r3, [pc, #148]	@ (8001000 <HAL_DAC_MspInit+0xd0>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6e:	4a24      	ldr	r2, [pc, #144]	@ (8001000 <HAL_DAC_MspInit+0xd0>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f76:	4b22      	ldr	r3, [pc, #136]	@ (8001000 <HAL_DAC_MspInit+0xd0>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f82:	2310      	movs	r3, #16
 8000f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f86:	2303      	movs	r3, #3
 8000f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4619      	mov	r1, r3
 8000f94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f98:	f002 fb3e 	bl	8003618 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8000f9c:	4b19      	ldr	r3, [pc, #100]	@ (8001004 <HAL_DAC_MspInit+0xd4>)
 8000f9e:	4a1a      	ldr	r2, [pc, #104]	@ (8001008 <HAL_DAC_MspInit+0xd8>)
 8000fa0:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8000fa2:	4b18      	ldr	r3, [pc, #96]	@ (8001004 <HAL_DAC_MspInit+0xd4>)
 8000fa4:	2206      	movs	r2, #6
 8000fa6:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fa8:	4b16      	ldr	r3, [pc, #88]	@ (8001004 <HAL_DAC_MspInit+0xd4>)
 8000faa:	2210      	movs	r2, #16
 8000fac:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fae:	4b15      	ldr	r3, [pc, #84]	@ (8001004 <HAL_DAC_MspInit+0xd4>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000fb4:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <HAL_DAC_MspInit+0xd4>)
 8000fb6:	2280      	movs	r2, #128	@ 0x80
 8000fb8:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fba:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <HAL_DAC_MspInit+0xd4>)
 8000fbc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fc0:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fc2:	4b10      	ldr	r3, [pc, #64]	@ (8001004 <HAL_DAC_MspInit+0xd4>)
 8000fc4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fc8:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <HAL_DAC_MspInit+0xd4>)
 8000fcc:	2220      	movs	r2, #32
 8000fce:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <HAL_DAC_MspInit+0xd4>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000fd6:	480b      	ldr	r0, [pc, #44]	@ (8001004 <HAL_DAC_MspInit+0xd4>)
 8000fd8:	f002 f8a8 	bl	800312c <HAL_DMA_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000fe2:	f000 fa40 	bl	8001466 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a06      	ldr	r2, [pc, #24]	@ (8001004 <HAL_DAC_MspInit+0xd4>)
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	4a05      	ldr	r2, [pc, #20]	@ (8001004 <HAL_DAC_MspInit+0xd4>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	3728      	adds	r7, #40	@ 0x28
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40007400 	.word	0x40007400
 8001000:	40021000 	.word	0x40021000
 8001004:	20000bac 	.word	0x20000bac
 8001008:	40020030 	.word	0x40020030

0800100c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001012:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <MX_DMA_Init+0x48>)
 8001014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001016:	4a0f      	ldr	r2, [pc, #60]	@ (8001054 <MX_DMA_Init+0x48>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6493      	str	r3, [r2, #72]	@ 0x48
 800101e:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <MX_DMA_Init+0x48>)
 8001020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2100      	movs	r1, #0
 800102e:	200d      	movs	r0, #13
 8001030:	f001 fd87 	bl	8002b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001034:	200d      	movs	r0, #13
 8001036:	f001 fda0 	bl	8002b7a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	2011      	movs	r0, #17
 8001040:	f001 fd7f 	bl	8002b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001044:	2011      	movs	r0, #17
 8001046:	f001 fd98 	bl	8002b7a <HAL_NVIC_EnableIRQ>

}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000

08001058 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001058:	b480      	push	{r7}
 800105a:	b087      	sub	sp, #28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8001062:	4a17      	ldr	r2, [pc, #92]	@ (80010c0 <LL_SYSCFG_SetEXTISource+0x68>)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	b2db      	uxtb	r3, r3
 8001068:	3302      	adds	r3, #2
 800106a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	0c1b      	lsrs	r3, r3, #16
 8001072:	43db      	mvns	r3, r3
 8001074:	ea02 0103 	and.w	r1, r2, r3
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	0c1b      	lsrs	r3, r3, #16
 800107c:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	fa93 f3a3 	rbit	r3, r3
 8001084:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d101      	bne.n	8001094 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8001090:	2320      	movs	r3, #32
 8001092:	e003      	b.n	800109c <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fab3 f383 	clz	r3, r3
 800109a:	b2db      	uxtb	r3, r3
 800109c:	461a      	mov	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	fa03 f202 	lsl.w	r2, r3, r2
 80010a4:	4806      	ldr	r0, [pc, #24]	@ (80010c0 <LL_SYSCFG_SetEXTISource+0x68>)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	430a      	orrs	r2, r1
 80010ac:	3302      	adds	r3, #2
 80010ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80010b2:	bf00      	nop
 80010b4:	371c      	adds	r7, #28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	40010000 	.word	0x40010000

080010c4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b08b      	sub	sp, #44	@ 0x2c
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	fa93 f3a3 	rbit	r3, r3
 80010de:	613b      	str	r3, [r7, #16]
  return result;
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80010ea:	2320      	movs	r3, #32
 80010ec:	e003      	b.n	80010f6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	fab3 f383 	clz	r3, r3
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	2103      	movs	r1, #3
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	401a      	ands	r2, r3
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001106:	6a3b      	ldr	r3, [r7, #32]
 8001108:	fa93 f3a3 	rbit	r3, r3
 800110c:	61fb      	str	r3, [r7, #28]
  return result;
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001118:	2320      	movs	r3, #32
 800111a:	e003      	b.n	8001124 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800111c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111e:	fab3 f383 	clz	r3, r3
 8001122:	b2db      	uxtb	r3, r3
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	fa01 f303 	lsl.w	r3, r1, r3
 800112c:	431a      	orrs	r2, r3
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	601a      	str	r2, [r3, #0]
}
 8001132:	bf00      	nop
 8001134:	372c      	adds	r7, #44	@ 0x2c
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800113e:	b480      	push	{r7}
 8001140:	b08b      	sub	sp, #44	@ 0x2c
 8001142:	af00      	add	r7, sp, #0
 8001144:	60f8      	str	r0, [r7, #12]
 8001146:	60b9      	str	r1, [r7, #8]
 8001148:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	68da      	ldr	r2, [r3, #12]
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	fa93 f3a3 	rbit	r3, r3
 8001158:	613b      	str	r3, [r7, #16]
  return result;
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d101      	bne.n	8001168 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001164:	2320      	movs	r3, #32
 8001166:	e003      	b.n	8001170 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	fab3 f383 	clz	r3, r3
 800116e:	b2db      	uxtb	r3, r3
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	2103      	movs	r1, #3
 8001174:	fa01 f303 	lsl.w	r3, r1, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	401a      	ands	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001180:	6a3b      	ldr	r3, [r7, #32]
 8001182:	fa93 f3a3 	rbit	r3, r3
 8001186:	61fb      	str	r3, [r7, #28]
  return result;
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800118c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001192:	2320      	movs	r3, #32
 8001194:	e003      	b.n	800119e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001198:	fab3 f383 	clz	r3, r3
 800119c:	b2db      	uxtb	r3, r3
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	6879      	ldr	r1, [r7, #4]
 80011a2:	fa01 f303 	lsl.w	r3, r1, r3
 80011a6:	431a      	orrs	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	60da      	str	r2, [r3, #12]
}
 80011ac:	bf00      	nop
 80011ae:	372c      	adds	r7, #44	@ 0x2c
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	683a      	ldr	r2, [r7, #0]
 80011c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011dc:	4b08      	ldr	r3, [pc, #32]	@ (8001200 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80011de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80011e0:	4907      	ldr	r1, [pc, #28]	@ (8001200 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011e8:	4b05      	ldr	r3, [pc, #20]	@ (8001200 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80011ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4013      	ands	r3, r2
 80011f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011f2:	68fb      	ldr	r3, [r7, #12]
}
 80011f4:	bf00      	nop
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	40021000 	.word	0x40021000

08001204 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	@ 0x28
 8001208:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800120a:	f107 031c 	add.w	r3, r7, #28
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
 8001224:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001226:	2004      	movs	r0, #4
 8001228:	f7ff ffd4 	bl	80011d4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 800122c:	2080      	movs	r0, #128	@ 0x80
 800122e:	f7ff ffd1 	bl	80011d4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001232:	2001      	movs	r0, #1
 8001234:	f7ff ffce 	bl	80011d4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001238:	2002      	movs	r0, #2
 800123a:	f7ff ffcb 	bl	80011d4 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 800123e:	2120      	movs	r1, #32
 8001240:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001244:	f7ff ffb8 	bl	80011b8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8001248:	491b      	ldr	r1, [pc, #108]	@ (80012b8 <MX_GPIO_Init+0xb4>)
 800124a:	2002      	movs	r0, #2
 800124c:	f7ff ff04 	bl	8001058 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001250:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001254:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800125a:	2301      	movs	r3, #1
 800125c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001260:	2300      	movs	r3, #0
 8001262:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001266:	2302      	movs	r3, #2
 8001268:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800126c:	f107 031c 	add.w	r3, r7, #28
 8001270:	4618      	mov	r0, r3
 8001272:	f006 fca5 	bl	8007bc0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8001276:	2200      	movs	r2, #0
 8001278:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800127c:	480f      	ldr	r0, [pc, #60]	@ (80012bc <MX_GPIO_Init+0xb8>)
 800127e:	f7ff ff5e 	bl	800113e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001288:	480c      	ldr	r0, [pc, #48]	@ (80012bc <MX_GPIO_Init+0xb8>)
 800128a:	f7ff ff1b 	bl	80010c4 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 800128e:	2320      	movs	r3, #32
 8001290:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001292:	2301      	movs	r3, #1
 8001294:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	4619      	mov	r1, r3
 80012a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012aa:	f006 fec8 	bl	800803e <LL_GPIO_Init>

}
 80012ae:	bf00      	nop
 80012b0:	3728      	adds	r7, #40	@ 0x28
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	00f00003 	.word	0x00f00003
 80012bc:	48000800 	.word	0x48000800

080012c0 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80012c4:	4b13      	ldr	r3, [pc, #76]	@ (8001314 <MX_LPTIM1_Init+0x54>)
 80012c6:	4a14      	ldr	r2, [pc, #80]	@ (8001318 <MX_LPTIM1_Init+0x58>)
 80012c8:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80012ca:	4b12      	ldr	r3, [pc, #72]	@ (8001314 <MX_LPTIM1_Init+0x54>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV4;
 80012d0:	4b10      	ldr	r3, [pc, #64]	@ (8001314 <MX_LPTIM1_Init+0x54>)
 80012d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012d6:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80012d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001314 <MX_LPTIM1_Init+0x54>)
 80012da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012de:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80012e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001314 <MX_LPTIM1_Init+0x54>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80012e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001314 <MX_LPTIM1_Init+0x54>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80012ec:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <MX_LPTIM1_Init+0x54>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80012f2:	4b08      	ldr	r3, [pc, #32]	@ (8001314 <MX_LPTIM1_Init+0x54>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80012f8:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <MX_LPTIM1_Init+0x54>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80012fe:	4805      	ldr	r0, [pc, #20]	@ (8001314 <MX_LPTIM1_Init+0x54>)
 8001300:	f002 fb34 	bl	800396c <HAL_LPTIM_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 800130a:	f000 f8ac 	bl	8001466 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000bf4 	.word	0x20000bf4
 8001318:	40007c00 	.word	0x40007c00

0800131c <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b0a6      	sub	sp, #152	@ 0x98
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001324:	f107 0310 	add.w	r3, r7, #16
 8001328:	2288      	movs	r2, #136	@ 0x88
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f007 fa57 	bl	80087e0 <memset>
  if(lptimHandle->Instance==LPTIM1)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a15      	ldr	r2, [pc, #84]	@ (800138c <HAL_LPTIM_MspInit+0x70>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d123      	bne.n	8001384 <HAL_LPTIM_MspInit+0x68>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 800133c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001340:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 8001342:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001346:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	4618      	mov	r0, r3
 800134e:	f003 fded 	bl	8004f2c <HAL_RCCEx_PeriphCLKConfig>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <HAL_LPTIM_MspInit+0x40>
    {
      Error_Handler();
 8001358:	f000 f885 	bl	8001466 <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800135c:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <HAL_LPTIM_MspInit+0x74>)
 800135e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001360:	4a0b      	ldr	r2, [pc, #44]	@ (8001390 <HAL_LPTIM_MspInit+0x74>)
 8001362:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001366:	6593      	str	r3, [r2, #88]	@ 0x58
 8001368:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <HAL_LPTIM_MspInit+0x74>)
 800136a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800136c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8001374:	2200      	movs	r2, #0
 8001376:	2100      	movs	r1, #0
 8001378:	2041      	movs	r0, #65	@ 0x41
 800137a:	f001 fbe2 	bl	8002b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800137e:	2041      	movs	r0, #65	@ 0x41
 8001380:	f001 fbfb 	bl	8002b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8001384:	bf00      	nop
 8001386:	3798      	adds	r7, #152	@ 0x98
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40007c00 	.word	0x40007c00
 8001390:	40021000 	.word	0x40021000

08001394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001398:	f001 fa38 	bl	800280c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800139c:	f000 f810 	bl	80013c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a0:	f7ff ff30 	bl	8001204 <MX_GPIO_Init>
  MX_DMA_Init();
 80013a4:	f7ff fe32 	bl	800100c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013a8:	f000 fe8a 	bl	80020c0 <MX_USART2_UART_Init>
  MX_LPTIM1_Init();
 80013ac:	f7ff ff88 	bl	80012c0 <MX_LPTIM1_Init>
  MX_DAC1_Init();
 80013b0:	f7ff fd8c 	bl	8000ecc <MX_DAC1_Init>
  MX_TIM2_Init();
 80013b4:	f000 f9c8 	bl	8001748 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  user_main();
 80013b8:	f001 f966 	bl	8002688 <user_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <main+0x28>

080013c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b096      	sub	sp, #88	@ 0x58
 80013c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	2244      	movs	r2, #68	@ 0x44
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f007 fa06 	bl	80087e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d4:	463b      	mov	r3, r7
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013e2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80013e6:	f002 fe51 	bl	800408c <HAL_PWREx_ControlVoltageScaling>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013f0:	f000 f839 	bl	8001466 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80013f4:	230a      	movs	r3, #10
 80013f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013fe:	2310      	movs	r3, #16
 8001400:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001402:	2301      	movs	r3, #1
 8001404:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001406:	2302      	movs	r3, #2
 8001408:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800140a:	2302      	movs	r3, #2
 800140c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800140e:	2301      	movs	r3, #1
 8001410:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001412:	230a      	movs	r3, #10
 8001414:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001416:	2307      	movs	r3, #7
 8001418:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800141a:	2302      	movs	r3, #2
 800141c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800141e:	2302      	movs	r3, #2
 8001420:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	4618      	mov	r0, r3
 8001428:	f002 ff80 	bl	800432c <HAL_RCC_OscConfig>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001432:	f000 f818 	bl	8001466 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001436:	230f      	movs	r3, #15
 8001438:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800143a:	2303      	movs	r3, #3
 800143c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800144a:	463b      	mov	r3, r7
 800144c:	2104      	movs	r1, #4
 800144e:	4618      	mov	r0, r3
 8001450:	f003 fb48 	bl	8004ae4 <HAL_RCC_ClockConfig>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800145a:	f000 f804 	bl	8001466 <Error_Handler>
  }
}
 800145e:	bf00      	nop
 8001460:	3758      	adds	r7, #88	@ 0x58
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800146a:	b672      	cpsid	i
}
 800146c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800146e:	bf00      	nop
 8001470:	e7fd      	b.n	800146e <Error_Handler+0x8>
	...

08001474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147a:	4b0f      	ldr	r3, [pc, #60]	@ (80014b8 <HAL_MspInit+0x44>)
 800147c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800147e:	4a0e      	ldr	r2, [pc, #56]	@ (80014b8 <HAL_MspInit+0x44>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6613      	str	r3, [r2, #96]	@ 0x60
 8001486:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <HAL_MspInit+0x44>)
 8001488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001492:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <HAL_MspInit+0x44>)
 8001494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001496:	4a08      	ldr	r2, [pc, #32]	@ (80014b8 <HAL_MspInit+0x44>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800149c:	6593      	str	r3, [r2, #88]	@ 0x58
 800149e:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <HAL_MspInit+0x44>)
 80014a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000

080014bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <NMI_Handler+0x4>

080014c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <HardFault_Handler+0x4>

080014cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <MemManage_Handler+0x4>

080014d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <BusFault_Handler+0x4>

080014dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <UsageFault_Handler+0x4>

080014e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001512:	f001 f9d7 	bl	80028c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8001520:	4802      	ldr	r0, [pc, #8]	@ (800152c <DMA1_Channel3_IRQHandler+0x10>)
 8001522:	f001 ff9a 	bl	800345a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000bac 	.word	0x20000bac

08001530 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
  end_dma = DWT->CYCCNT;
 8001534:	4b05      	ldr	r3, [pc, #20]	@ (800154c <DMA1_Channel7_IRQHandler+0x1c>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	4a05      	ldr	r2, [pc, #20]	@ (8001550 <DMA1_Channel7_IRQHandler+0x20>)
 800153a:	6013      	str	r3, [r2, #0]
  
  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800153c:	4805      	ldr	r0, [pc, #20]	@ (8001554 <DMA1_Channel7_IRQHandler+0x24>)
 800153e:	f001 ff8c 	bl	800345a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */
  DMA_TX_complete = true;
 8001542:	4b05      	ldr	r3, [pc, #20]	@ (8001558 <DMA1_Channel7_IRQHandler+0x28>)
 8001544:	2201      	movs	r2, #1
 8001546:	701a      	strb	r2, [r3, #0]

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	e0001000 	.word	0xe0001000
 8001550:	20000ec8 	.word	0x20000ec8
 8001554:	20000e24 	.word	0x20000e24
 8001558:	20000005 	.word	0x20000005

0800155c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  if(DMA_TX_complete){
 8001560:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <USART2_IRQHandler+0x48>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00f      	beq.n	8001588 <USART2_IRQHandler+0x2c>
    if((USART2->ISR & USART_ISR_RXNE) == USART_ISR_RXNE)
 8001568:	4b0f      	ldr	r3, [pc, #60]	@ (80015a8 <USART2_IRQHandler+0x4c>)
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	f003 0320 	and.w	r3, r3, #32
 8001570:	2b20      	cmp	r3, #32
 8001572:	d109      	bne.n	8001588 <USART2_IRQHandler+0x2c>
    {
      cli.charReceived = USART2->RDR;
 8001574:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <USART2_IRQHandler+0x4c>)
 8001576:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001578:	b29b      	uxth	r3, r3
 800157a:	b2da      	uxtb	r2, r3
 800157c:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <USART2_IRQHandler+0x50>)
 800157e:	751a      	strb	r2, [r3, #20]
      cli.parseChar(&cli);
 8001580:	4b0a      	ldr	r3, [pc, #40]	@ (80015ac <USART2_IRQHandler+0x50>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	4809      	ldr	r0, [pc, #36]	@ (80015ac <USART2_IRQHandler+0x50>)
 8001586:	4798      	blx	r3
    }
  }

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001588:	4809      	ldr	r0, [pc, #36]	@ (80015b0 <USART2_IRQHandler+0x54>)
 800158a:	f004 fe71 	bl	8006270 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
 #if USE_LL_DRIVER == 1
 #else
  if(DMA_TX_complete){
 800158e:	4b05      	ldr	r3, [pc, #20]	@ (80015a4 <USART2_IRQHandler+0x48>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d004      	beq.n	80015a0 <USART2_IRQHandler+0x44>
    HAL_UART_Receive_IT(&huart2, &cli.charReceived, 1);
 8001596:	2201      	movs	r2, #1
 8001598:	4906      	ldr	r1, [pc, #24]	@ (80015b4 <USART2_IRQHandler+0x58>)
 800159a:	4805      	ldr	r0, [pc, #20]	@ (80015b0 <USART2_IRQHandler+0x54>)
 800159c:	f004 fda0 	bl	80060e0 <HAL_UART_Receive_IT>
  }
  #endif
  /* USER CODE END USART2_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000005 	.word	0x20000005
 80015a8:	40004400 	.word	0x40004400
 80015ac:	20000e6c 	.word	0x20000e6c
 80015b0:	20000d9c 	.word	0x20000d9c
 80015b4:	20000e80 	.word	0x20000e80

080015b8 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80015bc:	4803      	ldr	r0, [pc, #12]	@ (80015cc <LPTIM1_IRQHandler+0x14>)
 80015be:	f002 fb37 	bl	8003c30 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
  lp_handler();
 80015c2:	f000 ff35 	bl	8002430 <lp_handler>
  /* USER CODE END LPTIM1_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000bf4 	.word	0x20000bf4

080015d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return 1;
 80015d4:	2301      	movs	r3, #1
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <_kill>:

int _kill(int pid, int sig)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015ea:	f007 f9a3 	bl	8008934 <__errno>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2216      	movs	r2, #22
 80015f2:	601a      	str	r2, [r3, #0]
  return -1;
 80015f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <_exit>:

void _exit (int status)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001608:	f04f 31ff 	mov.w	r1, #4294967295
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ffe7 	bl	80015e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001612:	bf00      	nop
 8001614:	e7fd      	b.n	8001612 <_exit+0x12>

08001616 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b086      	sub	sp, #24
 800161a:	af00      	add	r7, sp, #0
 800161c:	60f8      	str	r0, [r7, #12]
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	e00a      	b.n	800163e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001628:	f3af 8000 	nop.w
 800162c:	4601      	mov	r1, r0
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	1c5a      	adds	r2, r3, #1
 8001632:	60ba      	str	r2, [r7, #8]
 8001634:	b2ca      	uxtb	r2, r1
 8001636:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	3301      	adds	r3, #1
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	429a      	cmp	r2, r3
 8001644:	dbf0      	blt.n	8001628 <_read+0x12>
  }

  return len;
 8001646:	687b      	ldr	r3, [r7, #4]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001658:	f04f 33ff 	mov.w	r3, #4294967295
}
 800165c:	4618      	mov	r0, r3
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001678:	605a      	str	r2, [r3, #4]
  return 0;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <_isatty>:

int _isatty(int file)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001690:	2301      	movs	r3, #1
}
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800169e:	b480      	push	{r7}
 80016a0:	b085      	sub	sp, #20
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	60f8      	str	r0, [r7, #12]
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c0:	4a14      	ldr	r2, [pc, #80]	@ (8001714 <_sbrk+0x5c>)
 80016c2:	4b15      	ldr	r3, [pc, #84]	@ (8001718 <_sbrk+0x60>)
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016cc:	4b13      	ldr	r3, [pc, #76]	@ (800171c <_sbrk+0x64>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d102      	bne.n	80016da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d4:	4b11      	ldr	r3, [pc, #68]	@ (800171c <_sbrk+0x64>)
 80016d6:	4a12      	ldr	r2, [pc, #72]	@ (8001720 <_sbrk+0x68>)
 80016d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016da:	4b10      	ldr	r3, [pc, #64]	@ (800171c <_sbrk+0x64>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d207      	bcs.n	80016f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e8:	f007 f924 	bl	8008934 <__errno>
 80016ec:	4603      	mov	r3, r0
 80016ee:	220c      	movs	r2, #12
 80016f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295
 80016f6:	e009      	b.n	800170c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f8:	4b08      	ldr	r3, [pc, #32]	@ (800171c <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016fe:	4b07      	ldr	r3, [pc, #28]	@ (800171c <_sbrk+0x64>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4413      	add	r3, r2
 8001706:	4a05      	ldr	r2, [pc, #20]	@ (800171c <_sbrk+0x64>)
 8001708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800170a:	68fb      	ldr	r3, [r7, #12]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20018000 	.word	0x20018000
 8001718:	00000400 	.word	0x00000400
 800171c:	20000c2c 	.word	0x20000c2c
 8001720:	20001828 	.word	0x20001828

08001724 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001728:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <SystemInit+0x20>)
 800172a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800172e:	4a05      	ldr	r2, [pc, #20]	@ (8001744 <SystemInit+0x20>)
 8001730:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001734:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800174e:	f107 0310 	add.w	r3, r7, #16
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001766:	4b1d      	ldr	r3, [pc, #116]	@ (80017dc <MX_TIM2_Init+0x94>)
 8001768:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800176c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90;
 800176e:	4b1b      	ldr	r3, [pc, #108]	@ (80017dc <MX_TIM2_Init+0x94>)
 8001770:	225a      	movs	r2, #90	@ 0x5a
 8001772:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001774:	4b19      	ldr	r3, [pc, #100]	@ (80017dc <MX_TIM2_Init+0x94>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800177a:	4b18      	ldr	r3, [pc, #96]	@ (80017dc <MX_TIM2_Init+0x94>)
 800177c:	2263      	movs	r2, #99	@ 0x63
 800177e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001780:	4b16      	ldr	r3, [pc, #88]	@ (80017dc <MX_TIM2_Init+0x94>)
 8001782:	2200      	movs	r2, #0
 8001784:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001786:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <MX_TIM2_Init+0x94>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800178c:	4813      	ldr	r0, [pc, #76]	@ (80017dc <MX_TIM2_Init+0x94>)
 800178e:	f004 f889 	bl	80058a4 <HAL_TIM_Base_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001798:	f7ff fe65 	bl	8001466 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800179c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017a2:	f107 0310 	add.w	r3, r7, #16
 80017a6:	4619      	mov	r1, r3
 80017a8:	480c      	ldr	r0, [pc, #48]	@ (80017dc <MX_TIM2_Init+0x94>)
 80017aa:	f004 f93b 	bl	8005a24 <HAL_TIM_ConfigClockSource>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80017b4:	f7ff fe57 	bl	8001466 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017b8:	2320      	movs	r3, #32
 80017ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	4619      	mov	r1, r3
 80017c4:	4805      	ldr	r0, [pc, #20]	@ (80017dc <MX_TIM2_Init+0x94>)
 80017c6:	f004 fb2b 	bl	8005e20 <HAL_TIMEx_MasterConfigSynchronization>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80017d0:	f7ff fe49 	bl	8001466 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017d4:	bf00      	nop
 80017d6:	3720      	adds	r7, #32
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000c30 	.word	0x20000c30

080017e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017f0:	d10b      	bne.n	800180a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017f2:	4b09      	ldr	r3, [pc, #36]	@ (8001818 <HAL_TIM_Base_MspInit+0x38>)
 80017f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f6:	4a08      	ldr	r2, [pc, #32]	@ (8001818 <HAL_TIM_Base_MspInit+0x38>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80017fe:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <HAL_TIM_Base_MspInit+0x38>)
 8001800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800180a:	bf00      	nop
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	40021000 	.word	0x40021000

0800181c <_internal_cls>:
static void cleanUp(uCShell_type *ptr_ucShell);
void printBanner(void);
cmd_handler stream_Handler_ptr = NULL;

static void _internal_cls(uint8_t num, char *values[])
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	6039      	str	r1, [r7, #0]
 8001826:	71fb      	strb	r3, [r7, #7]
    uCShell.print("\033[2J");
 8001828:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <_internal_cls+0x28>)
 800182a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800182c:	4806      	ldr	r0, [pc, #24]	@ (8001848 <_internal_cls+0x2c>)
 800182e:	4798      	blx	r3
    #if RETARGET_PRINTF == 1
    fflush(stdout);
 8001830:	4b06      	ldr	r3, [pc, #24]	@ (800184c <_internal_cls+0x30>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	4618      	mov	r0, r3
 8001838:	f006 fda4 	bl	8008384 <fflush>
    #endif
}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000d58 	.word	0x20000d58
 8001848:	0800a3c8 	.word	0x0800a3c8
 800184c:	20000b2c 	.word	0x20000b2c

08001850 <registerCommand>:
static void registerCommand(char *cmd, char delimeter, cmd_handler handler, char *help, bool stream)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	607a      	str	r2, [r7, #4]
 800185a:	603b      	str	r3, [r7, #0]
 800185c:	460b      	mov	r3, r1
 800185e:	72fb      	strb	r3, [r7, #11]
    // register a command at index matching current number of commands
    // this helps keep track of where to put the next registered command
    cmd_list[CURRENT_NUM_OF_COMMANDS].command = cmd;
 8001860:	4b23      	ldr	r3, [pc, #140]	@ (80018f0 <registerCommand+0xa0>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	4619      	mov	r1, r3
 8001866:	4a23      	ldr	r2, [pc, #140]	@ (80018f4 <registerCommand+0xa4>)
 8001868:	460b      	mov	r3, r1
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	601a      	str	r2, [r3, #0]
    cmd_list[CURRENT_NUM_OF_COMMANDS].delimeter = delimeter;
 8001876:	4b1e      	ldr	r3, [pc, #120]	@ (80018f0 <registerCommand+0xa0>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	4619      	mov	r1, r3
 800187c:	4a1d      	ldr	r2, [pc, #116]	@ (80018f4 <registerCommand+0xa4>)
 800187e:	460b      	mov	r3, r1
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	440b      	add	r3, r1
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	3304      	adds	r3, #4
 800188a:	7afa      	ldrb	r2, [r7, #11]
 800188c:	701a      	strb	r2, [r3, #0]
    cmd_list[CURRENT_NUM_OF_COMMANDS].cmdHandler = handler;
 800188e:	4b18      	ldr	r3, [pc, #96]	@ (80018f0 <registerCommand+0xa0>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	4619      	mov	r1, r3
 8001894:	4a17      	ldr	r2, [pc, #92]	@ (80018f4 <registerCommand+0xa4>)
 8001896:	460b      	mov	r3, r1
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	440b      	add	r3, r1
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	3308      	adds	r3, #8
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	601a      	str	r2, [r3, #0]
    cmd_list[CURRENT_NUM_OF_COMMANDS].help = help;
 80018a6:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <registerCommand+0xa0>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	4619      	mov	r1, r3
 80018ac:	4a11      	ldr	r2, [pc, #68]	@ (80018f4 <registerCommand+0xa4>)
 80018ae:	460b      	mov	r3, r1
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	440b      	add	r3, r1
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	330c      	adds	r3, #12
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	601a      	str	r2, [r3, #0]
    cmd_list[CURRENT_NUM_OF_COMMANDS].streamCommand = stream;
 80018be:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <registerCommand+0xa0>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	4619      	mov	r1, r3
 80018c4:	4a0b      	ldr	r2, [pc, #44]	@ (80018f4 <registerCommand+0xa4>)
 80018c6:	460b      	mov	r3, r1
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	440b      	add	r3, r1
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	3310      	adds	r3, #16
 80018d2:	7e3a      	ldrb	r2, [r7, #24]
 80018d4:	701a      	strb	r2, [r3, #0]
    CURRENT_NUM_OF_COMMANDS++;
 80018d6:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <registerCommand+0xa0>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	3301      	adds	r3, #1
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4b04      	ldr	r3, [pc, #16]	@ (80018f0 <registerCommand+0xa0>)
 80018e0:	701a      	strb	r2, [r3, #0]
}
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	20000d94 	.word	0x20000d94
 80018f4:	20000c7c 	.word	0x20000c7c

080018f8 <CL_cli_init>:
void CL_cli_init(uCShell_type *ptr_ucShell, char *prompt, print_f print_function)
{
 80018f8:	b590      	push	{r4, r7, lr}
 80018fa:	b087      	sub	sp, #28
 80018fc:	af02      	add	r7, sp, #8
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
    // since structs
    ptr_ucShell->registerCommand = registerCommand;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4a25      	ldr	r2, [pc, #148]	@ (800199c <CL_cli_init+0xa4>)
 8001908:	609a      	str	r2, [r3, #8]
    ptr_ucShell->parseCommand = parseCMD;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4a24      	ldr	r2, [pc, #144]	@ (80019a0 <CL_cli_init+0xa8>)
 800190e:	611a      	str	r2, [r3, #16]
    ptr_ucShell->parseChar = parseChar;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4a24      	ldr	r2, [pc, #144]	@ (80019a4 <CL_cli_init+0xac>)
 8001914:	619a      	str	r2, [r3, #24]
    ptr_ucShell->delimeter = '\r';
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	220d      	movs	r2, #13
 800191a:	711a      	strb	r2, [r3, #4]
    ptr_ucShell->print = print_function;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	651a      	str	r2, [r3, #80]	@ 0x50
    ptr_ucShell->prompt = prompt;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	68ba      	ldr	r2, [r7, #8]
 8001926:	601a      	str	r2, [r3, #0]
    uCShell.msgPtr = 0;
 8001928:	4b1f      	ldr	r3, [pc, #124]	@ (80019a8 <CL_cli_init+0xb0>)
 800192a:	2200      	movs	r2, #0
 800192c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    uCShell.print = print_function;
 8001930:	4a1d      	ldr	r2, [pc, #116]	@ (80019a8 <CL_cli_init+0xb0>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6353      	str	r3, [r2, #52]	@ 0x34
    uCShell.stream = false;
 8001936:	4b1c      	ldr	r3, [pc, #112]	@ (80019a8 <CL_cli_init+0xb0>)
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    // register command to show supported commands
    ptr_ucShell->registerCommand("?", ' ', _internal_cmd_command_list_handler, "Lists supported commands", false);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	689c      	ldr	r4, [r3, #8]
 8001942:	2300      	movs	r3, #0
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	4b19      	ldr	r3, [pc, #100]	@ (80019ac <CL_cli_init+0xb4>)
 8001948:	4a19      	ldr	r2, [pc, #100]	@ (80019b0 <CL_cli_init+0xb8>)
 800194a:	2120      	movs	r1, #32
 800194c:	4819      	ldr	r0, [pc, #100]	@ (80019b4 <CL_cli_init+0xbc>)
 800194e:	47a0      	blx	r4
    ptr_ucShell->registerCommand("help", ' ', _internal_cmd_command_list_handler, "Lists supported commands", false);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	689c      	ldr	r4, [r3, #8]
 8001954:	2300      	movs	r3, #0
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	4b14      	ldr	r3, [pc, #80]	@ (80019ac <CL_cli_init+0xb4>)
 800195a:	4a15      	ldr	r2, [pc, #84]	@ (80019b0 <CL_cli_init+0xb8>)
 800195c:	2120      	movs	r1, #32
 800195e:	4816      	ldr	r0, [pc, #88]	@ (80019b8 <CL_cli_init+0xc0>)
 8001960:	47a0      	blx	r4
    ptr_ucShell->registerCommand("cls", ' ', _internal_cls, "Clear screen", false);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	689c      	ldr	r4, [r3, #8]
 8001966:	2300      	movs	r3, #0
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	4b14      	ldr	r3, [pc, #80]	@ (80019bc <CL_cli_init+0xc4>)
 800196c:	4a14      	ldr	r2, [pc, #80]	@ (80019c0 <CL_cli_init+0xc8>)
 800196e:	2120      	movs	r1, #32
 8001970:	4814      	ldr	r0, [pc, #80]	@ (80019c4 <CL_cli_init+0xcc>)
 8001972:	47a0      	blx	r4

    printBanner();
 8001974:	f000 fb90 	bl	8002098 <printBanner>
    _uCShell_print_prompt();
 8001978:	4b0b      	ldr	r3, [pc, #44]	@ (80019a8 <CL_cli_init+0xb0>)
 800197a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	6812      	ldr	r2, [r2, #0]
 8001980:	4611      	mov	r1, r2
 8001982:	4811      	ldr	r0, [pc, #68]	@ (80019c8 <CL_cli_init+0xd0>)
 8001984:	4798      	blx	r3
    #if RETARGET_PRINTF == 1
        fflush(stdout);
 8001986:	4b11      	ldr	r3, [pc, #68]	@ (80019cc <CL_cli_init+0xd4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	4618      	mov	r0, r3
 800198e:	f006 fcf9 	bl	8008384 <fflush>
    #endif

}
 8001992:	bf00      	nop
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	bd90      	pop	{r4, r7, pc}
 800199a:	bf00      	nop
 800199c:	08001851 	.word	0x08001851
 80019a0:	08001bf1 	.word	0x08001bf1
 80019a4:	080019d1 	.word	0x080019d1
 80019a8:	20000d58 	.word	0x20000d58
 80019ac:	0800a3d0 	.word	0x0800a3d0
 80019b0:	08001f81 	.word	0x08001f81
 80019b4:	0800a3ec 	.word	0x0800a3ec
 80019b8:	0800a3f0 	.word	0x0800a3f0
 80019bc:	0800a3f8 	.word	0x0800a3f8
 80019c0:	0800181d 	.word	0x0800181d
 80019c4:	0800a408 	.word	0x0800a408
 80019c8:	0800a40c 	.word	0x0800a40c
 80019cc:	20000b2c 	.word	0x20000b2c

080019d0 <parseChar>:
void parseChar(uCShell_type *ptr_ucShell)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
    /*	If ptr_ucShell.parsePending is already true then it means a message is
       still parsing , this current data will be ginored */
    if (ptr_ucShell->parsePending == false)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	7b1b      	ldrb	r3, [r3, #12]
 80019dc:	f083 0301 	eor.w	r3, r3, #1
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 808d 	beq.w	8001b02 <parseChar+0x132>
         *		--reset the pointer counter
         *		--set message received to true
         *
         */

        if (ptr_ucShell->charReceived == ptr_ucShell->delimeter || ptr_ucShell->charReceived == '\n')
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	7d1a      	ldrb	r2, [r3, #20]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	791b      	ldrb	r3, [r3, #4]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d003      	beq.n	80019fc <parseChar+0x2c>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	7d1b      	ldrb	r3, [r3, #20]
 80019f8:	2b0a      	cmp	r3, #10
 80019fa:	d107      	bne.n	8001a0c <parseChar+0x3c>
        {
            // reset temp pointer countr
            uCShell.msgPtr = 0;
 80019fc:	4b43      	ldr	r3, [pc, #268]	@ (8001b0c <parseChar+0x13c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

            // this flag is used to let the application know we have a command to
            // parse do not parse anything in ISR
            ptr_ucShell->parsePending = true;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	731a      	strb	r2, [r3, #12]
 8001a0a:	e07a      	b.n	8001b02 <parseChar+0x132>
            
        }
        // start stop delimeters for stream commands
        else if (ptr_ucShell->charReceived == '[' && stream_Handler_ptr != NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	7d1b      	ldrb	r3, [r3, #20]
 8001a10:	2b5b      	cmp	r3, #91	@ 0x5b
 8001a12:	d108      	bne.n	8001a26 <parseChar+0x56>
 8001a14:	4b3e      	ldr	r3, [pc, #248]	@ (8001b10 <parseChar+0x140>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d004      	beq.n	8001a26 <parseChar+0x56>
        {
            uCShell.stream = true;
 8001a1c:	4b3b      	ldr	r3, [pc, #236]	@ (8001b0c <parseChar+0x13c>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8001a24:	e06d      	b.n	8001b02 <parseChar+0x132>
        }
        else if (ptr_ucShell->charReceived == ']')
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	7d1b      	ldrb	r3, [r3, #20]
 8001a2a:	2b5d      	cmp	r3, #93	@ 0x5d
 8001a2c:	d118      	bne.n	8001a60 <parseChar+0x90>
        {
            uCShell.stream = false;
 8001a2e:	4b37      	ldr	r3, [pc, #220]	@ (8001b0c <parseChar+0x13c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            uCShell.print("\r\n");
 8001a36:	4b35      	ldr	r3, [pc, #212]	@ (8001b0c <parseChar+0x13c>)
 8001a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a3a:	4836      	ldr	r0, [pc, #216]	@ (8001b14 <parseChar+0x144>)
 8001a3c:	4798      	blx	r3
            cleanUp(ptr_ucShell);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 fa5c 	bl	8001efc <cleanUp>
            _uCShell_print_prompt();
 8001a44:	4b31      	ldr	r3, [pc, #196]	@ (8001b0c <parseChar+0x13c>)
 8001a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	4611      	mov	r1, r2
 8001a4e:	4832      	ldr	r0, [pc, #200]	@ (8001b18 <parseChar+0x148>)
 8001a50:	4798      	blx	r3
            #if RETARGET_PRINTF == 1
                fflush(stdout);
 8001a52:	4b32      	ldr	r3, [pc, #200]	@ (8001b1c <parseChar+0x14c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f006 fc93 	bl	8008384 <fflush>
                fflush(stdout);
                #endif
            }
        }
    }
}
 8001a5e:	e050      	b.n	8001b02 <parseChar+0x132>
        else if (ptr_ucShell->charReceived == BACKSPACE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	7d1a      	ldrb	r2, [r3, #20]
 8001a64:	4b2e      	ldr	r3, [pc, #184]	@ (8001b20 <parseChar+0x150>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d11f      	bne.n	8001aac <parseChar+0xdc>
            if (uCShell.msgPtr > 0) // make sure we can even decrement in the first place
 8001a6c:	4b27      	ldr	r3, [pc, #156]	@ (8001b0c <parseChar+0x13c>)
 8001a6e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d045      	beq.n	8001b02 <parseChar+0x132>
                uCShell.ucshellMsg[uCShell.msgPtr] = NULL;
 8001a76:	4b25      	ldr	r3, [pc, #148]	@ (8001b0c <parseChar+0x13c>)
 8001a78:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b23      	ldr	r3, [pc, #140]	@ (8001b0c <parseChar+0x13c>)
 8001a80:	2100      	movs	r1, #0
 8001a82:	5499      	strb	r1, [r3, r2]
                uCShell.msgPtr--;
 8001a84:	4b21      	ldr	r3, [pc, #132]	@ (8001b0c <parseChar+0x13c>)
 8001a86:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4b1f      	ldr	r3, [pc, #124]	@ (8001b0c <parseChar+0x13c>)
 8001a90:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                uCShell.ucshellMsg[uCShell.msgPtr] = NULL;
 8001a94:	4b1d      	ldr	r3, [pc, #116]	@ (8001b0c <parseChar+0x13c>)
 8001a96:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b0c <parseChar+0x13c>)
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	5499      	strb	r1, [r3, r2]
                uCShell.print("\x08 \x08");
 8001aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b0c <parseChar+0x13c>)
 8001aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aa6:	481f      	ldr	r0, [pc, #124]	@ (8001b24 <parseChar+0x154>)
 8001aa8:	4798      	blx	r3
}
 8001aaa:	e02a      	b.n	8001b02 <parseChar+0x132>
        else if (ptr_ucShell->charReceived == 0x09)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	7d1b      	ldrb	r3, [r3, #20]
 8001ab0:	2b09      	cmp	r3, #9
 8001ab2:	d103      	bne.n	8001abc <parseChar+0xec>
            printHint(ptr_ucShell);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 f839 	bl	8001b2c <printHint>
}
 8001aba:	e022      	b.n	8001b02 <parseChar+0x132>
            if (uCShell.msgPtr < MESSAGE_MAX)
 8001abc:	4b13      	ldr	r3, [pc, #76]	@ (8001b0c <parseChar+0x13c>)
 8001abe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001ac2:	2b31      	cmp	r3, #49	@ 0x31
 8001ac4:	d81d      	bhi.n	8001b02 <parseChar+0x132>
                uCShell.ucshellMsg[uCShell.msgPtr] = ptr_ucShell->charReceived;
 8001ac6:	4b11      	ldr	r3, [pc, #68]	@ (8001b0c <parseChar+0x13c>)
 8001ac8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001acc:	461a      	mov	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	7d19      	ldrb	r1, [r3, #20]
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b0c <parseChar+0x13c>)
 8001ad4:	5499      	strb	r1, [r3, r2]
                uCShell.msgPtr++;
 8001ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8001b0c <parseChar+0x13c>)
 8001ad8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001adc:	3301      	adds	r3, #1
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8001b0c <parseChar+0x13c>)
 8001ae2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                uCShell.print("%c", ptr_ucShell->charReceived);
 8001ae6:	4b09      	ldr	r3, [pc, #36]	@ (8001b0c <parseChar+0x13c>)
 8001ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	7d12      	ldrb	r2, [r2, #20]
 8001aee:	4611      	mov	r1, r2
 8001af0:	480d      	ldr	r0, [pc, #52]	@ (8001b28 <parseChar+0x158>)
 8001af2:	4798      	blx	r3
                fflush(stdout);
 8001af4:	4b09      	ldr	r3, [pc, #36]	@ (8001b1c <parseChar+0x14c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f006 fc42 	bl	8008384 <fflush>
}
 8001b00:	e7ff      	b.n	8001b02 <parseChar+0x132>
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000d58 	.word	0x20000d58
 8001b10:	20000d98 	.word	0x20000d98
 8001b14:	0800a418 	.word	0x0800a418
 8001b18:	0800a40c 	.word	0x0800a40c
 8001b1c:	20000b2c 	.word	0x20000b2c
 8001b20:	20000004 	.word	0x20000004
 8001b24:	0800a41c 	.word	0x0800a41c
 8001b28:	0800a420 	.word	0x0800a420

08001b2c <printHint>:

void printHint(uCShell_type *ptr_ucShell)
{
 8001b2c:	b590      	push	{r4, r7, lr}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]

    bool matchFound = false;
 8001b34:	2300      	movs	r3, #0
 8001b36:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < CURRENT_NUM_OF_COMMANDS; i++)
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	e025      	b.n	8001b8a <printHint+0x5e>
    {
        if ((memcmp(uCShell.ucshellMsg, cmd_list[i].command, strlen(uCShell.ucshellMsg))) == 0)
 8001b3e:	4924      	ldr	r1, [pc, #144]	@ (8001bd0 <printHint+0xa4>)
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	681c      	ldr	r4, [r3, #0]
 8001b4e:	4821      	ldr	r0, [pc, #132]	@ (8001bd4 <printHint+0xa8>)
 8001b50:	f7fe fb48 	bl	80001e4 <strlen>
 8001b54:	4603      	mov	r3, r0
 8001b56:	461a      	mov	r2, r3
 8001b58:	4621      	mov	r1, r4
 8001b5a:	481e      	ldr	r0, [pc, #120]	@ (8001bd4 <printHint+0xa8>)
 8001b5c:	f006 fe30 	bl	80087c0 <memcmp>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10e      	bne.n	8001b84 <printHint+0x58>
        {
            ptr_ucShell->print("\r\n>%s", cmd_list[i].command);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
 8001b6a:	4919      	ldr	r1, [pc, #100]	@ (8001bd0 <printHint+0xa4>)
 8001b6c:	68ba      	ldr	r2, [r7, #8]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	440b      	add	r3, r1
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4816      	ldr	r0, [pc, #88]	@ (8001bd8 <printHint+0xac>)
 8001b7e:	47a0      	blx	r4
            matchFound = true;
 8001b80:	2301      	movs	r3, #1
 8001b82:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < CURRENT_NUM_OF_COMMANDS; i++)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	3301      	adds	r3, #1
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	4b14      	ldr	r3, [pc, #80]	@ (8001bdc <printHint+0xb0>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	4293      	cmp	r3, r2
 8001b94:	dbd3      	blt.n	8001b3e <printHint+0x12>
        }
    }
    if (matchFound)
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d015      	beq.n	8001bc8 <printHint+0x9c>
    {
        ptr_ucShell->print("\r\n");
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ba0:	480f      	ldr	r0, [pc, #60]	@ (8001be0 <printHint+0xb4>)
 8001ba2:	4798      	blx	r3
        _print_prompt();
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	4611      	mov	r1, r2
 8001bae:	480d      	ldr	r0, [pc, #52]	@ (8001be4 <printHint+0xb8>)
 8001bb0:	4798      	blx	r3
        ptr_ucShell->print("%s", uCShell.ucshellMsg);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bb6:	4907      	ldr	r1, [pc, #28]	@ (8001bd4 <printHint+0xa8>)
 8001bb8:	480b      	ldr	r0, [pc, #44]	@ (8001be8 <printHint+0xbc>)
 8001bba:	4798      	blx	r3
        #if RETARGET_PRINTF == 1
            fflush(stdout);
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001bec <printHint+0xc0>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f006 fbde 	bl	8008384 <fflush>
        #endif
    }
}
 8001bc8:	bf00      	nop
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd90      	pop	{r4, r7, pc}
 8001bd0:	20000c7c 	.word	0x20000c7c
 8001bd4:	20000d58 	.word	0x20000d58
 8001bd8:	0800a424 	.word	0x0800a424
 8001bdc:	20000d94 	.word	0x20000d94
 8001be0:	0800a418 	.word	0x0800a418
 8001be4:	0800a40c 	.word	0x0800a40c
 8001be8:	0800a42c 	.word	0x0800a42c
 8001bec:	20000b2c 	.word	0x20000b2c

08001bf0 <parseCMD>:

void parseCMD(uCShell_type *ptr_ucShell)
{
 8001bf0:	b590      	push	{r4, r7, lr}
 8001bf2:	b091      	sub	sp, #68	@ 0x44
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
    // used retreive the command and tokens via strtok
 
    // will store the delimeter for a matching command
    char delimeter;
    // store found arguemtns
    char *tokens_found[10] = {NULL};
 8001bf8:	f107 0308 	add.w	r3, r7, #8
 8001bfc:	2228      	movs	r2, #40	@ 0x28
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f006 fded 	bl	80087e0 <memset>

    bool matchFound = false;
 8001c06:	2300      	movs	r3, #0
 8001c08:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    // retreive just the command by setting the first delimeter of strtok to
    // new line / enter / line feed etc...
    token = strtok(uCShell.ucshellMsg, " \n \r");
 8001c0c:	499e      	ldr	r1, [pc, #632]	@ (8001e88 <parseCMD+0x298>)
 8001c0e:	489f      	ldr	r0, [pc, #636]	@ (8001e8c <parseCMD+0x29c>)
 8001c10:	f006 fdee 	bl	80087f0 <strtok>
 8001c14:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (token == NULL)
 8001c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d110      	bne.n	8001c3e <parseCMD+0x4e>
    {
        cleanUp(ptr_ucShell);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f96d 	bl	8001efc <cleanUp>
        _print_prompt();
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6812      	ldr	r2, [r2, #0]
 8001c2a:	4611      	mov	r1, r2
 8001c2c:	4898      	ldr	r0, [pc, #608]	@ (8001e90 <parseCMD+0x2a0>)
 8001c2e:	4798      	blx	r3
        #if RETARGET_PRINTF == 1
            fflush(stdout);
 8001c30:	4b98      	ldr	r3, [pc, #608]	@ (8001e94 <parseCMD+0x2a4>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f006 fba4 	bl	8008384 <fflush>
 8001c3c:	e153      	b.n	8001ee6 <parseCMD+0x2f6>
    //--------------------------------------| Strcmp based search
    //|---------------------------------

    // search for the command in cmd_lists of registered commands
    int i;
    for (i = 0; i < CURRENT_NUM_OF_COMMANDS; i++)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c42:	e119      	b.n	8001e78 <parseCMD+0x288>
    {
        // if a command match occurs (strcmp returns zero on string match)
        if (!(strcmp(token, cmd_list[i].command)))
 8001c44:	4994      	ldr	r1, [pc, #592]	@ (8001e98 <parseCMD+0x2a8>)
 8001c46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001c48:	4613      	mov	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4619      	mov	r1, r3
 8001c56:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001c58:	f7fe faba 	bl	80001d0 <strcmp>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f040 80ff 	bne.w	8001e62 <parseCMD+0x272>
        {
            // so we can break out of the for loop
            matchFound = true;
 8001c64:	2301      	movs	r3, #1
 8001c66:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

            // now go into the struct of matching command and use the given
            // delimeter to extract the rest of the parameters if any
            delimeter = cmd_list[i].delimeter;
 8001c6a:	498b      	ldr	r1, [pc, #556]	@ (8001e98 <parseCMD+0x2a8>)
 8001c6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001c6e:	4613      	mov	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	440b      	add	r3, r1
 8001c78:	3304      	adds	r3, #4
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

            // this is used to keep track of how many arguments were passed so we
            // can tell the handler function
            uint8_t argumentCount = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

            // start going through the string tokeninzing and using the delimeter
            while (token != NULL)
 8001c86:	e016      	b.n	8001cb6 <parseCMD+0xc6>
            {
                // get the next token
                token = strtok(NULL, &delimeter);
 8001c88:	f107 0332 	add.w	r3, r7, #50	@ 0x32
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f006 fdae 	bl	80087f0 <strtok>
 8001c94:	63f8      	str	r0, [r7, #60]	@ 0x3c

                // check if the first token is a "?"

                if (token == NULL) // if result is NULL "endof string" then we are done
 8001c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d010      	beq.n	8001cbe <parseCMD+0xce>
                else
                {
                    // add the token to an array so we can send it to the handler
                    // remember these are all pointers
                    // to the original ucshellMsg
                    tokens_found[argumentCount] = token;
 8001c9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	3340      	adds	r3, #64	@ 0x40
 8001ca4:	443b      	add	r3, r7
 8001ca6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001ca8:	f843 2c38 	str.w	r2, [r3, #-56]
                    // increment argument counter so we can also tell the handler
                    // how many arguments to expect
                    argumentCount++;
 8001cac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            while (token != NULL)
 8001cb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1e5      	bne.n	8001c88 <parseCMD+0x98>
 8001cbc:	e000      	b.n	8001cc0 <parseCMD+0xd0>
                    break; // outof while loop
 8001cbe:	bf00      	nop
                }
            }

            // check if this is a request for the help msg
            // only if arguments is non-zero
            if (argumentCount && *tokens_found[0] == '?')
 8001cc0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d02a      	beq.n	8001d1e <parseCMD+0x12e>
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b3f      	cmp	r3, #63	@ 0x3f
 8001cce:	d126      	bne.n	8001d1e <parseCMD+0x12e>
            {
                ptr_ucShell->print("\r\n[HELP: %s] %s\r\n", cmd_list[i].command, cmd_list[i].help);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
 8001cd4:	4970      	ldr	r1, [pc, #448]	@ (8001e98 <parseCMD+0x2a8>)
 8001cd6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	6819      	ldr	r1, [r3, #0]
 8001ce4:	486c      	ldr	r0, [pc, #432]	@ (8001e98 <parseCMD+0x2a8>)
 8001ce6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ce8:	4613      	mov	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4403      	add	r3, r0
 8001cf2:	330c      	adds	r3, #12
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4868      	ldr	r0, [pc, #416]	@ (8001e9c <parseCMD+0x2ac>)
 8001cfa:	47a0      	blx	r4
                _print_prompt();
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6812      	ldr	r2, [r2, #0]
 8001d04:	4611      	mov	r1, r2
 8001d06:	4862      	ldr	r0, [pc, #392]	@ (8001e90 <parseCMD+0x2a0>)
 8001d08:	4798      	blx	r3
                ptr_ucShell->parsePending = false;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	731a      	strb	r2, [r3, #12]
                #if RETARGET_PRINTF == 1
                    fflush(stdout);
 8001d10:	4b60      	ldr	r3, [pc, #384]	@ (8001e94 <parseCMD+0x2a4>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f006 fb34 	bl	8008384 <fflush>
                #endif
                break;
 8001d1c:	e0c7      	b.n	8001eae <parseCMD+0x2be>
            // pass the number of tokens found as well as a list of the tokens
#if !USING_DESKTOP
           // ptr_ucShell->print("\r\n");
#endif
            // check if command found is a stream command
            if (cmd_list[i].streamCommand == true)
 8001d1e:	495e      	ldr	r1, [pc, #376]	@ (8001e98 <parseCMD+0x2a8>)
 8001d20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	3310      	adds	r3, #16
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d024      	beq.n	8001d7e <parseCMD+0x18e>
            {
                uCShell.stream = true;
 8001d34:	4b55      	ldr	r3, [pc, #340]	@ (8001e8c <parseCMD+0x29c>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                stream_Handler_ptr = cmd_list[i].cmdHandler;
 8001d3c:	4956      	ldr	r1, [pc, #344]	@ (8001e98 <parseCMD+0x2a8>)
 8001d3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	3308      	adds	r3, #8
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a54      	ldr	r2, [pc, #336]	@ (8001ea0 <parseCMD+0x2b0>)
 8001d50:	6013      	str	r3, [r2, #0]
                stream_Handler_ptr(0, NULL);
 8001d52:	4b53      	ldr	r3, [pc, #332]	@ (8001ea0 <parseCMD+0x2b0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2100      	movs	r1, #0
 8001d58:	2000      	movs	r0, #0
 8001d5a:	4798      	blx	r3

                // check if the first token is a "?"

                if (token == NULL) // if result is NULL "endof string" then we are done
 8001d5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 80a4 	beq.w	8001eac <parseCMD+0x2bc>
                else
                {
                    // add the token to an array so we can send it to the handler
                    // remember these are all pointers
                    // to the original ucshellMsg
                    tokens_found[argumentCount] = token;
 8001d64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	3340      	adds	r3, #64	@ 0x40
 8001d6c:	443b      	add	r3, r7
 8001d6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001d70:	f843 2c38 	str.w	r2, [r3, #-56]
                    // increment argument counter so we can also tell the handler
                    // how many arguments to expect
                    argumentCount++;
 8001d74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d78:	3301      	adds	r3, #1
 8001d7a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                }
            }

            // check if this is a request for the help msg
            if (argumentCount && *tokens_found[0] == '?')
 8001d7e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d02a      	beq.n	8001ddc <parseCMD+0x1ec>
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d8c:	d126      	bne.n	8001ddc <parseCMD+0x1ec>
            {
                ptr_ucShell->print("\r\n[HELP: %s] %s\r\n", cmd_list[i].command, cmd_list[i].help);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
 8001d92:	4941      	ldr	r1, [pc, #260]	@ (8001e98 <parseCMD+0x2a8>)
 8001d94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d96:	4613      	mov	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	440b      	add	r3, r1
 8001da0:	6819      	ldr	r1, [r3, #0]
 8001da2:	483d      	ldr	r0, [pc, #244]	@ (8001e98 <parseCMD+0x2a8>)
 8001da4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001da6:	4613      	mov	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4403      	add	r3, r0
 8001db0:	330c      	adds	r3, #12
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	461a      	mov	r2, r3
 8001db6:	4839      	ldr	r0, [pc, #228]	@ (8001e9c <parseCMD+0x2ac>)
 8001db8:	47a0      	blx	r4
                _print_prompt();
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4832      	ldr	r0, [pc, #200]	@ (8001e90 <parseCMD+0x2a0>)
 8001dc6:	4798      	blx	r3
                ptr_ucShell->parsePending = false;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	731a      	strb	r2, [r3, #12]
                #if RETARGET_PRINTF == 1
                fflush(stdout);
 8001dce:	4b31      	ldr	r3, [pc, #196]	@ (8001e94 <parseCMD+0x2a4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f006 fad5 	bl	8008384 <fflush>
                #endif
                break;
 8001dda:	e068      	b.n	8001eae <parseCMD+0x2be>
            }

            // call the command handler for the specific command that was matched
            // pass the number of tokens found as well as a list of the tokens

            ptr_ucShell->print("\r\n");
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001de0:	4830      	ldr	r0, [pc, #192]	@ (8001ea4 <parseCMD+0x2b4>)
 8001de2:	4798      	blx	r3
            // check if command found is a stream command
            if (cmd_list[i].streamCommand == true)
 8001de4:	492c      	ldr	r1, [pc, #176]	@ (8001e98 <parseCMD+0x2a8>)
 8001de6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	3310      	adds	r3, #16
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d014      	beq.n	8001e24 <parseCMD+0x234>
            {
                uCShell.stream = true;
 8001dfa:	4b24      	ldr	r3, [pc, #144]	@ (8001e8c <parseCMD+0x29c>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                stream_Handler_ptr = cmd_list[i].cmdHandler;
 8001e02:	4925      	ldr	r1, [pc, #148]	@ (8001e98 <parseCMD+0x2a8>)
 8001e04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	440b      	add	r3, r1
 8001e10:	3308      	adds	r3, #8
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a22      	ldr	r2, [pc, #136]	@ (8001ea0 <parseCMD+0x2b0>)
 8001e16:	6013      	str	r3, [r2, #0]
                stream_Handler_ptr(0, NULL);
 8001e18:	4b21      	ldr	r3, [pc, #132]	@ (8001ea0 <parseCMD+0x2b0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	2000      	movs	r0, #0
 8001e20:	4798      	blx	r3
 8001e22:	e00e      	b.n	8001e42 <parseCMD+0x252>
            }
            else // all other commands
            {
                cmd_list[i].cmdHandler(argumentCount, tokens_found);
 8001e24:	491c      	ldr	r1, [pc, #112]	@ (8001e98 <parseCMD+0x2a8>)
 8001e26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e28:	4613      	mov	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	3308      	adds	r3, #8
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f107 0108 	add.w	r1, r7, #8
 8001e3a:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001e3e:	4610      	mov	r0, r2
 8001e40:	4798      	blx	r3
            }
            //clear ucshellMsg
            cleanUp(ptr_ucShell);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f85a 	bl	8001efc <cleanUp>
            _print_prompt();
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6812      	ldr	r2, [r2, #0]
 8001e50:	4611      	mov	r1, r2
 8001e52:	480f      	ldr	r0, [pc, #60]	@ (8001e90 <parseCMD+0x2a0>)
 8001e54:	4798      	blx	r3
            #if RETARGET_PRINTF == 1
            fflush(stdout);
 8001e56:	4b0f      	ldr	r3, [pc, #60]	@ (8001e94 <parseCMD+0x2a4>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f006 fa91 	bl	8008384 <fflush>
            #endif
        }
        // TODO: think of a cleaner way to handle this instead of this matchFound
        // flag
        if (matchFound == true)
 8001e62:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <parseCMD+0x282>
        {
            // break out of for loop, no need to cycle through rest of commands
            ptr_ucShell->parsePending = false;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	731a      	strb	r2, [r3, #12]
            break;
 8001e70:	e01d      	b.n	8001eae <parseCMD+0x2be>
    for (i = 0; i < CURRENT_NUM_OF_COMMANDS; i++)
 8001e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e74:	3301      	adds	r3, #1
 8001e76:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea8 <parseCMD+0x2b8>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e80:	4293      	cmp	r3, r2
 8001e82:	f6ff aedf 	blt.w	8001c44 <parseCMD+0x54>
 8001e86:	e012      	b.n	8001eae <parseCMD+0x2be>
 8001e88:	0800a430 	.word	0x0800a430
 8001e8c:	20000d58 	.word	0x20000d58
 8001e90:	0800a40c 	.word	0x0800a40c
 8001e94:	20000b2c 	.word	0x20000b2c
 8001e98:	20000c7c 	.word	0x20000c7c
 8001e9c:	0800a438 	.word	0x0800a438
 8001ea0:	20000d98 	.word	0x20000d98
 8001ea4:	0800a418 	.word	0x0800a418
 8001ea8:	20000d94 	.word	0x20000d94
                    break; // outof while loop
 8001eac:	bf00      	nop
        }

    } // end of cycling through commands looking for match

    if (matchFound == false)
 8001eae:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001eb2:	f083 0301 	eor.w	r3, r3, #1
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d011      	beq.n	8001ee0 <parseCMD+0x2f0>
    {
        ptr_ucShell->print("\r\n\"%s\" not found!\r\n", uCShell.ucshellMsg);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ec0:	490a      	ldr	r1, [pc, #40]	@ (8001eec <parseCMD+0x2fc>)
 8001ec2:	480b      	ldr	r0, [pc, #44]	@ (8001ef0 <parseCMD+0x300>)
 8001ec4:	4798      	blx	r3
        _print_prompt();
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6812      	ldr	r2, [r2, #0]
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4808      	ldr	r0, [pc, #32]	@ (8001ef4 <parseCMD+0x304>)
 8001ed2:	4798      	blx	r3
        #if RETARGET_PRINTF == 1
        fflush(stdout);
 8001ed4:	4b08      	ldr	r3, [pc, #32]	@ (8001ef8 <parseCMD+0x308>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f006 fa52 	bl	8008384 <fflush>
        #endif
    }

    cleanUp(ptr_ucShell);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f80b 	bl	8001efc <cleanUp>

    // return pointer to handler function
}
 8001ee6:	3744      	adds	r7, #68	@ 0x44
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd90      	pop	{r4, r7, pc}
 8001eec:	20000d58 	.word	0x20000d58
 8001ef0:	0800a44c 	.word	0x0800a44c
 8001ef4:	0800a40c 	.word	0x0800a40c
 8001ef8:	20000b2c 	.word	0x20000b2c

08001efc <cleanUp>:

static void cleanUp(uCShell_type *ptr_ucShell)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
    ptr_ucShell->parsePending = false;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	731a      	strb	r2, [r3, #12]
    // clear buffer  to receive new messages and not have old text in there
    for (int i = 0; i < MESSAGE_MAX; i++)
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	e007      	b.n	8001f20 <cleanUp+0x24>
        uCShell.ucshellMsg[i] = NULL;
 8001f10:	4a0a      	ldr	r2, [pc, #40]	@ (8001f3c <cleanUp+0x40>)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	4413      	add	r3, r2
 8001f16:	2200      	movs	r2, #0
 8001f18:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < MESSAGE_MAX; i++)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2b31      	cmp	r3, #49	@ 0x31
 8001f24:	ddf4      	ble.n	8001f10 <cleanUp+0x14>
    uCShell.msgPtr = 0;
 8001f26:	4b05      	ldr	r3, [pc, #20]	@ (8001f3c <cleanUp+0x40>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
}
 8001f2e:	bf00      	nop
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	20000d58 	.word	0x20000d58

08001f40 <uCShell_run>:
void uCShell_run(uCShell_type *ptr_ucShell)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
    if (uCShell.stream == true)
 8001f48:	4b0b      	ldr	r3, [pc, #44]	@ (8001f78 <uCShell_run+0x38>)
 8001f4a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d005      	beq.n	8001f5e <uCShell_run+0x1e>
    {
        // call stream function handler
        stream_Handler_ptr(0, NULL);
 8001f52:	4b0a      	ldr	r3, [pc, #40]	@ (8001f7c <uCShell_run+0x3c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2100      	movs	r1, #0
 8001f58:	2000      	movs	r0, #0
 8001f5a:	4798      	blx	r3
    }
    else if (ptr_ucShell->parsePending == true)
    {
        ptr_ucShell->parseCommand(ptr_ucShell);
    }
}
 8001f5c:	e007      	b.n	8001f6e <uCShell_run+0x2e>
    else if (ptr_ucShell->parsePending == true)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	7b1b      	ldrb	r3, [r3, #12]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <uCShell_run+0x2e>
        ptr_ucShell->parseCommand(ptr_ucShell);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	4798      	blx	r3
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000d58 	.word	0x20000d58
 8001f7c:	20000d98 	.word	0x20000d98

08001f80 <_internal_cmd_command_list_handler>:
static void _internal_cmd_command_list_handler(uint8_t num, char *values[])
{
 8001f80:	b590      	push	{r4, r7, lr}
 8001f82:	b087      	sub	sp, #28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	6039      	str	r1, [r7, #0]
 8001f8a:	71fb      	strb	r3, [r7, #7]
    // get length of the longest command: used to add padding dashes so that
    // output is aligned
    uint8_t len = 1;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < CURRENT_NUM_OF_COMMANDS; i++)
 8001f90:	2300      	movs	r3, #0
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	e01e      	b.n	8001fd4 <_internal_cmd_command_list_handler+0x54>
    {
        if (strlen(cmd_list[i].command) > len)
 8001f96:	4939      	ldr	r1, [pc, #228]	@ (800207c <_internal_cmd_command_list_handler+0xfc>)
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe f91c 	bl	80001e4 <strlen>
 8001fac:	4602      	mov	r2, r0
 8001fae:	7dfb      	ldrb	r3, [r7, #23]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d90c      	bls.n	8001fce <_internal_cmd_command_list_handler+0x4e>
            len = strlen(cmd_list[i].command);
 8001fb4:	4931      	ldr	r1, [pc, #196]	@ (800207c <_internal_cmd_command_list_handler+0xfc>)
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe f90d 	bl	80001e4 <strlen>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < CURRENT_NUM_OF_COMMANDS; i++)
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	4b2a      	ldr	r3, [pc, #168]	@ (8002080 <_internal_cmd_command_list_handler+0x100>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	dbda      	blt.n	8001f96 <_internal_cmd_command_list_handler+0x16>
    }
    // print all commands
    for (int i = 0; i < CURRENT_NUM_OF_COMMANDS; i++)
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	e03e      	b.n	8002064 <_internal_cmd_command_list_handler+0xe4>
    {
        // print just the command
#if USE_COLORS
        uCShell.print("\033[91m%s\033[97m", cmd_list[i].command);
 8001fe6:	4b27      	ldr	r3, [pc, #156]	@ (8002084 <_internal_cmd_command_list_handler+0x104>)
 8001fe8:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8001fea:	4924      	ldr	r1, [pc, #144]	@ (800207c <_internal_cmd_command_list_handler+0xfc>)
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4822      	ldr	r0, [pc, #136]	@ (8002088 <_internal_cmd_command_list_handler+0x108>)
 8001ffe:	47a0      	blx	r4
        fflush(stdout);
 8002000:	4b22      	ldr	r3, [pc, #136]	@ (800208c <_internal_cmd_command_list_handler+0x10c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	4618      	mov	r0, r3
 8002008:	f006 f9bc 	bl	8008384 <fflush>
#else
        uCShell.print("[%s]", cmd_list[i].command);
#endif
        // add padding dashes if the len of this command is shorter than len
        for (int j = 0; j < (len - strlen(cmd_list[i].command)); j++)
 800200c:	2300      	movs	r3, #0
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	e006      	b.n	8002020 <_internal_cmd_command_list_handler+0xa0>
            uCShell.print(" ");
 8002012:	4b1c      	ldr	r3, [pc, #112]	@ (8002084 <_internal_cmd_command_list_handler+0x104>)
 8002014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002016:	481e      	ldr	r0, [pc, #120]	@ (8002090 <_internal_cmd_command_list_handler+0x110>)
 8002018:	4798      	blx	r3
        for (int j = 0; j < (len - strlen(cmd_list[i].command)); j++)
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	3301      	adds	r3, #1
 800201e:	60bb      	str	r3, [r7, #8]
 8002020:	7dfc      	ldrb	r4, [r7, #23]
 8002022:	4916      	ldr	r1, [pc, #88]	@ (800207c <_internal_cmd_command_list_handler+0xfc>)
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	4613      	mov	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	440b      	add	r3, r1
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe f8d6 	bl	80001e4 <strlen>
 8002038:	4603      	mov	r3, r0
 800203a:	1ae2      	subs	r2, r4, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	429a      	cmp	r2, r3
 8002040:	d8e7      	bhi.n	8002012 <_internal_cmd_command_list_handler+0x92>
        // print the help message
        uCShell.print(" | %s\r\n", cmd_list[i].help);
 8002042:	4b10      	ldr	r3, [pc, #64]	@ (8002084 <_internal_cmd_command_list_handler+0x104>)
 8002044:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8002046:	490d      	ldr	r1, [pc, #52]	@ (800207c <_internal_cmd_command_list_handler+0xfc>)
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	440b      	add	r3, r1
 8002054:	330c      	adds	r3, #12
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4619      	mov	r1, r3
 800205a:	480e      	ldr	r0, [pc, #56]	@ (8002094 <_internal_cmd_command_list_handler+0x114>)
 800205c:	47a0      	blx	r4
    for (int i = 0; i < CURRENT_NUM_OF_COMMANDS; i++)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	3301      	adds	r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <_internal_cmd_command_list_handler+0x100>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4293      	cmp	r3, r2
 800206e:	dbba      	blt.n	8001fe6 <_internal_cmd_command_list_handler+0x66>
    }
}
 8002070:	bf00      	nop
 8002072:	bf00      	nop
 8002074:	371c      	adds	r7, #28
 8002076:	46bd      	mov	sp, r7
 8002078:	bd90      	pop	{r4, r7, pc}
 800207a:	bf00      	nop
 800207c:	20000c7c 	.word	0x20000c7c
 8002080:	20000d94 	.word	0x20000d94
 8002084:	20000d58 	.word	0x20000d58
 8002088:	0800a460 	.word	0x0800a460
 800208c:	20000b2c 	.word	0x20000b2c
 8002090:	0800a470 	.word	0x0800a470
 8002094:	0800a474 	.word	0x0800a474

08002098 <printBanner>:
{
    return uCShell.stream;
}

void printBanner(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
    char *banner = "--------------------------\r\nSTM32 Hands-On Exercices\r\n--------------------------\r\n\r\n";
 800209e:	4b05      	ldr	r3, [pc, #20]	@ (80020b4 <printBanner+0x1c>)
 80020a0:	607b      	str	r3, [r7, #4]
    uCShell.print("\r\n%s", banner);
 80020a2:	4b05      	ldr	r3, [pc, #20]	@ (80020b8 <printBanner+0x20>)
 80020a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4804      	ldr	r0, [pc, #16]	@ (80020bc <printBanner+0x24>)
 80020aa:	4798      	blx	r3
   
}
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	0800a47c 	.word	0x0800a47c
 80020b8:	20000d58 	.word	0x20000d58
 80020bc:	0800a4d4 	.word	0x0800a4d4

080020c0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020c4:	4b14      	ldr	r3, [pc, #80]	@ (8002118 <MX_USART2_UART_Init+0x58>)
 80020c6:	4a15      	ldr	r2, [pc, #84]	@ (800211c <MX_USART2_UART_Init+0x5c>)
 80020c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020ca:	4b13      	ldr	r3, [pc, #76]	@ (8002118 <MX_USART2_UART_Init+0x58>)
 80020cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020d2:	4b11      	ldr	r3, [pc, #68]	@ (8002118 <MX_USART2_UART_Init+0x58>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002118 <MX_USART2_UART_Init+0x58>)
 80020da:	2200      	movs	r2, #0
 80020dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020de:	4b0e      	ldr	r3, [pc, #56]	@ (8002118 <MX_USART2_UART_Init+0x58>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002118 <MX_USART2_UART_Init+0x58>)
 80020e6:	220c      	movs	r2, #12
 80020e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002118 <MX_USART2_UART_Init+0x58>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020f0:	4b09      	ldr	r3, [pc, #36]	@ (8002118 <MX_USART2_UART_Init+0x58>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020f6:	4b08      	ldr	r3, [pc, #32]	@ (8002118 <MX_USART2_UART_Init+0x58>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020fc:	4b06      	ldr	r3, [pc, #24]	@ (8002118 <MX_USART2_UART_Init+0x58>)
 80020fe:	2200      	movs	r2, #0
 8002100:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002102:	4805      	ldr	r0, [pc, #20]	@ (8002118 <MX_USART2_UART_Init+0x58>)
 8002104:	f003 ff14 	bl	8005f30 <HAL_UART_Init>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800210e:	f7ff f9aa 	bl	8001466 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000d9c 	.word	0x20000d9c
 800211c:	40004400 	.word	0x40004400

08002120 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b0ac      	sub	sp, #176	@ 0xb0
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002128:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	2288      	movs	r2, #136	@ 0x88
 800213e:	2100      	movs	r1, #0
 8002140:	4618      	mov	r0, r3
 8002142:	f006 fb4d 	bl	80087e0 <memset>
  if(uartHandle->Instance==USART2)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a3a      	ldr	r2, [pc, #232]	@ (8002234 <HAL_UART_MspInit+0x114>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d16c      	bne.n	800222a <HAL_UART_MspInit+0x10a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002150:	2302      	movs	r3, #2
 8002152:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002154:	2300      	movs	r3, #0
 8002156:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002158:	f107 0314 	add.w	r3, r7, #20
 800215c:	4618      	mov	r0, r3
 800215e:	f002 fee5 	bl	8004f2c <HAL_RCCEx_PeriphCLKConfig>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002168:	f7ff f97d 	bl	8001466 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800216c:	4b32      	ldr	r3, [pc, #200]	@ (8002238 <HAL_UART_MspInit+0x118>)
 800216e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002170:	4a31      	ldr	r2, [pc, #196]	@ (8002238 <HAL_UART_MspInit+0x118>)
 8002172:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002176:	6593      	str	r3, [r2, #88]	@ 0x58
 8002178:	4b2f      	ldr	r3, [pc, #188]	@ (8002238 <HAL_UART_MspInit+0x118>)
 800217a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800217c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002184:	4b2c      	ldr	r3, [pc, #176]	@ (8002238 <HAL_UART_MspInit+0x118>)
 8002186:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002188:	4a2b      	ldr	r2, [pc, #172]	@ (8002238 <HAL_UART_MspInit+0x118>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002190:	4b29      	ldr	r3, [pc, #164]	@ (8002238 <HAL_UART_MspInit+0x118>)
 8002192:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800219c:	230c      	movs	r3, #12
 800219e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a2:	2302      	movs	r3, #2
 80021a4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ae:	2303      	movs	r3, #3
 80021b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021b4:	2307      	movs	r3, #7
 80021b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ba:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80021be:	4619      	mov	r1, r3
 80021c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021c4:	f001 fa28 	bl	8003618 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80021c8:	4b1c      	ldr	r3, [pc, #112]	@ (800223c <HAL_UART_MspInit+0x11c>)
 80021ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002240 <HAL_UART_MspInit+0x120>)
 80021cc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80021ce:	4b1b      	ldr	r3, [pc, #108]	@ (800223c <HAL_UART_MspInit+0x11c>)
 80021d0:	2202      	movs	r2, #2
 80021d2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021d4:	4b19      	ldr	r3, [pc, #100]	@ (800223c <HAL_UART_MspInit+0x11c>)
 80021d6:	2210      	movs	r2, #16
 80021d8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021da:	4b18      	ldr	r3, [pc, #96]	@ (800223c <HAL_UART_MspInit+0x11c>)
 80021dc:	2200      	movs	r2, #0
 80021de:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021e0:	4b16      	ldr	r3, [pc, #88]	@ (800223c <HAL_UART_MspInit+0x11c>)
 80021e2:	2280      	movs	r2, #128	@ 0x80
 80021e4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021e6:	4b15      	ldr	r3, [pc, #84]	@ (800223c <HAL_UART_MspInit+0x11c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021ec:	4b13      	ldr	r3, [pc, #76]	@ (800223c <HAL_UART_MspInit+0x11c>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80021f2:	4b12      	ldr	r3, [pc, #72]	@ (800223c <HAL_UART_MspInit+0x11c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021f8:	4b10      	ldr	r3, [pc, #64]	@ (800223c <HAL_UART_MspInit+0x11c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80021fe:	480f      	ldr	r0, [pc, #60]	@ (800223c <HAL_UART_MspInit+0x11c>)
 8002200:	f000 ff94 	bl	800312c <HAL_DMA_Init>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 800220a:	f7ff f92c 	bl	8001466 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a0a      	ldr	r2, [pc, #40]	@ (800223c <HAL_UART_MspInit+0x11c>)
 8002212:	671a      	str	r2, [r3, #112]	@ 0x70
 8002214:	4a09      	ldr	r2, [pc, #36]	@ (800223c <HAL_UART_MspInit+0x11c>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800221a:	2200      	movs	r2, #0
 800221c:	2100      	movs	r1, #0
 800221e:	2026      	movs	r0, #38	@ 0x26
 8002220:	f000 fc8f 	bl	8002b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002224:	2026      	movs	r0, #38	@ 0x26
 8002226:	f000 fca8 	bl	8002b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800222a:	bf00      	nop
 800222c:	37b0      	adds	r7, #176	@ 0xb0
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40004400 	.word	0x40004400
 8002238:	40021000 	.word	0x40021000
 800223c:	20000e24 	.word	0x20000e24
 8002240:	40020080 	.word	0x40020080

08002244 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	2b00      	cmp	r3, #0
 8002254:	db0c      	blt.n	8002270 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	f003 021f 	and.w	r2, r3, #31
 800225c:	4907      	ldr	r1, [pc, #28]	@ (800227c <__NVIC_ClearPendingIRQ+0x38>)
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	095b      	lsrs	r3, r3, #5
 8002264:	2001      	movs	r0, #1
 8002266:	fa00 f202 	lsl.w	r2, r0, r2
 800226a:	3360      	adds	r3, #96	@ 0x60
 800226c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	e000e100 	.word	0xe000e100

08002280 <enableDWT>:
uint32_t end_dma;
uint32_t start;
uint32_t end;
#define DWT_CONTROL_CYCCNTENA_BIT (1UL << 0)

void enableDWT(void) {
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
    // Enable the use of DWT
    if (!(DWT_CONTROL & DWT_CONTROL_CYCCNTENA_BIT)) {
 8002284:	4b08      	ldr	r3, [pc, #32]	@ (80022a8 <enableDWT+0x28>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	d105      	bne.n	800229c <enableDWT+0x1c>
        DWT_CONTROL |= DWT_CONTROL_CYCCNTENA_BIT; // Enable cycle counter
 8002290:	4b05      	ldr	r3, [pc, #20]	@ (80022a8 <enableDWT+0x28>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a04      	ldr	r2, [pc, #16]	@ (80022a8 <enableDWT+0x28>)
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	6013      	str	r3, [r2, #0]
    }
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	e0001000 	.word	0xe0001000
 80022ac:	00000000 	.word	0x00000000

080022b0 <fillSinWave>:
#define DAC_MAX_VALUE 4095 // digital to analog converter max value
#define TWO_PI  (2 * M_PI)

uint16_t sineWave[WAVE_SIZE]; // Changed to uint16_t to accommodate larger values

void fillSinWave(void){
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
    for(int i = 0; i < WAVE_SIZE; i++){
 80022b6:	2300      	movs	r3, #0
 80022b8:	607b      	str	r3, [r7, #4]
 80022ba:	e039      	b.n	8002330 <fillSinWave+0x80>
        sineWave[i] = (uint16_t)((DAC_MAX_VALUE / 2) * (1 + sin(TWO_PI * i / WAVE_SIZE)));
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7fe f941 	bl	8000544 <__aeabi_i2d>
 80022c2:	a326      	add	r3, pc, #152	@ (adr r3, 800235c <fillSinWave+0xac>)
 80022c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c8:	f7fe f9a6 	bl	8000618 <__aeabi_dmul>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4610      	mov	r0, r2
 80022d2:	4619      	mov	r1, r3
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002350 <fillSinWave+0xa0>)
 80022da:	f7fe fac7 	bl	800086c <__aeabi_ddiv>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	ec43 2b17 	vmov	d7, r2, r3
 80022e6:	eeb0 0a47 	vmov.f32	s0, s14
 80022ea:	eef0 0a67 	vmov.f32	s1, s15
 80022ee:	f007 f82f 	bl	8009350 <sin>
 80022f2:	ec51 0b10 	vmov	r0, r1, d0
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	4b16      	ldr	r3, [pc, #88]	@ (8002354 <fillSinWave+0xa4>)
 80022fc:	f7fd ffd6 	bl	80002ac <__adddf3>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	4610      	mov	r0, r2
 8002306:	4619      	mov	r1, r3
 8002308:	a30f      	add	r3, pc, #60	@ (adr r3, 8002348 <fillSinWave+0x98>)
 800230a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230e:	f7fe f983 	bl	8000618 <__aeabi_dmul>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4610      	mov	r0, r2
 8002318:	4619      	mov	r1, r3
 800231a:	f7fe fc3f 	bl	8000b9c <__aeabi_d2uiz>
 800231e:	4603      	mov	r3, r0
 8002320:	b299      	uxth	r1, r3
 8002322:	4a0d      	ldr	r2, [pc, #52]	@ (8002358 <fillSinWave+0xa8>)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(int i = 0; i < WAVE_SIZE; i++){
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3301      	adds	r3, #1
 800232e:	607b      	str	r3, [r7, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002336:	dbc1      	blt.n	80022bc <fillSinWave+0xc>
    }
}
 8002338:	bf00      	nop
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	f3af 8000 	nop.w
 8002348:	00000000 	.word	0x00000000
 800234c:	409ffc00 	.word	0x409ffc00
 8002350:	40900000 	.word	0x40900000
 8002354:	3ff00000 	.word	0x3ff00000
 8002358:	20000ed4 	.word	0x20000ed4
 800235c:	54442d18 	.word	0x54442d18
 8002360:	401921fb 	.word	0x401921fb

08002364 <cmd_ok_handler>:
//----------------------------------------------------------------
void cmd_ok_handler(uint8_t num, char *values[])
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	6039      	str	r1, [r7, #0]
 800236e:	71fb      	strb	r3, [r7, #7]
    printf("System ok!\r\n");
 8002370:	4803      	ldr	r0, [pc, #12]	@ (8002380 <cmd_ok_handler+0x1c>)
 8002372:	f006 f945 	bl	8008600 <puts>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	0800a4dc 	.word	0x0800a4dc

08002384 <wakeFromSleep>:
//---------------------------------------------------------------- 
void wakeFromSleep(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
    // have to reinit things after waking up from Stop modes 
    // because upon wake up the clock is HSI
    HAL_RCC_DeInit(); // reset RCC to known state
 8002388:	f001 ff2e 	bl	80041e8 <HAL_RCC_DeInit>
    SystemClock_Config(); // reconfig RCC
 800238c:	f7ff f818 	bl	80013c0 <SystemClock_Config>
    MX_GPIO_Init(); //reinit GPIO
 8002390:	f7fe ff38 	bl	8001204 <MX_GPIO_Init>
    MX_USART2_UART_Init(); // reinit UART
 8002394:	f7ff fe94 	bl	80020c0 <MX_USART2_UART_Init>
    HAL_ResumeTick();
 8002398:	f000 fae8 	bl	800296c <HAL_ResumeTick>
    HAL_LPTIM_TimeOut_Stop_IT(&hlptim1);
 800239c:	4803      	ldr	r0, [pc, #12]	@ (80023ac <wakeFromSleep+0x28>)
 800239e:	f001 fc05 	bl	8003bac <HAL_LPTIM_TimeOut_Stop_IT>
    printf(" Woke up from sleep\r\n");
 80023a2:	4803      	ldr	r0, [pc, #12]	@ (80023b0 <wakeFromSleep+0x2c>)
 80023a4:	f006 f92c 	bl	8008600 <puts>
}
 80023a8:	bf00      	nop
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	20000bf4 	.word	0x20000bf4
 80023b0:	0800a4e8 	.word	0x0800a4e8

080023b4 <cmd_SleepStop_1>:
//----------------------------------------------------------------
void cmd_SleepStop_1(uint8_t num, char *values[]){
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	6039      	str	r1, [r7, #0]
 80023be:	71fb      	strb	r3, [r7, #7]
    uint32_t mode = (uint32_t)atoi(values[0]);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f005 fea8 	bl	800811a <atoi>
 80023ca:	4603      	mov	r3, r0
 80023cc:	60fb      	str	r3, [r7, #12]
    uint32_t sleep = (uint32_t)atoi(values[1]);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	3304      	adds	r3, #4
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f005 fea0 	bl	800811a <atoi>
 80023da:	4603      	mov	r3, r0
 80023dc:	60bb      	str	r3, [r7, #8]
    printf("Sleeping for %d seconds\r\n", sleep);
 80023de:	68b9      	ldr	r1, [r7, #8]
 80023e0:	4811      	ldr	r0, [pc, #68]	@ (8002428 <cmd_SleepStop_1+0x74>)
 80023e2:	f006 f8a5 	bl	8008530 <iprintf>
    // go to sleep mode
    HAL_SuspendTick();
 80023e6:	f000 fab1 	bl	800294c <HAL_SuspendTick>
    NVIC_ClearPendingIRQ(SysTick_IRQn); //just to be safe
 80023ea:	f04f 30ff 	mov.w	r0, #4294967295
 80023ee:	f7ff ff29 	bl	8002244 <__NVIC_ClearPendingIRQ>
        HAL_LPTIM_TimeOut_Start_IT(&hlptim1, 65535, sleep * 8000);
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80023f8:	fb02 f303 	mul.w	r3, r2, r3
 80023fc:	461a      	mov	r2, r3
 80023fe:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002402:	480a      	ldr	r0, [pc, #40]	@ (800242c <cmd_SleepStop_1+0x78>)
 8002404:	f001 fb54 	bl	8003ab0 <HAL_LPTIM_TimeOut_Start_IT>
    if(mode == 1)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d103      	bne.n	8002416 <cmd_SleepStop_1+0x62>
        HAL_PWREx_EnterSTOP1Mode(PWR_STOPENTRY_WFI);
 800240e:	2001      	movs	r0, #1
 8002410:	f001 fe92 	bl	8004138 <HAL_PWREx_EnterSTOP1Mode>
 8002414:	e002      	b.n	800241c <cmd_SleepStop_1+0x68>
    else
    HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8002416:	2001      	movs	r0, #1
 8002418:	f001 feba 	bl	8004190 <HAL_PWREx_EnterSTOP2Mode>
    wakeFromSleep();
 800241c:	f7ff ffb2 	bl	8002384 <wakeFromSleep>
} 
 8002420:	bf00      	nop
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	0800a500 	.word	0x0800a500
 800242c:	20000bf4 	.word	0x20000bf4

08002430 <lp_handler>:
void rtc_handler(void){
    // RTC interrupt handler
    printf("!!! RTC : Interrupt !!!\r\n");
}
//----------------------------------------------------------------
void lp_handler(void){
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
    // RTC interrupt handler
    printf("!!! LP : Interrupt !!!\r\n");
 8002434:	4802      	ldr	r0, [pc, #8]	@ (8002440 <lp_handler+0x10>)
 8002436:	f006 f8e3 	bl	8008600 <puts>
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	0800a538 	.word	0x0800a538

08002444 <cmd_startRTC>:
//----------------------------------------------------------------
void cmd_startRTC(uint8_t num, char *values[]){
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	6039      	str	r1, [r7, #0]
 800244e:	71fb      	strb	r3, [r7, #7]
    // TODO: set an RTC alarm for n seconds
    uint32_t sleep = atoi(values[0]);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f005 fe60 	bl	800811a <atoi>
 800245a:	4603      	mov	r3, r0
 800245c:	60fb      	str	r3, [r7, #12]
    printf("Alarm set for %d seconds\r\n", sleep);
 800245e:	68f9      	ldr	r1, [r7, #12]
 8002460:	4803      	ldr	r0, [pc, #12]	@ (8002470 <cmd_startRTC+0x2c>)
 8002462:	f006 f865 	bl	8008530 <iprintf>
}
 8002466:	bf00      	nop
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	0800a550 	.word	0x0800a550

08002474 <_write>:
//----------------------------------------------------------------
int _write(int file, char *ptr, int len){
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
    //
    for(int i = 0 ; i < len ; i++){
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	e00b      	b.n	800249e <_write+0x2a>
        #if USE_LL_DRIVER == 1
        LL_USART_TransmitData8(USART2, ptr[i]);
        while(!LL_USART_IsActiveFlag_TXE(USART2));
        #else
        HAL_UART_Transmit(&huart2, (uint8_t*)&ptr[i], 1, 0xFFFF);
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	18d1      	adds	r1, r2, r3
 800248c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002490:	2201      	movs	r2, #1
 8002492:	4807      	ldr	r0, [pc, #28]	@ (80024b0 <_write+0x3c>)
 8002494:	f003 fd9a 	bl	8005fcc <HAL_UART_Transmit>
    for(int i = 0 ; i < len ; i++){
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	3301      	adds	r3, #1
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	dbef      	blt.n	8002486 <_write+0x12>
        #endif
    }
    return len;
 80024a6:	687b      	ldr	r3, [r7, #4]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20000d9c 	.word	0x20000d9c

080024b4 <cmd_moveData>:
//----------------------------------------------------------------
void cmd_moveData(uint8_t num, char *values[]){
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	6039      	str	r1, [r7, #0]
 80024be:	71fb      	strb	r3, [r7, #7]
    // output sine wave to UART via DMA
    DMA_TX_complete = false;
 80024c0:	4b06      	ldr	r3, [pc, #24]	@ (80024dc <cmd_moveData+0x28>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	701a      	strb	r2, [r3, #0]
    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)sineWave);
    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, WAVE_SIZE);
    LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
    LL_USART_EnableDMAReq_TX(USART2);
    #else
    HAL_UART_Transmit_DMA(&huart2, (uint8_t*)sineWave, WAVE_SIZE);
 80024c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024ca:	4905      	ldr	r1, [pc, #20]	@ (80024e0 <cmd_moveData+0x2c>)
 80024cc:	4805      	ldr	r0, [pc, #20]	@ (80024e4 <cmd_moveData+0x30>)
 80024ce:	f003 fe53 	bl	8006178 <HAL_UART_Transmit_DMA>
    #endif
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000005 	.word	0x20000005
 80024e0:	20000ed4 	.word	0x20000ed4
 80024e4:	20000d9c 	.word	0x20000d9c

080024e8 <cmd_printParagraph>:
//----------------------------------------------------------------
void cmd_printParagraph(uint8_t num, char *values[]){
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	6039      	str	r1, [r7, #0]
 80024f2:	71fb      	strb	r3, [r7, #7]
    // start the dwt in the core

    start = DWT->CYCCNT;
 80024f4:	4b07      	ldr	r3, [pc, #28]	@ (8002514 <cmd_printParagraph+0x2c>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	4a07      	ldr	r2, [pc, #28]	@ (8002518 <cmd_printParagraph+0x30>)
 80024fa:	6013      	str	r3, [r2, #0]
    printf("%s", paragraph);
 80024fc:	4907      	ldr	r1, [pc, #28]	@ (800251c <cmd_printParagraph+0x34>)
 80024fe:	4808      	ldr	r0, [pc, #32]	@ (8002520 <cmd_printParagraph+0x38>)
 8002500:	f006 f816 	bl	8008530 <iprintf>
    end = DWT->CYCCNT;
 8002504:	4b03      	ldr	r3, [pc, #12]	@ (8002514 <cmd_printParagraph+0x2c>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	4a06      	ldr	r2, [pc, #24]	@ (8002524 <cmd_printParagraph+0x3c>)
 800250a:	6013      	str	r3, [r2, #0]
    
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	e0001000 	.word	0xe0001000
 8002518:	20000ecc 	.word	0x20000ecc
 800251c:	20000008 	.word	0x20000008
 8002520:	0800a56c 	.word	0x0800a56c
 8002524:	20000ed0 	.word	0x20000ed0

08002528 <cmd_printParagraphDMA>:
//----------------------------------------------------------------
void cmd_printParagraphDMA(uint8_t num, char *values[]){
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	6039      	str	r1, [r7, #0]
 8002532:	71fb      	strb	r3, [r7, #7]
    // get dwt time stamp to measure time
    
    // output sine wave to UART via DMA
    DMA_TX_complete = false;
 8002534:	4b08      	ldr	r3, [pc, #32]	@ (8002558 <cmd_printParagraphDMA+0x30>)
 8002536:	2200      	movs	r2, #0
 8002538:	701a      	strb	r2, [r3, #0]
    start_dma = DWT->CYCCNT;
 800253a:	4b08      	ldr	r3, [pc, #32]	@ (800255c <cmd_printParagraphDMA+0x34>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	4a08      	ldr	r2, [pc, #32]	@ (8002560 <cmd_printParagraphDMA+0x38>)
 8002540:	6013      	str	r3, [r2, #0]
    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)paragraph);
    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, sizeof(paragraph));
    LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
    LL_USART_EnableDMAReq_TX(USART2);
    #else
    HAL_UART_Transmit_DMA(&huart2, (uint8_t*)paragraph, sizeof(paragraph));
 8002542:	f44f 6231 	mov.w	r2, #2832	@ 0xb10
 8002546:	4907      	ldr	r1, [pc, #28]	@ (8002564 <cmd_printParagraphDMA+0x3c>)
 8002548:	4807      	ldr	r0, [pc, #28]	@ (8002568 <cmd_printParagraphDMA+0x40>)
 800254a:	f003 fe15 	bl	8006178 <HAL_UART_Transmit_DMA>
    #endif
    // get dwt time stamp to measure time
    
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000005 	.word	0x20000005
 800255c:	e0001000 	.word	0xe0001000
 8002560:	20000ec4 	.word	0x20000ec4
 8002564:	20000008 	.word	0x20000008
 8002568:	20000d9c 	.word	0x20000d9c

0800256c <cmd_timeToPrint>:
//----------------------------------------------------------------
void cmd_timeToPrint(uint8_t num, char *values[]){
 800256c:	b580      	push	{r7, lr}
 800256e:	b088      	sub	sp, #32
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	6039      	str	r1, [r7, #0]
 8002576:	71fb      	strb	r3, [r7, #7]
    uint32_t difference = end - start;
 8002578:	4b2d      	ldr	r3, [pc, #180]	@ (8002630 <cmd_timeToPrint+0xc4>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b2d      	ldr	r3, [pc, #180]	@ (8002634 <cmd_timeToPrint+0xc8>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	61fb      	str	r3, [r7, #28]
    uint32_t timeInMsInt = (difference * 1000) / 80000000; // Integer part
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800258a:	fb02 f303 	mul.w	r3, r2, r3
 800258e:	4a2a      	ldr	r2, [pc, #168]	@ (8002638 <cmd_timeToPrint+0xcc>)
 8002590:	fba2 2303 	umull	r2, r3, r2, r3
 8002594:	0e5b      	lsrs	r3, r3, #25
 8002596:	61bb      	str	r3, [r7, #24]
    uint32_t timeInMsFrac = ((difference * 1000) % 80000000) * 1000 / 80000000; // Fractional part, scaled to 3 decimal places
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800259e:	fb03 f202 	mul.w	r2, r3, r2
 80025a2:	4b25      	ldr	r3, [pc, #148]	@ (8002638 <cmd_timeToPrint+0xcc>)
 80025a4:	fba3 1302 	umull	r1, r3, r3, r2
 80025a8:	0e5b      	lsrs	r3, r3, #25
 80025aa:	4924      	ldr	r1, [pc, #144]	@ (800263c <cmd_timeToPrint+0xd0>)
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80025b6:	fb02 f303 	mul.w	r3, r2, r3
 80025ba:	4a1f      	ldr	r2, [pc, #124]	@ (8002638 <cmd_timeToPrint+0xcc>)
 80025bc:	fba2 2303 	umull	r2, r3, r2, r3
 80025c0:	0e5b      	lsrs	r3, r3, #25
 80025c2:	617b      	str	r3, [r7, #20]

    uint32_t difference_dma = end_dma - start_dma;
 80025c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002640 <cmd_timeToPrint+0xd4>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002644 <cmd_timeToPrint+0xd8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	613b      	str	r3, [r7, #16]
    uint32_t timeInMsInt_dma = (difference_dma * 1000) / 80000000; // Integer part
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80025d6:	fb02 f303 	mul.w	r3, r2, r3
 80025da:	4a17      	ldr	r2, [pc, #92]	@ (8002638 <cmd_timeToPrint+0xcc>)
 80025dc:	fba2 2303 	umull	r2, r3, r2, r3
 80025e0:	0e5b      	lsrs	r3, r3, #25
 80025e2:	60fb      	str	r3, [r7, #12]
    uint32_t timeInMsFrac_dma = ((difference_dma * 1000) % 80000000) * 1000 / 80000000; // Fractional part, scaled to 3 decimal places
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80025ea:	fb03 f202 	mul.w	r2, r3, r2
 80025ee:	4b12      	ldr	r3, [pc, #72]	@ (8002638 <cmd_timeToPrint+0xcc>)
 80025f0:	fba3 1302 	umull	r1, r3, r3, r2
 80025f4:	0e5b      	lsrs	r3, r3, #25
 80025f6:	4911      	ldr	r1, [pc, #68]	@ (800263c <cmd_timeToPrint+0xd0>)
 80025f8:	fb01 f303 	mul.w	r3, r1, r3
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002602:	fb02 f303 	mul.w	r3, r2, r3
 8002606:	4a0c      	ldr	r2, [pc, #48]	@ (8002638 <cmd_timeToPrint+0xcc>)
 8002608:	fba2 2303 	umull	r2, r3, r2, r3
 800260c:	0e5b      	lsrs	r3, r3, #25
 800260e:	60bb      	str	r3, [r7, #8]

    printf("Time to print paragraph slow: %u cycles, %u.%03u ms\r\n", difference, timeInMsInt, timeInMsFrac);
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	69f9      	ldr	r1, [r7, #28]
 8002616:	480c      	ldr	r0, [pc, #48]	@ (8002648 <cmd_timeToPrint+0xdc>)
 8002618:	f005 ff8a 	bl	8008530 <iprintf>
    printf("Time to print paragraph fast: %u cycles, %u.%03u ms\r\n", difference_dma, timeInMsInt_dma, timeInMsFrac_dma);
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	6939      	ldr	r1, [r7, #16]
 8002622:	480a      	ldr	r0, [pc, #40]	@ (800264c <cmd_timeToPrint+0xe0>)
 8002624:	f005 ff84 	bl	8008530 <iprintf>

}
 8002628:	bf00      	nop
 800262a:	3720      	adds	r7, #32
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20000ed0 	.word	0x20000ed0
 8002634:	20000ecc 	.word	0x20000ecc
 8002638:	6b5fca6b 	.word	0x6b5fca6b
 800263c:	04c4b400 	.word	0x04c4b400
 8002640:	20000ec8 	.word	0x20000ec8
 8002644:	20000ec4 	.word	0x20000ec4
 8002648:	0800a570 	.word	0x0800a570
 800264c:	0800a5a8 	.word	0x0800a5a8

08002650 <cmd_sinWaveStart>:
//----------------------------------------------------------------
void cmd_sinWaveStart(uint8_t num, char *values[]){
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af02      	add	r7, sp, #8
 8002656:	4603      	mov	r3, r0
 8002658:	6039      	str	r1, [r7, #0]
 800265a:	71fb      	strb	r3, [r7, #7]
    // output sine wave to DAC (configured to be circular)
    // start dac
    static uint32_t val = 0;
    //start tim 2
    HAL_TIM_Base_Start(&htim2);
 800265c:	4807      	ldr	r0, [pc, #28]	@ (800267c <cmd_sinWaveStart+0x2c>)
 800265e:	f003 f979 	bl	8005954 <HAL_TIM_Base_Start>
    //     HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sineWave[i]);
    //     HAL_Delay(1);
    // }
    // HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
    // use DMA
    HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)sineWave, WAVE_SIZE, DAC_ALIGN_12B_R);
 8002662:	2300      	movs	r3, #0
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800266a:	4a05      	ldr	r2, [pc, #20]	@ (8002680 <cmd_sinWaveStart+0x30>)
 800266c:	2100      	movs	r1, #0
 800266e:	4805      	ldr	r0, [pc, #20]	@ (8002684 <cmd_sinWaveStart+0x34>)
 8002670:	f000 fac0 	bl	8002bf4 <HAL_DAC_Start_DMA>
    
  
    


}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	20000c30 	.word	0x20000c30
 8002680:	20000ed4 	.word	0x20000ed4
 8002684:	20000b98 	.word	0x20000b98

08002688 <user_main>:
//----------------------------------------------------------------
void user_main(void){
 8002688:	b590      	push	{r4, r7, lr}
 800268a:	b083      	sub	sp, #12
 800268c:	af02      	add	r7, sp, #8
    //compute sine wave
    fillSinWave();
 800268e:	f7ff fe0f 	bl	80022b0 <fillSinWave>
    enableDWT();
 8002692:	f7ff fdf5 	bl	8002280 <enableDWT>
    CL_cli_init(&cli, "uCShell:>", printf);
 8002696:	4a2b      	ldr	r2, [pc, #172]	@ (8002744 <user_main+0xbc>)
 8002698:	492b      	ldr	r1, [pc, #172]	@ (8002748 <user_main+0xc0>)
 800269a:	482c      	ldr	r0, [pc, #176]	@ (800274c <user_main+0xc4>)
 800269c:	f7ff f92c 	bl	80018f8 <CL_cli_init>
    #if USE_LL_DRIVER == 1
    LL_USART_EnableIT_RXNE(USART2); 
    #else
    //kick off RX and enable interrupt
    HAL_UART_Receive_IT(&huart2, &cli.charReceived, 1);
 80026a0:	2201      	movs	r2, #1
 80026a2:	492b      	ldr	r1, [pc, #172]	@ (8002750 <user_main+0xc8>)
 80026a4:	482b      	ldr	r0, [pc, #172]	@ (8002754 <user_main+0xcc>)
 80026a6:	f003 fd1b 	bl	80060e0 <HAL_UART_Receive_IT>
    #endif
    cli.registerCommand("ok", ' ', cmd_ok_handler, "Prints \"ok\" if cli is ok", false);
 80026aa:	4b28      	ldr	r3, [pc, #160]	@ (800274c <user_main+0xc4>)
 80026ac:	689c      	ldr	r4, [r3, #8]
 80026ae:	2300      	movs	r3, #0
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	4b29      	ldr	r3, [pc, #164]	@ (8002758 <user_main+0xd0>)
 80026b4:	4a29      	ldr	r2, [pc, #164]	@ (800275c <user_main+0xd4>)
 80026b6:	2120      	movs	r1, #32
 80026b8:	4829      	ldr	r0, [pc, #164]	@ (8002760 <user_main+0xd8>)
 80026ba:	47a0      	blx	r4
    cli.registerCommand("sleep", ' ', cmd_SleepStop_1, "(sleep m n)Enter sleep mode m for n amount of seconds", false);
 80026bc:	4b23      	ldr	r3, [pc, #140]	@ (800274c <user_main+0xc4>)
 80026be:	689c      	ldr	r4, [r3, #8]
 80026c0:	2300      	movs	r3, #0
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	4b27      	ldr	r3, [pc, #156]	@ (8002764 <user_main+0xdc>)
 80026c6:	4a28      	ldr	r2, [pc, #160]	@ (8002768 <user_main+0xe0>)
 80026c8:	2120      	movs	r1, #32
 80026ca:	4828      	ldr	r0, [pc, #160]	@ (800276c <user_main+0xe4>)
 80026cc:	47a0      	blx	r4
    cli.registerCommand("alarm", ' ', cmd_startRTC, "(alarm n)Set an RTC alarm n amount of seconds", false);
 80026ce:	4b1f      	ldr	r3, [pc, #124]	@ (800274c <user_main+0xc4>)
 80026d0:	689c      	ldr	r4, [r3, #8]
 80026d2:	2300      	movs	r3, #0
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	4b26      	ldr	r3, [pc, #152]	@ (8002770 <user_main+0xe8>)
 80026d8:	4a26      	ldr	r2, [pc, #152]	@ (8002774 <user_main+0xec>)
 80026da:	2120      	movs	r1, #32
 80026dc:	4826      	ldr	r0, [pc, #152]	@ (8002778 <user_main+0xf0>)
 80026de:	47a0      	blx	r4
    cli.registerCommand("movedata", ' ', cmd_moveData, "Move data from mem to UART", false);
 80026e0:	4b1a      	ldr	r3, [pc, #104]	@ (800274c <user_main+0xc4>)
 80026e2:	689c      	ldr	r4, [r3, #8]
 80026e4:	2300      	movs	r3, #0
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	4b24      	ldr	r3, [pc, #144]	@ (800277c <user_main+0xf4>)
 80026ea:	4a25      	ldr	r2, [pc, #148]	@ (8002780 <user_main+0xf8>)
 80026ec:	2120      	movs	r1, #32
 80026ee:	4825      	ldr	r0, [pc, #148]	@ (8002784 <user_main+0xfc>)
 80026f0:	47a0      	blx	r4
    cli.registerCommand("printslow", ' ', cmd_printParagraph, "Prints a paragraph of text", false);
 80026f2:	4b16      	ldr	r3, [pc, #88]	@ (800274c <user_main+0xc4>)
 80026f4:	689c      	ldr	r4, [r3, #8]
 80026f6:	2300      	movs	r3, #0
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	4b23      	ldr	r3, [pc, #140]	@ (8002788 <user_main+0x100>)
 80026fc:	4a23      	ldr	r2, [pc, #140]	@ (800278c <user_main+0x104>)
 80026fe:	2120      	movs	r1, #32
 8002700:	4823      	ldr	r0, [pc, #140]	@ (8002790 <user_main+0x108>)
 8002702:	47a0      	blx	r4
    cli.registerCommand("printfast", ' ', cmd_printParagraphDMA, "Prints a paragraph of text via DMA", false);
 8002704:	4b11      	ldr	r3, [pc, #68]	@ (800274c <user_main+0xc4>)
 8002706:	689c      	ldr	r4, [r3, #8]
 8002708:	2300      	movs	r3, #0
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	4b21      	ldr	r3, [pc, #132]	@ (8002794 <user_main+0x10c>)
 800270e:	4a22      	ldr	r2, [pc, #136]	@ (8002798 <user_main+0x110>)
 8002710:	2120      	movs	r1, #32
 8002712:	4822      	ldr	r0, [pc, #136]	@ (800279c <user_main+0x114>)
 8002714:	47a0      	blx	r4
    cli.registerCommand("stats", ' ', cmd_timeToPrint, "Prints time it took to print the paragraph", false);
 8002716:	4b0d      	ldr	r3, [pc, #52]	@ (800274c <user_main+0xc4>)
 8002718:	689c      	ldr	r4, [r3, #8]
 800271a:	2300      	movs	r3, #0
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	4b20      	ldr	r3, [pc, #128]	@ (80027a0 <user_main+0x118>)
 8002720:	4a20      	ldr	r2, [pc, #128]	@ (80027a4 <user_main+0x11c>)
 8002722:	2120      	movs	r1, #32
 8002724:	4820      	ldr	r0, [pc, #128]	@ (80027a8 <user_main+0x120>)
 8002726:	47a0      	blx	r4
    cli.registerCommand("sinwave", ' ', cmd_sinWaveStart, "Starts the sine wave", false);
 8002728:	4b08      	ldr	r3, [pc, #32]	@ (800274c <user_main+0xc4>)
 800272a:	689c      	ldr	r4, [r3, #8]
 800272c:	2300      	movs	r3, #0
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	4b1e      	ldr	r3, [pc, #120]	@ (80027ac <user_main+0x124>)
 8002732:	4a1f      	ldr	r2, [pc, #124]	@ (80027b0 <user_main+0x128>)
 8002734:	2120      	movs	r1, #32
 8002736:	481f      	ldr	r0, [pc, #124]	@ (80027b4 <user_main+0x12c>)
 8002738:	47a0      	blx	r4
    while(1){
        uCShell_run(&cli);
 800273a:	4804      	ldr	r0, [pc, #16]	@ (800274c <user_main+0xc4>)
 800273c:	f7ff fc00 	bl	8001f40 <uCShell_run>
 8002740:	e7fb      	b.n	800273a <user_main+0xb2>
 8002742:	bf00      	nop
 8002744:	08008531 	.word	0x08008531
 8002748:	0800a5e0 	.word	0x0800a5e0
 800274c:	20000e6c 	.word	0x20000e6c
 8002750:	20000e80 	.word	0x20000e80
 8002754:	20000d9c 	.word	0x20000d9c
 8002758:	0800a5ec 	.word	0x0800a5ec
 800275c:	08002365 	.word	0x08002365
 8002760:	0800a608 	.word	0x0800a608
 8002764:	0800a60c 	.word	0x0800a60c
 8002768:	080023b5 	.word	0x080023b5
 800276c:	0800a644 	.word	0x0800a644
 8002770:	0800a64c 	.word	0x0800a64c
 8002774:	08002445 	.word	0x08002445
 8002778:	0800a67c 	.word	0x0800a67c
 800277c:	0800a684 	.word	0x0800a684
 8002780:	080024b5 	.word	0x080024b5
 8002784:	0800a6a0 	.word	0x0800a6a0
 8002788:	0800a6ac 	.word	0x0800a6ac
 800278c:	080024e9 	.word	0x080024e9
 8002790:	0800a6c8 	.word	0x0800a6c8
 8002794:	0800a6d4 	.word	0x0800a6d4
 8002798:	08002529 	.word	0x08002529
 800279c:	0800a6f8 	.word	0x0800a6f8
 80027a0:	0800a704 	.word	0x0800a704
 80027a4:	0800256d 	.word	0x0800256d
 80027a8:	0800a730 	.word	0x0800a730
 80027ac:	0800a738 	.word	0x0800a738
 80027b0:	08002651 	.word	0x08002651
 80027b4:	0800a750 	.word	0x0800a750

080027b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80027b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027bc:	f7fe ffb2 	bl	8001724 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027c0:	480c      	ldr	r0, [pc, #48]	@ (80027f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80027c2:	490d      	ldr	r1, [pc, #52]	@ (80027f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027c4:	4a0d      	ldr	r2, [pc, #52]	@ (80027fc <LoopForever+0xe>)
  movs r3, #0
 80027c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027c8:	e002      	b.n	80027d0 <LoopCopyDataInit>

080027ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ce:	3304      	adds	r3, #4

080027d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027d4:	d3f9      	bcc.n	80027ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002800 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027d8:	4c0a      	ldr	r4, [pc, #40]	@ (8002804 <LoopForever+0x16>)
  movs r3, #0
 80027da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027dc:	e001      	b.n	80027e2 <LoopFillZerobss>

080027de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027e0:	3204      	adds	r2, #4

080027e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027e4:	d3fb      	bcc.n	80027de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027e6:	f006 f8ab 	bl	8008940 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027ea:	f7fe fdd3 	bl	8001394 <main>

080027ee <LoopForever>:

LoopForever:
    b LoopForever
 80027ee:	e7fe      	b.n	80027ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80027f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80027f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027f8:	20000b7c 	.word	0x20000b7c
  ldr r2, =_sidata
 80027fc:	0800ab70 	.word	0x0800ab70
  ldr r2, =_sbss
 8002800:	20000b7c 	.word	0x20000b7c
  ldr r4, =_ebss
 8002804:	20001824 	.word	0x20001824

08002808 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002808:	e7fe      	b.n	8002808 <ADC1_2_IRQHandler>
	...

0800280c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002812:	2300      	movs	r3, #0
 8002814:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002816:	4b0c      	ldr	r3, [pc, #48]	@ (8002848 <HAL_Init+0x3c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a0b      	ldr	r2, [pc, #44]	@ (8002848 <HAL_Init+0x3c>)
 800281c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002820:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002822:	2003      	movs	r0, #3
 8002824:	f000 f982 	bl	8002b2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002828:	2000      	movs	r0, #0
 800282a:	f000 f80f 	bl	800284c <HAL_InitTick>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d002      	beq.n	800283a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	71fb      	strb	r3, [r7, #7]
 8002838:	e001      	b.n	800283e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800283a:	f7fe fe1b 	bl	8001474 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800283e:	79fb      	ldrb	r3, [r7, #7]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40022000 	.word	0x40022000

0800284c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002854:	2300      	movs	r3, #0
 8002856:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002858:	4b17      	ldr	r3, [pc, #92]	@ (80028b8 <HAL_InitTick+0x6c>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d023      	beq.n	80028a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002860:	4b16      	ldr	r3, [pc, #88]	@ (80028bc <HAL_InitTick+0x70>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	4b14      	ldr	r3, [pc, #80]	@ (80028b8 <HAL_InitTick+0x6c>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	4619      	mov	r1, r3
 800286a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800286e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002872:	fbb2 f3f3 	udiv	r3, r2, r3
 8002876:	4618      	mov	r0, r3
 8002878:	f000 f98d 	bl	8002b96 <HAL_SYSTICK_Config>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10f      	bne.n	80028a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b0f      	cmp	r3, #15
 8002886:	d809      	bhi.n	800289c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002888:	2200      	movs	r2, #0
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	f04f 30ff 	mov.w	r0, #4294967295
 8002890:	f000 f957 	bl	8002b42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002894:	4a0a      	ldr	r2, [pc, #40]	@ (80028c0 <HAL_InitTick+0x74>)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	e007      	b.n	80028ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	73fb      	strb	r3, [r7, #15]
 80028a0:	e004      	b.n	80028ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	73fb      	strb	r3, [r7, #15]
 80028a6:	e001      	b.n	80028ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	20000b1c 	.word	0x20000b1c
 80028bc:	20000000 	.word	0x20000000
 80028c0:	20000b18 	.word	0x20000b18

080028c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028c8:	4b06      	ldr	r3, [pc, #24]	@ (80028e4 <HAL_IncTick+0x20>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	4b06      	ldr	r3, [pc, #24]	@ (80028e8 <HAL_IncTick+0x24>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4413      	add	r3, r2
 80028d4:	4a04      	ldr	r2, [pc, #16]	@ (80028e8 <HAL_IncTick+0x24>)
 80028d6:	6013      	str	r3, [r2, #0]
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	20000b1c 	.word	0x20000b1c
 80028e8:	200016d4 	.word	0x200016d4

080028ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  return uwTick;
 80028f0:	4b03      	ldr	r3, [pc, #12]	@ (8002900 <HAL_GetTick+0x14>)
 80028f2:	681b      	ldr	r3, [r3, #0]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	200016d4 	.word	0x200016d4

08002904 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800290c:	f7ff ffee 	bl	80028ec <HAL_GetTick>
 8002910:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291c:	d005      	beq.n	800292a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800291e:	4b0a      	ldr	r3, [pc, #40]	@ (8002948 <HAL_Delay+0x44>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4413      	add	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800292a:	bf00      	nop
 800292c:	f7ff ffde 	bl	80028ec <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	429a      	cmp	r2, r3
 800293a:	d8f7      	bhi.n	800292c <HAL_Delay+0x28>
  {
  }
}
 800293c:	bf00      	nop
 800293e:	bf00      	nop
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20000b1c 	.word	0x20000b1c

0800294c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002950:	4b05      	ldr	r3, [pc, #20]	@ (8002968 <HAL_SuspendTick+0x1c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a04      	ldr	r2, [pc, #16]	@ (8002968 <HAL_SuspendTick+0x1c>)
 8002956:	f023 0302 	bic.w	r3, r3, #2
 800295a:	6013      	str	r3, [r2, #0]
}
 800295c:	bf00      	nop
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	e000e010 	.word	0xe000e010

0800296c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002970:	4b05      	ldr	r3, [pc, #20]	@ (8002988 <HAL_ResumeTick+0x1c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a04      	ldr	r2, [pc, #16]	@ (8002988 <HAL_ResumeTick+0x1c>)
 8002976:	f043 0302 	orr.w	r3, r3, #2
 800297a:	6013      	str	r3, [r2, #0]
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	e000e010 	.word	0xe000e010

0800298c <__NVIC_SetPriorityGrouping>:
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800299c:	4b0c      	ldr	r3, [pc, #48]	@ (80029d0 <__NVIC_SetPriorityGrouping+0x44>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029a8:	4013      	ands	r3, r2
 80029aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029be:	4a04      	ldr	r2, [pc, #16]	@ (80029d0 <__NVIC_SetPriorityGrouping+0x44>)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	60d3      	str	r3, [r2, #12]
}
 80029c4:	bf00      	nop
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <__NVIC_GetPriorityGrouping>:
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029d8:	4b04      	ldr	r3, [pc, #16]	@ (80029ec <__NVIC_GetPriorityGrouping+0x18>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	0a1b      	lsrs	r3, r3, #8
 80029de:	f003 0307 	and.w	r3, r3, #7
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	e000ed00 	.word	0xe000ed00

080029f0 <__NVIC_EnableIRQ>:
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	db0b      	blt.n	8002a1a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	f003 021f 	and.w	r2, r3, #31
 8002a08:	4907      	ldr	r1, [pc, #28]	@ (8002a28 <__NVIC_EnableIRQ+0x38>)
 8002a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0e:	095b      	lsrs	r3, r3, #5
 8002a10:	2001      	movs	r0, #1
 8002a12:	fa00 f202 	lsl.w	r2, r0, r2
 8002a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	e000e100 	.word	0xe000e100

08002a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	6039      	str	r1, [r7, #0]
 8002a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	db0a      	blt.n	8002a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	490c      	ldr	r1, [pc, #48]	@ (8002a78 <__NVIC_SetPriority+0x4c>)
 8002a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4a:	0112      	lsls	r2, r2, #4
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	440b      	add	r3, r1
 8002a50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a54:	e00a      	b.n	8002a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	4908      	ldr	r1, [pc, #32]	@ (8002a7c <__NVIC_SetPriority+0x50>)
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	3b04      	subs	r3, #4
 8002a64:	0112      	lsls	r2, r2, #4
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	440b      	add	r3, r1
 8002a6a:	761a      	strb	r2, [r3, #24]
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	e000e100 	.word	0xe000e100
 8002a7c:	e000ed00 	.word	0xe000ed00

08002a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b089      	sub	sp, #36	@ 0x24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f1c3 0307 	rsb	r3, r3, #7
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	bf28      	it	cs
 8002a9e:	2304      	movcs	r3, #4
 8002aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	2b06      	cmp	r3, #6
 8002aa8:	d902      	bls.n	8002ab0 <NVIC_EncodePriority+0x30>
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	3b03      	subs	r3, #3
 8002aae:	e000      	b.n	8002ab2 <NVIC_EncodePriority+0x32>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43da      	mvns	r2, r3
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	401a      	ands	r2, r3
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad2:	43d9      	mvns	r1, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad8:	4313      	orrs	r3, r2
         );
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3724      	adds	r7, #36	@ 0x24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
	...

08002ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002af8:	d301      	bcc.n	8002afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002afa:	2301      	movs	r3, #1
 8002afc:	e00f      	b.n	8002b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002afe:	4a0a      	ldr	r2, [pc, #40]	@ (8002b28 <SysTick_Config+0x40>)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b06:	210f      	movs	r1, #15
 8002b08:	f04f 30ff 	mov.w	r0, #4294967295
 8002b0c:	f7ff ff8e 	bl	8002a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b10:	4b05      	ldr	r3, [pc, #20]	@ (8002b28 <SysTick_Config+0x40>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b16:	4b04      	ldr	r3, [pc, #16]	@ (8002b28 <SysTick_Config+0x40>)
 8002b18:	2207      	movs	r2, #7
 8002b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	e000e010 	.word	0xe000e010

08002b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7ff ff29 	bl	800298c <__NVIC_SetPriorityGrouping>
}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b086      	sub	sp, #24
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	4603      	mov	r3, r0
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	607a      	str	r2, [r7, #4]
 8002b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b54:	f7ff ff3e 	bl	80029d4 <__NVIC_GetPriorityGrouping>
 8002b58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	68b9      	ldr	r1, [r7, #8]
 8002b5e:	6978      	ldr	r0, [r7, #20]
 8002b60:	f7ff ff8e 	bl	8002a80 <NVIC_EncodePriority>
 8002b64:	4602      	mov	r2, r0
 8002b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff ff5d 	bl	8002a2c <__NVIC_SetPriority>
}
 8002b72:	bf00      	nop
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b082      	sub	sp, #8
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	4603      	mov	r3, r0
 8002b82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff ff31 	bl	80029f0 <__NVIC_EnableIRQ>
}
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b082      	sub	sp, #8
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff ffa2 	bl	8002ae8 <SysTick_Config>
 8002ba4:	4603      	mov	r3, r0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b082      	sub	sp, #8
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e014      	b.n	8002bea <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	791b      	ldrb	r3, [r3, #4]
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d105      	bne.n	8002bd6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7fe f9ad 	bl	8000f30 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2202      	movs	r2, #2
 8002bda:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	795b      	ldrb	r3, [r3, #5]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d101      	bne.n	8002c12 <HAL_DAC_Start_DMA+0x1e>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	e0ab      	b.n	8002d6a <HAL_DAC_Start_DMA+0x176>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2201      	movs	r2, #1
 8002c16:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d12f      	bne.n	8002c84 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	4a52      	ldr	r2, [pc, #328]	@ (8002d74 <HAL_DAC_Start_DMA+0x180>)
 8002c2a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	4a51      	ldr	r2, [pc, #324]	@ (8002d78 <HAL_DAC_Start_DMA+0x184>)
 8002c32:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	4a50      	ldr	r2, [pc, #320]	@ (8002d7c <HAL_DAC_Start_DMA+0x188>)
 8002c3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002c4a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d013      	beq.n	8002c7a <HAL_DAC_Start_DMA+0x86>
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d845      	bhi.n	8002ce4 <HAL_DAC_Start_DMA+0xf0>
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_DAC_Start_DMA+0x72>
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d005      	beq.n	8002c70 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002c64:	e03e      	b.n	8002ce4 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	3308      	adds	r3, #8
 8002c6c:	613b      	str	r3, [r7, #16]
        break;
 8002c6e:	e03c      	b.n	8002cea <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	330c      	adds	r3, #12
 8002c76:	613b      	str	r3, [r7, #16]
        break;
 8002c78:	e037      	b.n	8002cea <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	3310      	adds	r3, #16
 8002c80:	613b      	str	r3, [r7, #16]
        break;
 8002c82:	e032      	b.n	8002cea <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	4a3d      	ldr	r2, [pc, #244]	@ (8002d80 <HAL_DAC_Start_DMA+0x18c>)
 8002c8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	4a3c      	ldr	r2, [pc, #240]	@ (8002d84 <HAL_DAC_Start_DMA+0x190>)
 8002c92:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	4a3b      	ldr	r2, [pc, #236]	@ (8002d88 <HAL_DAC_Start_DMA+0x194>)
 8002c9a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002caa:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d013      	beq.n	8002cda <HAL_DAC_Start_DMA+0xe6>
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d817      	bhi.n	8002ce8 <HAL_DAC_Start_DMA+0xf4>
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_DAC_Start_DMA+0xd2>
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d005      	beq.n	8002cd0 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002cc4:	e010      	b.n	8002ce8 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	3314      	adds	r3, #20
 8002ccc:	613b      	str	r3, [r7, #16]
        break;
 8002cce:	e00c      	b.n	8002cea <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	3318      	adds	r3, #24
 8002cd6:	613b      	str	r3, [r7, #16]
        break;
 8002cd8:	e007      	b.n	8002cea <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	331c      	adds	r3, #28
 8002ce0:	613b      	str	r3, [r7, #16]
        break;
 8002ce2:	e002      	b.n	8002cea <HAL_DAC_Start_DMA+0xf6>
        break;
 8002ce4:	bf00      	nop
 8002ce6:	e000      	b.n	8002cea <HAL_DAC_Start_DMA+0xf6>
        break;
 8002ce8:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d111      	bne.n	8002d14 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002cfe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6898      	ldr	r0, [r3, #8]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	f000 fac7 	bl	800329c <HAL_DMA_Start_IT>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	75fb      	strb	r3, [r7, #23]
 8002d12:	e010      	b.n	8002d36 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002d22:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	68d8      	ldr	r0, [r3, #12]
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	f000 fab5 	bl	800329c <HAL_DMA_Start_IT>
 8002d32:	4603      	mov	r3, r0
 8002d34:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002d3c:	7dfb      	ldrb	r3, [r7, #23]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10c      	bne.n	8002d5c <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6819      	ldr	r1, [r3, #0]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	f003 0310 	and.w	r3, r3, #16
 8002d4e:	2201      	movs	r2, #1
 8002d50:	409a      	lsls	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	e005      	b.n	8002d68 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	f043 0204 	orr.w	r2, r3, #4
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	08003017 	.word	0x08003017
 8002d78:	08003039 	.word	0x08003039
 8002d7c:	08003055 	.word	0x08003055
 8002d80:	080030bf 	.word	0x080030bf
 8002d84:	080030e1 	.word	0x080030e1
 8002d88:	080030fd 	.word	0x080030fd

08002d8c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	795b      	ldrb	r3, [r3, #5]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d101      	bne.n	8002de4 <HAL_DAC_ConfigChannel+0x1c>
 8002de0:	2302      	movs	r3, #2
 8002de2:	e114      	b.n	800300e <HAL_DAC_ConfigChannel+0x246>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2201      	movs	r2, #1
 8002de8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2202      	movs	r2, #2
 8002dee:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	f040 8081 	bne.w	8002efc <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002dfa:	f7ff fd77 	bl	80028ec <HAL_GetTick>
 8002dfe:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d140      	bne.n	8002e88 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002e06:	e018      	b.n	8002e3a <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002e08:	f7ff fd70 	bl	80028ec <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d911      	bls.n	8002e3a <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00a      	beq.n	8002e3a <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	f043 0208 	orr.w	r2, r3, #8
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2203      	movs	r2, #3
 8002e34:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e0e9      	b.n	800300e <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1df      	bne.n	8002e08 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002e48:	2001      	movs	r0, #1
 8002e4a:	f7ff fd5b 	bl	8002904 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	6992      	ldr	r2, [r2, #24]
 8002e56:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e58:	e023      	b.n	8002ea2 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002e5a:	f7ff fd47 	bl	80028ec <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d90f      	bls.n	8002e88 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	da0a      	bge.n	8002e88 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	f043 0208 	orr.w	r2, r3, #8
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2203      	movs	r2, #3
 8002e82:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e0c2      	b.n	800300e <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	dbe3      	blt.n	8002e5a <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002e92:	2001      	movs	r0, #1
 8002e94:	f7ff fd36 	bl	8002904 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	6992      	ldr	r2, [r2, #24]
 8002ea0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f003 0310 	and.w	r3, r3, #16
 8002eae:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	ea02 0103 	and.w	r1, r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	69da      	ldr	r2, [r3, #28]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	409a      	lsls	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f003 0310 	and.w	r3, r3, #16
 8002edc:	21ff      	movs	r1, #255	@ 0xff
 8002ede:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	ea02 0103 	and.w	r1, r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	6a1a      	ldr	r2, [r3, #32]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f003 0310 	and.w	r3, r3, #16
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d11d      	bne.n	8002f40 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f0a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f003 0310 	and.w	r3, r3, #16
 8002f12:	221f      	movs	r2, #31
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f003 0310 	and.w	r3, r3, #16
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f46:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f003 0310 	and.w	r3, r3, #16
 8002f4e:	2207      	movs	r2, #7
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	431a      	orrs	r2, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6819      	ldr	r1, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f003 0310 	and.w	r3, r3, #16
 8002f94:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	43da      	mvns	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	400a      	ands	r2, r1
 8002fa4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f003 0310 	and.w	r3, r3, #16
 8002fb4:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f003 0310 	and.w	r3, r3, #16
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6819      	ldr	r1, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f003 0310 	and.w	r3, r3, #16
 8002ff0:	22c0      	movs	r2, #192	@ 0xc0
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43da      	mvns	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	400a      	ands	r2, r1
 8002ffe:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2201      	movs	r2, #1
 8003004:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3720      	adds	r7, #32
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b084      	sub	sp, #16
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003022:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f7ff feb1 	bl	8002d8c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2201      	movs	r2, #1
 800302e:	711a      	strb	r2, [r3, #4]
}
 8003030:	bf00      	nop
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003044:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f7ff feaa 	bl	8002da0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800304c:	bf00      	nop
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003060:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	f043 0204 	orr.w	r2, r3, #4
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f7ff fea0 	bl	8002db4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	711a      	strb	r2, [r3, #4]
}
 800307a:	bf00      	nop
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b084      	sub	sp, #16
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ca:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f7ff ffd8 	bl	8003082 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2201      	movs	r2, #1
 80030d6:	711a      	strb	r2, [r3, #4]
}
 80030d8:	bf00      	nop
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ec:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f7ff ffd1 	bl	8003096 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80030f4:	bf00      	nop
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003108:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	f043 0204 	orr.w	r2, r3, #4
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f7ff ffc7 	bl	80030aa <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2201      	movs	r2, #1
 8003120:	711a      	strb	r2, [r3, #4]
}
 8003122:	bf00      	nop
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e098      	b.n	8003270 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	461a      	mov	r2, r3
 8003144:	4b4d      	ldr	r3, [pc, #308]	@ (800327c <HAL_DMA_Init+0x150>)
 8003146:	429a      	cmp	r2, r3
 8003148:	d80f      	bhi.n	800316a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	461a      	mov	r2, r3
 8003150:	4b4b      	ldr	r3, [pc, #300]	@ (8003280 <HAL_DMA_Init+0x154>)
 8003152:	4413      	add	r3, r2
 8003154:	4a4b      	ldr	r2, [pc, #300]	@ (8003284 <HAL_DMA_Init+0x158>)
 8003156:	fba2 2303 	umull	r2, r3, r2, r3
 800315a:	091b      	lsrs	r3, r3, #4
 800315c:	009a      	lsls	r2, r3, #2
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a48      	ldr	r2, [pc, #288]	@ (8003288 <HAL_DMA_Init+0x15c>)
 8003166:	641a      	str	r2, [r3, #64]	@ 0x40
 8003168:	e00e      	b.n	8003188 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	4b46      	ldr	r3, [pc, #280]	@ (800328c <HAL_DMA_Init+0x160>)
 8003172:	4413      	add	r3, r2
 8003174:	4a43      	ldr	r2, [pc, #268]	@ (8003284 <HAL_DMA_Init+0x158>)
 8003176:	fba2 2303 	umull	r2, r3, r2, r3
 800317a:	091b      	lsrs	r3, r3, #4
 800317c:	009a      	lsls	r2, r3, #2
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a42      	ldr	r2, [pc, #264]	@ (8003290 <HAL_DMA_Init+0x164>)
 8003186:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2202      	movs	r2, #2
 800318c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800319e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80031ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031e2:	d039      	beq.n	8003258 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e8:	4a27      	ldr	r2, [pc, #156]	@ (8003288 <HAL_DMA_Init+0x15c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d11a      	bne.n	8003224 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80031ee:	4b29      	ldr	r3, [pc, #164]	@ (8003294 <HAL_DMA_Init+0x168>)
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f6:	f003 031c 	and.w	r3, r3, #28
 80031fa:	210f      	movs	r1, #15
 80031fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	4924      	ldr	r1, [pc, #144]	@ (8003294 <HAL_DMA_Init+0x168>)
 8003204:	4013      	ands	r3, r2
 8003206:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003208:	4b22      	ldr	r3, [pc, #136]	@ (8003294 <HAL_DMA_Init+0x168>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6859      	ldr	r1, [r3, #4]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003214:	f003 031c 	and.w	r3, r3, #28
 8003218:	fa01 f303 	lsl.w	r3, r1, r3
 800321c:	491d      	ldr	r1, [pc, #116]	@ (8003294 <HAL_DMA_Init+0x168>)
 800321e:	4313      	orrs	r3, r2
 8003220:	600b      	str	r3, [r1, #0]
 8003222:	e019      	b.n	8003258 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003224:	4b1c      	ldr	r3, [pc, #112]	@ (8003298 <HAL_DMA_Init+0x16c>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322c:	f003 031c 	and.w	r3, r3, #28
 8003230:	210f      	movs	r1, #15
 8003232:	fa01 f303 	lsl.w	r3, r1, r3
 8003236:	43db      	mvns	r3, r3
 8003238:	4917      	ldr	r1, [pc, #92]	@ (8003298 <HAL_DMA_Init+0x16c>)
 800323a:	4013      	ands	r3, r2
 800323c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800323e:	4b16      	ldr	r3, [pc, #88]	@ (8003298 <HAL_DMA_Init+0x16c>)
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6859      	ldr	r1, [r3, #4]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800324a:	f003 031c 	and.w	r3, r3, #28
 800324e:	fa01 f303 	lsl.w	r3, r1, r3
 8003252:	4911      	ldr	r1, [pc, #68]	@ (8003298 <HAL_DMA_Init+0x16c>)
 8003254:	4313      	orrs	r3, r2
 8003256:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	40020407 	.word	0x40020407
 8003280:	bffdfff8 	.word	0xbffdfff8
 8003284:	cccccccd 	.word	0xcccccccd
 8003288:	40020000 	.word	0x40020000
 800328c:	bffdfbf8 	.word	0xbffdfbf8
 8003290:	40020400 	.word	0x40020400
 8003294:	400200a8 	.word	0x400200a8
 8003298:	400204a8 	.word	0x400204a8

0800329c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
 80032a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d101      	bne.n	80032bc <HAL_DMA_Start_IT+0x20>
 80032b8:	2302      	movs	r3, #2
 80032ba:	e04b      	b.n	8003354 <HAL_DMA_Start_IT+0xb8>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d13a      	bne.n	8003346 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0201 	bic.w	r2, r2, #1
 80032ec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	68b9      	ldr	r1, [r7, #8]
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 f95f 	bl	80035b8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d008      	beq.n	8003314 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f042 020e 	orr.w	r2, r2, #14
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	e00f      	b.n	8003334 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0204 	bic.w	r2, r2, #4
 8003322:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 020a 	orr.w	r2, r2, #10
 8003332:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0201 	orr.w	r2, r2, #1
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	e005      	b.n	8003352 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800334e:	2302      	movs	r3, #2
 8003350:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003352:	7dfb      	ldrb	r3, [r7, #23]
}
 8003354:	4618      	mov	r0, r3
 8003356:	3718      	adds	r7, #24
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d008      	beq.n	8003386 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2204      	movs	r2, #4
 8003378:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e022      	b.n	80033cc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 020e 	bic.w	r2, r2, #14
 8003394:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0201 	bic.w	r2, r2, #1
 80033a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033aa:	f003 021c 	and.w	r2, r3, #28
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b2:	2101      	movs	r1, #1
 80033b4:	fa01 f202 	lsl.w	r2, r1, r2
 80033b8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d005      	beq.n	80033fc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2204      	movs	r2, #4
 80033f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	73fb      	strb	r3, [r7, #15]
 80033fa:	e029      	b.n	8003450 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 020e 	bic.w	r2, r2, #14
 800340a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0201 	bic.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003420:	f003 021c 	and.w	r2, r3, #28
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003428:	2101      	movs	r1, #1
 800342a:	fa01 f202 	lsl.w	r2, r1, r2
 800342e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	4798      	blx	r3
    }
  }
  return status;
 8003450:	7bfb      	ldrb	r3, [r7, #15]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b084      	sub	sp, #16
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003476:	f003 031c 	and.w	r3, r3, #28
 800347a:	2204      	movs	r2, #4
 800347c:	409a      	lsls	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	4013      	ands	r3, r2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d026      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x7a>
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b00      	cmp	r3, #0
 800348e:	d021      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b00      	cmp	r3, #0
 800349c:	d107      	bne.n	80034ae <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0204 	bic.w	r2, r2, #4
 80034ac:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b2:	f003 021c 	and.w	r2, r3, #28
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ba:	2104      	movs	r1, #4
 80034bc:	fa01 f202 	lsl.w	r2, r1, r2
 80034c0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d071      	beq.n	80035ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80034d2:	e06c      	b.n	80035ae <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d8:	f003 031c 	and.w	r3, r3, #28
 80034dc:	2202      	movs	r2, #2
 80034de:	409a      	lsls	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4013      	ands	r3, r2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d02e      	beq.n	8003546 <HAL_DMA_IRQHandler+0xec>
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d029      	beq.n	8003546 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0320 	and.w	r3, r3, #32
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10b      	bne.n	8003518 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 020a 	bic.w	r2, r2, #10
 800350e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351c:	f003 021c 	and.w	r2, r3, #28
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003524:	2102      	movs	r1, #2
 8003526:	fa01 f202 	lsl.w	r2, r1, r2
 800352a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003538:	2b00      	cmp	r3, #0
 800353a:	d038      	beq.n	80035ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003544:	e033      	b.n	80035ae <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354a:	f003 031c 	and.w	r3, r3, #28
 800354e:	2208      	movs	r2, #8
 8003550:	409a      	lsls	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4013      	ands	r3, r2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d02a      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x156>
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b00      	cmp	r3, #0
 8003562:	d025      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 020e 	bic.w	r2, r2, #14
 8003572:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003578:	f003 021c 	and.w	r2, r3, #28
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003580:	2101      	movs	r1, #1
 8003582:	fa01 f202 	lsl.w	r2, r1, r2
 8003586:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d004      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80035ae:	bf00      	nop
 80035b0:	bf00      	nop
}
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ca:	f003 021c 	and.w	r2, r3, #28
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	2101      	movs	r1, #1
 80035d4:	fa01 f202 	lsl.w	r2, r1, r2
 80035d8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	2b10      	cmp	r3, #16
 80035e8:	d108      	bne.n	80035fc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80035fa:	e007      	b.n	800360c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	60da      	str	r2, [r3, #12]
}
 800360c:	bf00      	nop
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003618:	b480      	push	{r7}
 800361a:	b087      	sub	sp, #28
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003622:	2300      	movs	r3, #0
 8003624:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003626:	e17f      	b.n	8003928 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	2101      	movs	r1, #1
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	fa01 f303 	lsl.w	r3, r1, r3
 8003634:	4013      	ands	r3, r2
 8003636:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 8171 	beq.w	8003922 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f003 0303 	and.w	r3, r3, #3
 8003648:	2b01      	cmp	r3, #1
 800364a:	d005      	beq.n	8003658 <HAL_GPIO_Init+0x40>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f003 0303 	and.w	r3, r3, #3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d130      	bne.n	80036ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	2203      	movs	r2, #3
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	43db      	mvns	r3, r3
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4013      	ands	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	4313      	orrs	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800368e:	2201      	movs	r2, #1
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	43db      	mvns	r3, r3
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	4013      	ands	r3, r2
 800369c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	091b      	lsrs	r3, r3, #4
 80036a4:	f003 0201 	and.w	r2, r3, #1
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	2b03      	cmp	r3, #3
 80036c4:	d118      	bne.n	80036f8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80036cc:	2201      	movs	r2, #1
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4013      	ands	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	08db      	lsrs	r3, r3, #3
 80036e2:	f003 0201 	and.w	r2, r3, #1
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f003 0303 	and.w	r3, r3, #3
 8003700:	2b03      	cmp	r3, #3
 8003702:	d017      	beq.n	8003734 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	2203      	movs	r2, #3
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	43db      	mvns	r3, r3
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	4013      	ands	r3, r2
 800371a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	4313      	orrs	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 0303 	and.w	r3, r3, #3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d123      	bne.n	8003788 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	08da      	lsrs	r2, r3, #3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3208      	adds	r2, #8
 8003748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800374c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	220f      	movs	r2, #15
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	43db      	mvns	r3, r3
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	4013      	ands	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4313      	orrs	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	08da      	lsrs	r2, r3, #3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3208      	adds	r2, #8
 8003782:	6939      	ldr	r1, [r7, #16]
 8003784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	2203      	movs	r2, #3
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	43db      	mvns	r3, r3
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4013      	ands	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f003 0203 	and.w	r2, r3, #3
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 80ac 	beq.w	8003922 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ca:	4b5f      	ldr	r3, [pc, #380]	@ (8003948 <HAL_GPIO_Init+0x330>)
 80037cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ce:	4a5e      	ldr	r2, [pc, #376]	@ (8003948 <HAL_GPIO_Init+0x330>)
 80037d0:	f043 0301 	orr.w	r3, r3, #1
 80037d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80037d6:	4b5c      	ldr	r3, [pc, #368]	@ (8003948 <HAL_GPIO_Init+0x330>)
 80037d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80037e2:	4a5a      	ldr	r2, [pc, #360]	@ (800394c <HAL_GPIO_Init+0x334>)
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	089b      	lsrs	r3, r3, #2
 80037e8:	3302      	adds	r3, #2
 80037ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	220f      	movs	r2, #15
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	43db      	mvns	r3, r3
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	4013      	ands	r3, r2
 8003804:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800380c:	d025      	beq.n	800385a <HAL_GPIO_Init+0x242>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a4f      	ldr	r2, [pc, #316]	@ (8003950 <HAL_GPIO_Init+0x338>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d01f      	beq.n	8003856 <HAL_GPIO_Init+0x23e>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a4e      	ldr	r2, [pc, #312]	@ (8003954 <HAL_GPIO_Init+0x33c>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d019      	beq.n	8003852 <HAL_GPIO_Init+0x23a>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a4d      	ldr	r2, [pc, #308]	@ (8003958 <HAL_GPIO_Init+0x340>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d013      	beq.n	800384e <HAL_GPIO_Init+0x236>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a4c      	ldr	r2, [pc, #304]	@ (800395c <HAL_GPIO_Init+0x344>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d00d      	beq.n	800384a <HAL_GPIO_Init+0x232>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a4b      	ldr	r2, [pc, #300]	@ (8003960 <HAL_GPIO_Init+0x348>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d007      	beq.n	8003846 <HAL_GPIO_Init+0x22e>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a4a      	ldr	r2, [pc, #296]	@ (8003964 <HAL_GPIO_Init+0x34c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d101      	bne.n	8003842 <HAL_GPIO_Init+0x22a>
 800383e:	2306      	movs	r3, #6
 8003840:	e00c      	b.n	800385c <HAL_GPIO_Init+0x244>
 8003842:	2307      	movs	r3, #7
 8003844:	e00a      	b.n	800385c <HAL_GPIO_Init+0x244>
 8003846:	2305      	movs	r3, #5
 8003848:	e008      	b.n	800385c <HAL_GPIO_Init+0x244>
 800384a:	2304      	movs	r3, #4
 800384c:	e006      	b.n	800385c <HAL_GPIO_Init+0x244>
 800384e:	2303      	movs	r3, #3
 8003850:	e004      	b.n	800385c <HAL_GPIO_Init+0x244>
 8003852:	2302      	movs	r3, #2
 8003854:	e002      	b.n	800385c <HAL_GPIO_Init+0x244>
 8003856:	2301      	movs	r3, #1
 8003858:	e000      	b.n	800385c <HAL_GPIO_Init+0x244>
 800385a:	2300      	movs	r3, #0
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	f002 0203 	and.w	r2, r2, #3
 8003862:	0092      	lsls	r2, r2, #2
 8003864:	4093      	lsls	r3, r2
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800386c:	4937      	ldr	r1, [pc, #220]	@ (800394c <HAL_GPIO_Init+0x334>)
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	089b      	lsrs	r3, r3, #2
 8003872:	3302      	adds	r3, #2
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800387a:	4b3b      	ldr	r3, [pc, #236]	@ (8003968 <HAL_GPIO_Init+0x350>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	43db      	mvns	r3, r3
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	4013      	ands	r3, r2
 8003888:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800389e:	4a32      	ldr	r2, [pc, #200]	@ (8003968 <HAL_GPIO_Init+0x350>)
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80038a4:	4b30      	ldr	r3, [pc, #192]	@ (8003968 <HAL_GPIO_Init+0x350>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	43db      	mvns	r3, r3
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	4013      	ands	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038c8:	4a27      	ldr	r2, [pc, #156]	@ (8003968 <HAL_GPIO_Init+0x350>)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80038ce:	4b26      	ldr	r3, [pc, #152]	@ (8003968 <HAL_GPIO_Init+0x350>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	43db      	mvns	r3, r3
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4013      	ands	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038f2:	4a1d      	ldr	r2, [pc, #116]	@ (8003968 <HAL_GPIO_Init+0x350>)
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80038f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003968 <HAL_GPIO_Init+0x350>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	43db      	mvns	r3, r3
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	4013      	ands	r3, r2
 8003906:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4313      	orrs	r3, r2
 800391a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800391c:	4a12      	ldr	r2, [pc, #72]	@ (8003968 <HAL_GPIO_Init+0x350>)
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	3301      	adds	r3, #1
 8003926:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	fa22 f303 	lsr.w	r3, r2, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	f47f ae78 	bne.w	8003628 <HAL_GPIO_Init+0x10>
  }
}
 8003938:	bf00      	nop
 800393a:	bf00      	nop
 800393c:	371c      	adds	r7, #28
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40021000 	.word	0x40021000
 800394c:	40010000 	.word	0x40010000
 8003950:	48000400 	.word	0x48000400
 8003954:	48000800 	.word	0x48000800
 8003958:	48000c00 	.word	0x48000c00
 800395c:	48001000 	.word	0x48001000
 8003960:	48001400 	.word	0x48001400
 8003964:	48001800 	.word	0x48001800
 8003968:	40010400 	.word	0x40010400

0800396c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e08f      	b.n	8003a9e <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	d106      	bne.n	800399e <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7fd fcbf 	bl	800131c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2202      	movs	r2, #2
 80039a2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d004      	beq.n	80039c0 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039be:	d103      	bne.n	80039c8 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 031e 	bic.w	r3, r3, #30
 80039c6:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d005      	beq.n	80039e0 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80039da:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80039de:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	4b31      	ldr	r3, [pc, #196]	@ (8003aa8 <HAL_LPTIM_Init+0x13c>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80039f0:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80039f6:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 80039fc:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8003a02:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d107      	bne.n	8003a22 <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d004      	beq.n	8003a34 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a32:	d107      	bne.n	8003a44 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d00a      	beq.n	8003a66 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003a58:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8003a5e:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a0e      	ldr	r2, [pc, #56]	@ (8003aac <HAL_LPTIM_Init+0x140>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d108      	bne.n	8003a8a <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	621a      	str	r2, [r3, #32]
 8003a88:	e004      	b.n	8003a94 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003a92:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	ff19f1fe 	.word	0xff19f1fe
 8003aac:	40007c00 	.word	0x40007c00

08003ab0 <HAL_LPTIM_TimeOut_Start_IT>:
  * @param  Timeout Specifies the TimeOut value to reset the counter.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Timeout)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Timeout));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a36      	ldr	r2, [pc, #216]	@ (8003ba4 <HAL_LPTIM_TimeOut_Start_IT+0xf4>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d106      	bne.n	8003adc <HAL_LPTIM_TimeOut_Start_IT+0x2c>
 8003ace:	4b36      	ldr	r3, [pc, #216]	@ (8003ba8 <HAL_LPTIM_TimeOut_Start_IT+0xf8>)
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	4a35      	ldr	r2, [pc, #212]	@ (8003ba8 <HAL_LPTIM_TimeOut_Start_IT+0xf8>)
 8003ad4:	f043 0301 	orr.w	r3, r3, #1
 8003ad8:	6213      	str	r3, [r2, #32]
 8003ada:	e005      	b.n	8003ae8 <HAL_LPTIM_TimeOut_Start_IT+0x38>
 8003adc:	4b32      	ldr	r3, [pc, #200]	@ (8003ba8 <HAL_LPTIM_TimeOut_Start_IT+0xf8>)
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	4a31      	ldr	r2, [pc, #196]	@ (8003ba8 <HAL_LPTIM_TimeOut_Start_IT+0xf8>)
 8003ae2:	f043 0302 	orr.w	r3, r3, #2
 8003ae6:	6213      	str	r3, [r2, #32]

  /* Set TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8003af6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	691a      	ldr	r2, [r3, #16]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0201 	orr.w	r2, r2, #1
 8003b06:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2210      	movs	r2, #16
 8003b0e:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8003b18:	2110      	movs	r1, #16
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 f978 	bl	8003e10 <LPTIM_WaitForFlag>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b03      	cmp	r3, #3
 8003b24:	d101      	bne.n	8003b2a <HAL_LPTIM_TimeOut_Start_IT+0x7a>
  {
    return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e038      	b.n	8003b9c <HAL_LPTIM_TimeOut_Start_IT+0xec>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2208      	movs	r2, #8
 8003b30:	605a      	str	r2, [r3, #4]

  /* Load the Timeout value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8003b3a:	2108      	movs	r1, #8
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f000 f967 	bl	8003e10 <LPTIM_WaitForFlag>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b03      	cmp	r3, #3
 8003b46:	d101      	bne.n	8003b4c <HAL_LPTIM_TimeOut_Start_IT+0x9c>
  {
    return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e027      	b.n	8003b9c <HAL_LPTIM_TimeOut_Start_IT+0xec>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 f98f 	bl	8003e70 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f000 f94d 	bl	8003df2 <HAL_LPTIM_GetState>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b03      	cmp	r3, #3
 8003b5c:	d101      	bne.n	8003b62 <HAL_LPTIM_TimeOut_Start_IT+0xb2>
  {
    return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e01c      	b.n	8003b9c <HAL_LPTIM_TimeOut_Start_IT+0xec>
  }

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f042 0201 	orr.w	r2, r2, #1
 8003b70:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f042 0201 	orr.w	r2, r2, #1
 8003b80:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	691a      	ldr	r2, [r3, #16]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 0204 	orr.w	r2, r2, #4
 8003b90:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40007c00 	.word	0x40007c00
 8003ba8:	40010400 	.word	0x40010400

08003bac <HAL_LPTIM_TimeOut_Stop_IT>:
  * @brief  Stop the Timeout function in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));


  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT(hlptim->Instance);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8003c28 <HAL_LPTIM_TimeOut_Stop_IT+0x7c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d106      	bne.n	8003bcc <HAL_LPTIM_TimeOut_Stop_IT+0x20>
 8003bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8003c2c <HAL_LPTIM_TimeOut_Stop_IT+0x80>)
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	4a1a      	ldr	r2, [pc, #104]	@ (8003c2c <HAL_LPTIM_TimeOut_Stop_IT+0x80>)
 8003bc4:	f023 0301 	bic.w	r3, r3, #1
 8003bc8:	6213      	str	r3, [r2, #32]
 8003bca:	e005      	b.n	8003bd8 <HAL_LPTIM_TimeOut_Stop_IT+0x2c>
 8003bcc:	4b17      	ldr	r3, [pc, #92]	@ (8003c2c <HAL_LPTIM_TimeOut_Stop_IT+0x80>)
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	4a16      	ldr	r2, [pc, #88]	@ (8003c2c <HAL_LPTIM_TimeOut_Stop_IT+0x80>)
 8003bd2:	f023 0302 	bic.w	r3, r3, #2
 8003bd6:	6213      	str	r3, [r2, #32]

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f945 	bl	8003e70 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f903 	bl	8003df2 <HAL_LPTIM_GetState>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	d101      	bne.n	8003bf6 <HAL_LPTIM_TimeOut_Stop_IT+0x4a>
  {
    return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e014      	b.n	8003c20 <HAL_LPTIM_TimeOut_Stop_IT+0x74>
  }

  /* Reset TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_TIMOUT;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68da      	ldr	r2, [r3, #12]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 8003c04:	60da      	str	r2, [r3, #12]

  /* Disable Compare match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_CMPM);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 0201 	bic.w	r2, r2, #1
 8003c14:	609a      	str	r2, [r3, #8]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40007c00 	.word	0x40007c00
 8003c2c:	40010400 	.word	0x40010400

08003c30 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d10d      	bne.n	8003c62 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d106      	bne.n	8003c62 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f882 	bl	8003d66 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d10d      	bne.n	8003c8c <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d106      	bne.n	8003c8c <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2202      	movs	r2, #2
 8003c84:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f877 	bl	8003d7a <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0304 	and.w	r3, r3, #4
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d10d      	bne.n	8003cb6 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	d106      	bne.n	8003cb6 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2204      	movs	r2, #4
 8003cae:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 f86c 	bl	8003d8e <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0308 	and.w	r3, r3, #8
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	d10d      	bne.n	8003ce0 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 0308 	and.w	r3, r3, #8
 8003cce:	2b08      	cmp	r3, #8
 8003cd0:	d106      	bne.n	8003ce0 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2208      	movs	r2, #8
 8003cd8:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f861 	bl	8003da2 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0310 	and.w	r3, r3, #16
 8003cea:	2b10      	cmp	r3, #16
 8003cec:	d10d      	bne.n	8003d0a <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 0310 	and.w	r3, r3, #16
 8003cf8:	2b10      	cmp	r3, #16
 8003cfa:	d106      	bne.n	8003d0a <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2210      	movs	r2, #16
 8003d02:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 f856 	bl	8003db6 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0320 	and.w	r3, r3, #32
 8003d14:	2b20      	cmp	r3, #32
 8003d16:	d10d      	bne.n	8003d34 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 0320 	and.w	r3, r3, #32
 8003d22:	2b20      	cmp	r3, #32
 8003d24:	d106      	bne.n	8003d34 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f84b 	bl	8003dca <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d3e:	2b40      	cmp	r3, #64	@ 0x40
 8003d40:	d10d      	bne.n	8003d5e <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d4c:	2b40      	cmp	r3, #64	@ 0x40
 8003d4e:	d106      	bne.n	8003d5e <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2240      	movs	r2, #64	@ 0x40
 8003d56:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f840 	bl	8003dde <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 8003d5e:	bf00      	nop
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b083      	sub	sp, #12
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003e00:	b2db      	uxtb	r3, r3
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
	...

08003e10 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8003e1e:	4b12      	ldr	r3, [pc, #72]	@ (8003e68 <LPTIM_WaitForFlag+0x58>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a12      	ldr	r2, [pc, #72]	@ (8003e6c <LPTIM_WaitForFlag+0x5c>)
 8003e24:	fba2 2303 	umull	r2, r3, r2, r3
 8003e28:	0b9b      	lsrs	r3, r3, #14
 8003e2a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003e2e:	fb02 f303 	mul.w	r3, r2, r3
 8003e32:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d002      	beq.n	8003e5a <LPTIM_WaitForFlag+0x4a>
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1ec      	bne.n	8003e34 <LPTIM_WaitForFlag+0x24>

  return result;
 8003e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	20000000 	.word	0x20000000
 8003e6c:	d1b71759 	.word	0xd1b71759

08003e70 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08c      	sub	sp, #48	@ 0x30
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e7c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e80:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e82:	68fb      	ldr	r3, [r7, #12]
#if defined(LPTIM_RCR_REP)
  uint32_t tmpRCR;
#endif

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003e84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e86:	2301      	movs	r3, #1
 8003e88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	f383 8810 	msr	PRIMASK, r3
}
 8003e90:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a73      	ldr	r2, [pc, #460]	@ (8004064 <LPTIM_Disable+0x1f4>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d003      	beq.n	8003ea4 <LPTIM_Disable+0x34>
 8003e9c:	4a72      	ldr	r2, [pc, #456]	@ (8004068 <LPTIM_Disable+0x1f8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d007      	beq.n	8003eb2 <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8003ea2:	e00d      	b.n	8003ec0 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003ea4:	4b71      	ldr	r3, [pc, #452]	@ (800406c <LPTIM_Disable+0x1fc>)
 8003ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eaa:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8003eb0:	e006      	b.n	8003ec0 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003eb2:	4b6e      	ldr	r3, [pc, #440]	@ (800406c <LPTIM_Disable+0x1fc>)
 8003eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8003ebe:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	61bb      	str	r3, [r7, #24]
  tmpOR = hlptim->Instance->OR;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	617b      	str	r3, [r7, #20]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a5d      	ldr	r2, [pc, #372]	@ (8004064 <LPTIM_Disable+0x1f4>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d003      	beq.n	8003efa <LPTIM_Disable+0x8a>
 8003ef2:	4a5d      	ldr	r2, [pc, #372]	@ (8004068 <LPTIM_Disable+0x1f8>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d00d      	beq.n	8003f14 <LPTIM_Disable+0xa4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8003ef8:	e019      	b.n	8003f2e <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8003efa:	4b5c      	ldr	r3, [pc, #368]	@ (800406c <LPTIM_Disable+0x1fc>)
 8003efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003efe:	4a5b      	ldr	r2, [pc, #364]	@ (800406c <LPTIM_Disable+0x1fc>)
 8003f00:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003f04:	6393      	str	r3, [r2, #56]	@ 0x38
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8003f06:	4b59      	ldr	r3, [pc, #356]	@ (800406c <LPTIM_Disable+0x1fc>)
 8003f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f0a:	4a58      	ldr	r2, [pc, #352]	@ (800406c <LPTIM_Disable+0x1fc>)
 8003f0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f10:	6393      	str	r3, [r2, #56]	@ 0x38
      break;
 8003f12:	e00c      	b.n	8003f2e <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8003f14:	4b55      	ldr	r3, [pc, #340]	@ (800406c <LPTIM_Disable+0x1fc>)
 8003f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f18:	4a54      	ldr	r2, [pc, #336]	@ (800406c <LPTIM_Disable+0x1fc>)
 8003f1a:	f043 0320 	orr.w	r3, r3, #32
 8003f1e:	63d3      	str	r3, [r2, #60]	@ 0x3c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8003f20:	4b52      	ldr	r3, [pc, #328]	@ (800406c <LPTIM_Disable+0x1fc>)
 8003f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f24:	4a51      	ldr	r2, [pc, #324]	@ (800406c <LPTIM_Disable+0x1fc>)
 8003f26:	f023 0320 	bic.w	r3, r3, #32
 8003f2a:	63d3      	str	r3, [r2, #60]	@ 0x3c
      break;
 8003f2c:	bf00      	nop

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d102      	bne.n	8003f3a <LPTIM_Disable+0xca>
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d075      	beq.n	8004026 <LPTIM_Disable+0x1b6>
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a49      	ldr	r2, [pc, #292]	@ (8004064 <LPTIM_Disable+0x1f4>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d003      	beq.n	8003f4c <LPTIM_Disable+0xdc>
 8003f44:	4a48      	ldr	r2, [pc, #288]	@ (8004068 <LPTIM_Disable+0x1f8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d009      	beq.n	8003f5e <LPTIM_Disable+0xee>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8003f4a:	e011      	b.n	8003f70 <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8003f4c:	4b47      	ldr	r3, [pc, #284]	@ (800406c <LPTIM_Disable+0x1fc>)
 8003f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f52:	4a46      	ldr	r2, [pc, #280]	@ (800406c <LPTIM_Disable+0x1fc>)
 8003f54:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8003f58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        break;
 8003f5c:	e008      	b.n	8003f70 <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8003f5e:	4b43      	ldr	r3, [pc, #268]	@ (800406c <LPTIM_Disable+0x1fc>)
 8003f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f64:	4a41      	ldr	r2, [pc, #260]	@ (800406c <LPTIM_Disable+0x1fc>)
 8003f66:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003f6a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        break;
 8003f6e:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d01a      	beq.n	8003fac <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	691a      	ldr	r2, [r3, #16]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 0201 	orr.w	r2, r2, #1
 8003f84:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	69fa      	ldr	r2, [r7, #28]
 8003f8c:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8003f8e:	2108      	movs	r1, #8
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f7ff ff3d 	bl	8003e10 <LPTIM_WaitForFlag>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b03      	cmp	r3, #3
 8003f9a:	d103      	bne.n	8003fa4 <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2203      	movs	r2, #3
 8003fa0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2208      	movs	r2, #8
 8003faa:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d01a      	beq.n	8003fe8 <LPTIM_Disable+0x178>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	691a      	ldr	r2, [r3, #16]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f042 0201 	orr.w	r2, r2, #1
 8003fc0:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8003fca:	2110      	movs	r1, #16
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7ff ff1f 	bl	8003e10 <LPTIM_WaitForFlag>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b03      	cmp	r3, #3
 8003fd6:	d103      	bne.n	8003fe0 <LPTIM_Disable+0x170>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2203      	movs	r2, #3
 8003fdc:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2210      	movs	r2, #16
 8003fe6:	605a      	str	r2, [r3, #4]
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a1d      	ldr	r2, [pc, #116]	@ (8004064 <LPTIM_Disable+0x1f4>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d003      	beq.n	8003ffa <LPTIM_Disable+0x18a>
 8003ff2:	4a1d      	ldr	r2, [pc, #116]	@ (8004068 <LPTIM_Disable+0x1f8>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d00b      	beq.n	8004010 <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8003ff8:	e015      	b.n	8004026 <LPTIM_Disable+0x1b6>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8003ffa:	4b1c      	ldr	r3, [pc, #112]	@ (800406c <LPTIM_Disable+0x1fc>)
 8003ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004000:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004004:	4919      	ldr	r1, [pc, #100]	@ (800406c <LPTIM_Disable+0x1fc>)
 8004006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004008:	4313      	orrs	r3, r2
 800400a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
        break;
 800400e:	e00a      	b.n	8004026 <LPTIM_Disable+0x1b6>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8004010:	4b16      	ldr	r3, [pc, #88]	@ (800406c <LPTIM_Disable+0x1fc>)
 8004012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004016:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800401a:	4914      	ldr	r1, [pc, #80]	@ (800406c <LPTIM_Disable+0x1fc>)
 800401c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800401e:	4313      	orrs	r3, r2
 8004020:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
        break;
 8004024:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	691a      	ldr	r2, [r3, #16]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0201 	bic.w	r2, r2, #1
 8004034:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800403c:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6a3a      	ldr	r2, [r7, #32]
 8004044:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	621a      	str	r2, [r3, #32]
 800404e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004050:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	f383 8810 	msr	PRIMASK, r3
}
 8004058:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800405a:	bf00      	nop
 800405c:	3730      	adds	r7, #48	@ 0x30
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	40007c00 	.word	0x40007c00
 8004068:	40009400 	.word	0x40009400
 800406c:	40021000 	.word	0x40021000

08004070 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004074:	4b04      	ldr	r3, [pc, #16]	@ (8004088 <HAL_PWREx_GetVoltageRange+0x18>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800407c:	4618      	mov	r0, r3
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	40007000 	.word	0x40007000

0800408c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800409a:	d130      	bne.n	80040fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800409c:	4b23      	ldr	r3, [pc, #140]	@ (800412c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80040a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040a8:	d038      	beq.n	800411c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040aa:	4b20      	ldr	r3, [pc, #128]	@ (800412c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80040b2:	4a1e      	ldr	r2, [pc, #120]	@ (800412c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004130 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2232      	movs	r2, #50	@ 0x32
 80040c0:	fb02 f303 	mul.w	r3, r2, r3
 80040c4:	4a1b      	ldr	r2, [pc, #108]	@ (8004134 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80040c6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ca:	0c9b      	lsrs	r3, r3, #18
 80040cc:	3301      	adds	r3, #1
 80040ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040d0:	e002      	b.n	80040d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	3b01      	subs	r3, #1
 80040d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040d8:	4b14      	ldr	r3, [pc, #80]	@ (800412c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040e4:	d102      	bne.n	80040ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1f2      	bne.n	80040d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040ec:	4b0f      	ldr	r3, [pc, #60]	@ (800412c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040f8:	d110      	bne.n	800411c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e00f      	b.n	800411e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80040fe:	4b0b      	ldr	r3, [pc, #44]	@ (800412c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004106:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800410a:	d007      	beq.n	800411c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800410c:	4b07      	ldr	r3, [pc, #28]	@ (800412c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004114:	4a05      	ldr	r2, [pc, #20]	@ (800412c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004116:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800411a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40007000 	.word	0x40007000
 8004130:	20000000 	.word	0x20000000
 8004134:	431bde83 	.word	0x431bde83

08004138 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	4603      	mov	r3, r0
 8004140:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 8004142:	4b11      	ldr	r3, [pc, #68]	@ (8004188 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f023 0307 	bic.w	r3, r3, #7
 800414a:	4a0f      	ldr	r2, [pc, #60]	@ (8004188 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 800414c:	f043 0301 	orr.w	r3, r3, #1
 8004150:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004152:	4b0e      	ldr	r3, [pc, #56]	@ (800418c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	4a0d      	ldr	r2, [pc, #52]	@ (800418c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004158:	f043 0304 	orr.w	r3, r3, #4
 800415c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800415e:	79fb      	ldrb	r3, [r7, #7]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004164:	bf30      	wfi
 8004166:	e002      	b.n	800416e <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004168:	bf40      	sev
    __WFE();
 800416a:	bf20      	wfe
    __WFE();
 800416c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800416e:	4b07      	ldr	r3, [pc, #28]	@ (800418c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	4a06      	ldr	r2, [pc, #24]	@ (800418c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004174:	f023 0304 	bic.w	r3, r3, #4
 8004178:	6113      	str	r3, [r2, #16]
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40007000 	.word	0x40007000
 800418c:	e000ed00 	.word	0xe000ed00

08004190 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	4603      	mov	r3, r0
 8004198:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 800419a:	4b11      	ldr	r3, [pc, #68]	@ (80041e0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f023 0307 	bic.w	r3, r3, #7
 80041a2:	4a0f      	ldr	r2, [pc, #60]	@ (80041e0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80041a4:	f043 0302 	orr.w	r3, r3, #2
 80041a8:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80041aa:	4b0e      	ldr	r3, [pc, #56]	@ (80041e4 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	4a0d      	ldr	r2, [pc, #52]	@ (80041e4 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80041b0:	f043 0304 	orr.w	r3, r3, #4
 80041b4:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80041b6:	79fb      	ldrb	r3, [r7, #7]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d101      	bne.n	80041c0 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80041bc:	bf30      	wfi
 80041be:	e002      	b.n	80041c6 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80041c0:	bf40      	sev
    __WFE();
 80041c2:	bf20      	wfe
    __WFE();
 80041c4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80041c6:	4b07      	ldr	r3, [pc, #28]	@ (80041e4 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	4a06      	ldr	r2, [pc, #24]	@ (80041e4 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80041cc:	f023 0304 	bic.w	r3, r3, #4
 80041d0:	6113      	str	r3, [r2, #16]
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	40007000 	.word	0x40007000
 80041e4:	e000ed00 	.word	0xe000ed00

080041e8 <HAL_RCC_DeInit>:
  *            - Peripheral clock sources
  *            - LSI, LSE and RTC clocks (Backup domain)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Reset to default System clock */
  /* Set MSION bit */
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80041ee:	4b4a      	ldr	r3, [pc, #296]	@ (8004318 <HAL_RCC_DeInit+0x130>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a49      	ldr	r2, [pc, #292]	@ (8004318 <HAL_RCC_DeInit+0x130>)
 80041f4:	f043 0301 	orr.w	r3, r3, #1
 80041f8:	6013      	str	r3, [r2, #0]

  /* Insure MSIRDY bit is set before writing default MSIRANGE value */
  /* Get start tick */
  tickstart = HAL_GetTick();
 80041fa:	f7fe fb77 	bl	80028ec <HAL_GetTick>
 80041fe:	6078      	str	r0, [r7, #4]

  /* Wait till MSI is ready */
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004200:	e008      	b.n	8004214 <HAL_RCC_DeInit+0x2c>
  {
    if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004202:	f7fe fb73 	bl	80028ec <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e07c      	b.n	800430e <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004214:	4b40      	ldr	r3, [pc, #256]	@ (8004318 <HAL_RCC_DeInit+0x130>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d0f0      	beq.n	8004202 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set MSIRANGE default value */
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 8004220:	4b3d      	ldr	r3, [pc, #244]	@ (8004318 <HAL_RCC_DeInit+0x130>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004228:	4a3b      	ldr	r2, [pc, #236]	@ (8004318 <HAL_RCC_DeInit+0x130>)
 800422a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800422e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register (MSI is selected as system clock source) */
  CLEAR_REG(RCC->CFGR);
 8004230:	4b39      	ldr	r3, [pc, #228]	@ (8004318 <HAL_RCC_DeInit+0x130>)
 8004232:	2200      	movs	r2, #0
 8004234:	609a      	str	r2, [r3, #8]

  /* Update the SystemCoreClock global variable for MSI as system clock source */
  SystemCoreClock = MSI_VALUE;
 8004236:	4b39      	ldr	r3, [pc, #228]	@ (800431c <HAL_RCC_DeInit+0x134>)
 8004238:	4a39      	ldr	r2, [pc, #228]	@ (8004320 <HAL_RCC_DeInit+0x138>)
 800423a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 800423c:	4b39      	ldr	r3, [pc, #228]	@ (8004324 <HAL_RCC_DeInit+0x13c>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4618      	mov	r0, r3
 8004242:	f7fe fb03 	bl	800284c <HAL_InitTick>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <HAL_RCC_DeInit+0x68>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e05e      	b.n	800430e <HAL_RCC_DeInit+0x126>
  }

  /* Insure MSI selected as system clock source */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8004250:	f7fe fb4c 	bl	80028ec <HAL_GetTick>
 8004254:	6078      	str	r0, [r7, #4]

  /* Wait till system clock source is ready */
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 8004256:	e00a      	b.n	800426e <HAL_RCC_DeInit+0x86>
  {
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004258:	f7fe fb48 	bl	80028ec <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004266:	4293      	cmp	r3, r2
 8004268:	d901      	bls.n	800426e <HAL_RCC_DeInit+0x86>
    {
      return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e04f      	b.n	800430e <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 800426e:	4b2a      	ldr	r3, [pc, #168]	@ (8004318 <HAL_RCC_DeInit+0x130>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 030c 	and.w	r3, r3, #12
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1ee      	bne.n	8004258 <HAL_RCC_DeInit+0x70>
  }

  /* Reset HSION, HSIKERON, HSIASFS, HSEON, HSECSSON, PLLON, PLLSAIxON bits */
#if defined(RCC_PLLSAI2_SUPPORT)

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON | RCC_CR_PLLSAI2ON);
 800427a:	4b27      	ldr	r3, [pc, #156]	@ (8004318 <HAL_RCC_DeInit+0x130>)
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	4926      	ldr	r1, [pc, #152]	@ (8004318 <HAL_RCC_DeInit+0x130>)
 8004280:	4b29      	ldr	r3, [pc, #164]	@ (8004328 <HAL_RCC_DeInit+0x140>)
 8004282:	4013      	ands	r3, r2
 8004284:	600b      	str	r3, [r1, #0]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Insure PLLRDY, PLLSAI1RDY and PLLSAI2RDY (if present) are reset */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8004286:	f7fe fb31 	bl	80028ec <HAL_GetTick>
 800428a:	6078      	str	r0, [r7, #4]

#if defined(RCC_PLLSAI2_SUPPORT)

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)
 800428c:	e008      	b.n	80042a0 <HAL_RCC_DeInit+0xb8>

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)

#endif
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800428e:	f7fe fb2d 	bl	80028ec <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e036      	b.n	800430e <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)
 80042a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004318 <HAL_RCC_DeInit+0x130>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 5328 	and.w	r3, r3, #704643072	@ 0x2a000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1f0      	bne.n	800428e <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Reset PLLCFGR register */
  CLEAR_REG(RCC->PLLCFGR);
 80042ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004318 <HAL_RCC_DeInit+0x130>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN_4 );
 80042b2:	4b19      	ldr	r3, [pc, #100]	@ (8004318 <HAL_RCC_DeInit+0x130>)
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	4a18      	ldr	r2, [pc, #96]	@ (8004318 <HAL_RCC_DeInit+0x130>)
 80042b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80042bc:	60d3      	str	r3, [r2, #12]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Reset PLLSAI1CFGR register */
  CLEAR_REG(RCC->PLLSAI1CFGR);
 80042be:	4b16      	ldr	r3, [pc, #88]	@ (8004318 <HAL_RCC_DeInit+0x130>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->PLLSAI1CFGR,  RCC_PLLSAI1CFGR_PLLSAI1N_4 );
 80042c4:	4b14      	ldr	r3, [pc, #80]	@ (8004318 <HAL_RCC_DeInit+0x130>)
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	4a13      	ldr	r2, [pc, #76]	@ (8004318 <HAL_RCC_DeInit+0x130>)
 80042ca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80042ce:	6113      	str	r3, [r2, #16]
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(RCC_PLLSAI2_SUPPORT)

  /* Reset PLLSAI2CFGR register */
  CLEAR_REG(RCC->PLLSAI2CFGR);
 80042d0:	4b11      	ldr	r3, [pc, #68]	@ (8004318 <HAL_RCC_DeInit+0x130>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	615a      	str	r2, [r3, #20]
  SET_BIT(RCC->PLLSAI2CFGR,  RCC_PLLSAI2CFGR_PLLSAI2N_4 );
 80042d6:	4b10      	ldr	r3, [pc, #64]	@ (8004318 <HAL_RCC_DeInit+0x130>)
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	4a0f      	ldr	r2, [pc, #60]	@ (8004318 <HAL_RCC_DeInit+0x130>)
 80042dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80042e0:	6153      	str	r3, [r2, #20]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80042e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004318 <HAL_RCC_DeInit+0x130>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a0c      	ldr	r2, [pc, #48]	@ (8004318 <HAL_RCC_DeInit+0x130>)
 80042e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042ec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 80042ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004318 <HAL_RCC_DeInit+0x130>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 80042f4:	4b08      	ldr	r3, [pc, #32]	@ (8004318 <HAL_RCC_DeInit+0x130>)
 80042f6:	f04f 32ff 	mov.w	r2, #4294967295
 80042fa:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80042fc:	4b06      	ldr	r3, [pc, #24]	@ (8004318 <HAL_RCC_DeInit+0x130>)
 80042fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004302:	4a05      	ldr	r2, [pc, #20]	@ (8004318 <HAL_RCC_DeInit+0x130>)
 8004304:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004308:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	40021000 	.word	0x40021000
 800431c:	20000000 	.word	0x20000000
 8004320:	003d0900 	.word	0x003d0900
 8004324:	20000b18 	.word	0x20000b18
 8004328:	eafef4ff 	.word	0xeafef4ff

0800432c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b088      	sub	sp, #32
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e3ca      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800433e:	4b97      	ldr	r3, [pc, #604]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 030c 	and.w	r3, r3, #12
 8004346:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004348:	4b94      	ldr	r3, [pc, #592]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f003 0303 	and.w	r3, r3, #3
 8004350:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0310 	and.w	r3, r3, #16
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 80e4 	beq.w	8004528 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d007      	beq.n	8004376 <HAL_RCC_OscConfig+0x4a>
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	2b0c      	cmp	r3, #12
 800436a:	f040 808b 	bne.w	8004484 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2b01      	cmp	r3, #1
 8004372:	f040 8087 	bne.w	8004484 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004376:	4b89      	ldr	r3, [pc, #548]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d005      	beq.n	800438e <HAL_RCC_OscConfig+0x62>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e3a2      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1a      	ldr	r2, [r3, #32]
 8004392:	4b82      	ldr	r3, [pc, #520]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0308 	and.w	r3, r3, #8
 800439a:	2b00      	cmp	r3, #0
 800439c:	d004      	beq.n	80043a8 <HAL_RCC_OscConfig+0x7c>
 800439e:	4b7f      	ldr	r3, [pc, #508]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043a6:	e005      	b.n	80043b4 <HAL_RCC_OscConfig+0x88>
 80043a8:	4b7c      	ldr	r3, [pc, #496]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 80043aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043ae:	091b      	lsrs	r3, r3, #4
 80043b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d223      	bcs.n	8004400 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 fd55 	bl	8004e6c <RCC_SetFlashLatencyFromMSIRange>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e383      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043cc:	4b73      	ldr	r3, [pc, #460]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a72      	ldr	r2, [pc, #456]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 80043d2:	f043 0308 	orr.w	r3, r3, #8
 80043d6:	6013      	str	r3, [r2, #0]
 80043d8:	4b70      	ldr	r3, [pc, #448]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	496d      	ldr	r1, [pc, #436]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043ea:	4b6c      	ldr	r3, [pc, #432]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	021b      	lsls	r3, r3, #8
 80043f8:	4968      	ldr	r1, [pc, #416]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	604b      	str	r3, [r1, #4]
 80043fe:	e025      	b.n	800444c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004400:	4b66      	ldr	r3, [pc, #408]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a65      	ldr	r2, [pc, #404]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 8004406:	f043 0308 	orr.w	r3, r3, #8
 800440a:	6013      	str	r3, [r2, #0]
 800440c:	4b63      	ldr	r3, [pc, #396]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	4960      	ldr	r1, [pc, #384]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 800441a:	4313      	orrs	r3, r2
 800441c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800441e:	4b5f      	ldr	r3, [pc, #380]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	021b      	lsls	r3, r3, #8
 800442c:	495b      	ldr	r1, [pc, #364]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 800442e:	4313      	orrs	r3, r2
 8004430:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d109      	bne.n	800444c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	4618      	mov	r0, r3
 800443e:	f000 fd15 	bl	8004e6c <RCC_SetFlashLatencyFromMSIRange>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e343      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800444c:	f000 fc4a 	bl	8004ce4 <HAL_RCC_GetSysClockFreq>
 8004450:	4602      	mov	r2, r0
 8004452:	4b52      	ldr	r3, [pc, #328]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	091b      	lsrs	r3, r3, #4
 8004458:	f003 030f 	and.w	r3, r3, #15
 800445c:	4950      	ldr	r1, [pc, #320]	@ (80045a0 <HAL_RCC_OscConfig+0x274>)
 800445e:	5ccb      	ldrb	r3, [r1, r3]
 8004460:	f003 031f 	and.w	r3, r3, #31
 8004464:	fa22 f303 	lsr.w	r3, r2, r3
 8004468:	4a4e      	ldr	r2, [pc, #312]	@ (80045a4 <HAL_RCC_OscConfig+0x278>)
 800446a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800446c:	4b4e      	ldr	r3, [pc, #312]	@ (80045a8 <HAL_RCC_OscConfig+0x27c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4618      	mov	r0, r3
 8004472:	f7fe f9eb 	bl	800284c <HAL_InitTick>
 8004476:	4603      	mov	r3, r0
 8004478:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800447a:	7bfb      	ldrb	r3, [r7, #15]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d052      	beq.n	8004526 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004480:	7bfb      	ldrb	r3, [r7, #15]
 8004482:	e327      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d032      	beq.n	80044f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800448c:	4b43      	ldr	r3, [pc, #268]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a42      	ldr	r2, [pc, #264]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 8004492:	f043 0301 	orr.w	r3, r3, #1
 8004496:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004498:	f7fe fa28 	bl	80028ec <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044a0:	f7fe fa24 	bl	80028ec <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e310      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044b2:	4b3a      	ldr	r3, [pc, #232]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0f0      	beq.n	80044a0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044be:	4b37      	ldr	r3, [pc, #220]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a36      	ldr	r2, [pc, #216]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 80044c4:	f043 0308 	orr.w	r3, r3, #8
 80044c8:	6013      	str	r3, [r2, #0]
 80044ca:	4b34      	ldr	r3, [pc, #208]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	4931      	ldr	r1, [pc, #196]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044dc:	4b2f      	ldr	r3, [pc, #188]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	021b      	lsls	r3, r3, #8
 80044ea:	492c      	ldr	r1, [pc, #176]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	604b      	str	r3, [r1, #4]
 80044f0:	e01a      	b.n	8004528 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80044f2:	4b2a      	ldr	r3, [pc, #168]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a29      	ldr	r2, [pc, #164]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 80044f8:	f023 0301 	bic.w	r3, r3, #1
 80044fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044fe:	f7fe f9f5 	bl	80028ec <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004506:	f7fe f9f1 	bl	80028ec <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e2dd      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004518:	4b20      	ldr	r3, [pc, #128]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1f0      	bne.n	8004506 <HAL_RCC_OscConfig+0x1da>
 8004524:	e000      	b.n	8004528 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004526:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	d074      	beq.n	800461e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	2b08      	cmp	r3, #8
 8004538:	d005      	beq.n	8004546 <HAL_RCC_OscConfig+0x21a>
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	2b0c      	cmp	r3, #12
 800453e:	d10e      	bne.n	800455e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	2b03      	cmp	r3, #3
 8004544:	d10b      	bne.n	800455e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004546:	4b15      	ldr	r3, [pc, #84]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d064      	beq.n	800461c <HAL_RCC_OscConfig+0x2f0>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d160      	bne.n	800461c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e2ba      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004566:	d106      	bne.n	8004576 <HAL_RCC_OscConfig+0x24a>
 8004568:	4b0c      	ldr	r3, [pc, #48]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a0b      	ldr	r2, [pc, #44]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 800456e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004572:	6013      	str	r3, [r2, #0]
 8004574:	e026      	b.n	80045c4 <HAL_RCC_OscConfig+0x298>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800457e:	d115      	bne.n	80045ac <HAL_RCC_OscConfig+0x280>
 8004580:	4b06      	ldr	r3, [pc, #24]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a05      	ldr	r2, [pc, #20]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 8004586:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800458a:	6013      	str	r3, [r2, #0]
 800458c:	4b03      	ldr	r3, [pc, #12]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a02      	ldr	r2, [pc, #8]	@ (800459c <HAL_RCC_OscConfig+0x270>)
 8004592:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004596:	6013      	str	r3, [r2, #0]
 8004598:	e014      	b.n	80045c4 <HAL_RCC_OscConfig+0x298>
 800459a:	bf00      	nop
 800459c:	40021000 	.word	0x40021000
 80045a0:	0800a758 	.word	0x0800a758
 80045a4:	20000000 	.word	0x20000000
 80045a8:	20000b18 	.word	0x20000b18
 80045ac:	4ba0      	ldr	r3, [pc, #640]	@ (8004830 <HAL_RCC_OscConfig+0x504>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a9f      	ldr	r2, [pc, #636]	@ (8004830 <HAL_RCC_OscConfig+0x504>)
 80045b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045b6:	6013      	str	r3, [r2, #0]
 80045b8:	4b9d      	ldr	r3, [pc, #628]	@ (8004830 <HAL_RCC_OscConfig+0x504>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a9c      	ldr	r2, [pc, #624]	@ (8004830 <HAL_RCC_OscConfig+0x504>)
 80045be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d013      	beq.n	80045f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045cc:	f7fe f98e 	bl	80028ec <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045d4:	f7fe f98a 	bl	80028ec <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b64      	cmp	r3, #100	@ 0x64
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e276      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045e6:	4b92      	ldr	r3, [pc, #584]	@ (8004830 <HAL_RCC_OscConfig+0x504>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0f0      	beq.n	80045d4 <HAL_RCC_OscConfig+0x2a8>
 80045f2:	e014      	b.n	800461e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f4:	f7fe f97a 	bl	80028ec <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045fc:	f7fe f976 	bl	80028ec <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b64      	cmp	r3, #100	@ 0x64
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e262      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800460e:	4b88      	ldr	r3, [pc, #544]	@ (8004830 <HAL_RCC_OscConfig+0x504>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f0      	bne.n	80045fc <HAL_RCC_OscConfig+0x2d0>
 800461a:	e000      	b.n	800461e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800461c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d060      	beq.n	80046ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	2b04      	cmp	r3, #4
 800462e:	d005      	beq.n	800463c <HAL_RCC_OscConfig+0x310>
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	2b0c      	cmp	r3, #12
 8004634:	d119      	bne.n	800466a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2b02      	cmp	r3, #2
 800463a:	d116      	bne.n	800466a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800463c:	4b7c      	ldr	r3, [pc, #496]	@ (8004830 <HAL_RCC_OscConfig+0x504>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004644:	2b00      	cmp	r3, #0
 8004646:	d005      	beq.n	8004654 <HAL_RCC_OscConfig+0x328>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e23f      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004654:	4b76      	ldr	r3, [pc, #472]	@ (8004830 <HAL_RCC_OscConfig+0x504>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	061b      	lsls	r3, r3, #24
 8004662:	4973      	ldr	r1, [pc, #460]	@ (8004830 <HAL_RCC_OscConfig+0x504>)
 8004664:	4313      	orrs	r3, r2
 8004666:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004668:	e040      	b.n	80046ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d023      	beq.n	80046ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004672:	4b6f      	ldr	r3, [pc, #444]	@ (8004830 <HAL_RCC_OscConfig+0x504>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a6e      	ldr	r2, [pc, #440]	@ (8004830 <HAL_RCC_OscConfig+0x504>)
 8004678:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800467c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467e:	f7fe f935 	bl	80028ec <HAL_GetTick>
 8004682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004684:	e008      	b.n	8004698 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004686:	f7fe f931 	bl	80028ec <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d901      	bls.n	8004698 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e21d      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004698:	4b65      	ldr	r3, [pc, #404]	@ (8004830 <HAL_RCC_OscConfig+0x504>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0f0      	beq.n	8004686 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046a4:	4b62      	ldr	r3, [pc, #392]	@ (8004830 <HAL_RCC_OscConfig+0x504>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	061b      	lsls	r3, r3, #24
 80046b2:	495f      	ldr	r1, [pc, #380]	@ (8004830 <HAL_RCC_OscConfig+0x504>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	604b      	str	r3, [r1, #4]
 80046b8:	e018      	b.n	80046ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046ba:	4b5d      	ldr	r3, [pc, #372]	@ (8004830 <HAL_RCC_OscConfig+0x504>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a5c      	ldr	r2, [pc, #368]	@ (8004830 <HAL_RCC_OscConfig+0x504>)
 80046c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c6:	f7fe f911 	bl	80028ec <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046cc:	e008      	b.n	80046e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046ce:	f7fe f90d 	bl	80028ec <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e1f9      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046e0:	4b53      	ldr	r3, [pc, #332]	@ (8004830 <HAL_RCC_OscConfig+0x504>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1f0      	bne.n	80046ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0308 	and.w	r3, r3, #8
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d03c      	beq.n	8004772 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01c      	beq.n	800473a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004700:	4b4b      	ldr	r3, [pc, #300]	@ (8004830 <HAL_RCC_OscConfig+0x504>)
 8004702:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004706:	4a4a      	ldr	r2, [pc, #296]	@ (8004830 <HAL_RCC_OscConfig+0x504>)
 8004708:	f043 0301 	orr.w	r3, r3, #1
 800470c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004710:	f7fe f8ec 	bl	80028ec <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004718:	f7fe f8e8 	bl	80028ec <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e1d4      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800472a:	4b41      	ldr	r3, [pc, #260]	@ (8004830 <HAL_RCC_OscConfig+0x504>)
 800472c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d0ef      	beq.n	8004718 <HAL_RCC_OscConfig+0x3ec>
 8004738:	e01b      	b.n	8004772 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800473a:	4b3d      	ldr	r3, [pc, #244]	@ (8004830 <HAL_RCC_OscConfig+0x504>)
 800473c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004740:	4a3b      	ldr	r2, [pc, #236]	@ (8004830 <HAL_RCC_OscConfig+0x504>)
 8004742:	f023 0301 	bic.w	r3, r3, #1
 8004746:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800474a:	f7fe f8cf 	bl	80028ec <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004752:	f7fe f8cb 	bl	80028ec <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e1b7      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004764:	4b32      	ldr	r3, [pc, #200]	@ (8004830 <HAL_RCC_OscConfig+0x504>)
 8004766:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1ef      	bne.n	8004752 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0304 	and.w	r3, r3, #4
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 80a6 	beq.w	80048cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004780:	2300      	movs	r3, #0
 8004782:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004784:	4b2a      	ldr	r3, [pc, #168]	@ (8004830 <HAL_RCC_OscConfig+0x504>)
 8004786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004788:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10d      	bne.n	80047ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004790:	4b27      	ldr	r3, [pc, #156]	@ (8004830 <HAL_RCC_OscConfig+0x504>)
 8004792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004794:	4a26      	ldr	r2, [pc, #152]	@ (8004830 <HAL_RCC_OscConfig+0x504>)
 8004796:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800479a:	6593      	str	r3, [r2, #88]	@ 0x58
 800479c:	4b24      	ldr	r3, [pc, #144]	@ (8004830 <HAL_RCC_OscConfig+0x504>)
 800479e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047a4:	60bb      	str	r3, [r7, #8]
 80047a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047a8:	2301      	movs	r3, #1
 80047aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ac:	4b21      	ldr	r3, [pc, #132]	@ (8004834 <HAL_RCC_OscConfig+0x508>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d118      	bne.n	80047ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047b8:	4b1e      	ldr	r3, [pc, #120]	@ (8004834 <HAL_RCC_OscConfig+0x508>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004834 <HAL_RCC_OscConfig+0x508>)
 80047be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047c4:	f7fe f892 	bl	80028ec <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047cc:	f7fe f88e 	bl	80028ec <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e17a      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047de:	4b15      	ldr	r3, [pc, #84]	@ (8004834 <HAL_RCC_OscConfig+0x508>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0f0      	beq.n	80047cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d108      	bne.n	8004804 <HAL_RCC_OscConfig+0x4d8>
 80047f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004830 <HAL_RCC_OscConfig+0x504>)
 80047f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f8:	4a0d      	ldr	r2, [pc, #52]	@ (8004830 <HAL_RCC_OscConfig+0x504>)
 80047fa:	f043 0301 	orr.w	r3, r3, #1
 80047fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004802:	e029      	b.n	8004858 <HAL_RCC_OscConfig+0x52c>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	2b05      	cmp	r3, #5
 800480a:	d115      	bne.n	8004838 <HAL_RCC_OscConfig+0x50c>
 800480c:	4b08      	ldr	r3, [pc, #32]	@ (8004830 <HAL_RCC_OscConfig+0x504>)
 800480e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004812:	4a07      	ldr	r2, [pc, #28]	@ (8004830 <HAL_RCC_OscConfig+0x504>)
 8004814:	f043 0304 	orr.w	r3, r3, #4
 8004818:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800481c:	4b04      	ldr	r3, [pc, #16]	@ (8004830 <HAL_RCC_OscConfig+0x504>)
 800481e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004822:	4a03      	ldr	r2, [pc, #12]	@ (8004830 <HAL_RCC_OscConfig+0x504>)
 8004824:	f043 0301 	orr.w	r3, r3, #1
 8004828:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800482c:	e014      	b.n	8004858 <HAL_RCC_OscConfig+0x52c>
 800482e:	bf00      	nop
 8004830:	40021000 	.word	0x40021000
 8004834:	40007000 	.word	0x40007000
 8004838:	4b9c      	ldr	r3, [pc, #624]	@ (8004aac <HAL_RCC_OscConfig+0x780>)
 800483a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800483e:	4a9b      	ldr	r2, [pc, #620]	@ (8004aac <HAL_RCC_OscConfig+0x780>)
 8004840:	f023 0301 	bic.w	r3, r3, #1
 8004844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004848:	4b98      	ldr	r3, [pc, #608]	@ (8004aac <HAL_RCC_OscConfig+0x780>)
 800484a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800484e:	4a97      	ldr	r2, [pc, #604]	@ (8004aac <HAL_RCC_OscConfig+0x780>)
 8004850:	f023 0304 	bic.w	r3, r3, #4
 8004854:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d016      	beq.n	800488e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004860:	f7fe f844 	bl	80028ec <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004866:	e00a      	b.n	800487e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004868:	f7fe f840 	bl	80028ec <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004876:	4293      	cmp	r3, r2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e12a      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800487e:	4b8b      	ldr	r3, [pc, #556]	@ (8004aac <HAL_RCC_OscConfig+0x780>)
 8004880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0ed      	beq.n	8004868 <HAL_RCC_OscConfig+0x53c>
 800488c:	e015      	b.n	80048ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800488e:	f7fe f82d 	bl	80028ec <HAL_GetTick>
 8004892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004894:	e00a      	b.n	80048ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004896:	f7fe f829 	bl	80028ec <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e113      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048ac:	4b7f      	ldr	r3, [pc, #508]	@ (8004aac <HAL_RCC_OscConfig+0x780>)
 80048ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1ed      	bne.n	8004896 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048ba:	7ffb      	ldrb	r3, [r7, #31]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d105      	bne.n	80048cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048c0:	4b7a      	ldr	r3, [pc, #488]	@ (8004aac <HAL_RCC_OscConfig+0x780>)
 80048c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c4:	4a79      	ldr	r2, [pc, #484]	@ (8004aac <HAL_RCC_OscConfig+0x780>)
 80048c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048ca:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 80fe 	beq.w	8004ad2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048da:	2b02      	cmp	r3, #2
 80048dc:	f040 80d0 	bne.w	8004a80 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80048e0:	4b72      	ldr	r3, [pc, #456]	@ (8004aac <HAL_RCC_OscConfig+0x780>)
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f003 0203 	and.w	r2, r3, #3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d130      	bne.n	8004956 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048fe:	3b01      	subs	r3, #1
 8004900:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004902:	429a      	cmp	r2, r3
 8004904:	d127      	bne.n	8004956 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004910:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004912:	429a      	cmp	r2, r3
 8004914:	d11f      	bne.n	8004956 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004920:	2a07      	cmp	r2, #7
 8004922:	bf14      	ite	ne
 8004924:	2201      	movne	r2, #1
 8004926:	2200      	moveq	r2, #0
 8004928:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800492a:	4293      	cmp	r3, r2
 800492c:	d113      	bne.n	8004956 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004938:	085b      	lsrs	r3, r3, #1
 800493a:	3b01      	subs	r3, #1
 800493c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800493e:	429a      	cmp	r2, r3
 8004940:	d109      	bne.n	8004956 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494c:	085b      	lsrs	r3, r3, #1
 800494e:	3b01      	subs	r3, #1
 8004950:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004952:	429a      	cmp	r2, r3
 8004954:	d06e      	beq.n	8004a34 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	2b0c      	cmp	r3, #12
 800495a:	d069      	beq.n	8004a30 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800495c:	4b53      	ldr	r3, [pc, #332]	@ (8004aac <HAL_RCC_OscConfig+0x780>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d105      	bne.n	8004974 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004968:	4b50      	ldr	r3, [pc, #320]	@ (8004aac <HAL_RCC_OscConfig+0x780>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d001      	beq.n	8004978 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e0ad      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004978:	4b4c      	ldr	r3, [pc, #304]	@ (8004aac <HAL_RCC_OscConfig+0x780>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a4b      	ldr	r2, [pc, #300]	@ (8004aac <HAL_RCC_OscConfig+0x780>)
 800497e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004982:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004984:	f7fd ffb2 	bl	80028ec <HAL_GetTick>
 8004988:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800498a:	e008      	b.n	800499e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800498c:	f7fd ffae 	bl	80028ec <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b02      	cmp	r3, #2
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e09a      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800499e:	4b43      	ldr	r3, [pc, #268]	@ (8004aac <HAL_RCC_OscConfig+0x780>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1f0      	bne.n	800498c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049aa:	4b40      	ldr	r3, [pc, #256]	@ (8004aac <HAL_RCC_OscConfig+0x780>)
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	4b40      	ldr	r3, [pc, #256]	@ (8004ab0 <HAL_RCC_OscConfig+0x784>)
 80049b0:	4013      	ands	r3, r2
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80049ba:	3a01      	subs	r2, #1
 80049bc:	0112      	lsls	r2, r2, #4
 80049be:	4311      	orrs	r1, r2
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80049c4:	0212      	lsls	r2, r2, #8
 80049c6:	4311      	orrs	r1, r2
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80049cc:	0852      	lsrs	r2, r2, #1
 80049ce:	3a01      	subs	r2, #1
 80049d0:	0552      	lsls	r2, r2, #21
 80049d2:	4311      	orrs	r1, r2
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80049d8:	0852      	lsrs	r2, r2, #1
 80049da:	3a01      	subs	r2, #1
 80049dc:	0652      	lsls	r2, r2, #25
 80049de:	4311      	orrs	r1, r2
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80049e4:	0912      	lsrs	r2, r2, #4
 80049e6:	0452      	lsls	r2, r2, #17
 80049e8:	430a      	orrs	r2, r1
 80049ea:	4930      	ldr	r1, [pc, #192]	@ (8004aac <HAL_RCC_OscConfig+0x780>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80049f0:	4b2e      	ldr	r3, [pc, #184]	@ (8004aac <HAL_RCC_OscConfig+0x780>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a2d      	ldr	r2, [pc, #180]	@ (8004aac <HAL_RCC_OscConfig+0x780>)
 80049f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049fc:	4b2b      	ldr	r3, [pc, #172]	@ (8004aac <HAL_RCC_OscConfig+0x780>)
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	4a2a      	ldr	r2, [pc, #168]	@ (8004aac <HAL_RCC_OscConfig+0x780>)
 8004a02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a08:	f7fd ff70 	bl	80028ec <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a10:	f7fd ff6c 	bl	80028ec <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e058      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a22:	4b22      	ldr	r3, [pc, #136]	@ (8004aac <HAL_RCC_OscConfig+0x780>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d0f0      	beq.n	8004a10 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a2e:	e050      	b.n	8004ad2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e04f      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a34:	4b1d      	ldr	r3, [pc, #116]	@ (8004aac <HAL_RCC_OscConfig+0x780>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d148      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a40:	4b1a      	ldr	r3, [pc, #104]	@ (8004aac <HAL_RCC_OscConfig+0x780>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a19      	ldr	r2, [pc, #100]	@ (8004aac <HAL_RCC_OscConfig+0x780>)
 8004a46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a4c:	4b17      	ldr	r3, [pc, #92]	@ (8004aac <HAL_RCC_OscConfig+0x780>)
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	4a16      	ldr	r2, [pc, #88]	@ (8004aac <HAL_RCC_OscConfig+0x780>)
 8004a52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a58:	f7fd ff48 	bl	80028ec <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a60:	f7fd ff44 	bl	80028ec <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e030      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a72:	4b0e      	ldr	r3, [pc, #56]	@ (8004aac <HAL_RCC_OscConfig+0x780>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0f0      	beq.n	8004a60 <HAL_RCC_OscConfig+0x734>
 8004a7e:	e028      	b.n	8004ad2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	2b0c      	cmp	r3, #12
 8004a84:	d023      	beq.n	8004ace <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a86:	4b09      	ldr	r3, [pc, #36]	@ (8004aac <HAL_RCC_OscConfig+0x780>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a08      	ldr	r2, [pc, #32]	@ (8004aac <HAL_RCC_OscConfig+0x780>)
 8004a8c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a92:	f7fd ff2b 	bl	80028ec <HAL_GetTick>
 8004a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a98:	e00c      	b.n	8004ab4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a9a:	f7fd ff27 	bl	80028ec <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d905      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e013      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a8>
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ab4:	4b09      	ldr	r3, [pc, #36]	@ (8004adc <HAL_RCC_OscConfig+0x7b0>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1ec      	bne.n	8004a9a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004ac0:	4b06      	ldr	r3, [pc, #24]	@ (8004adc <HAL_RCC_OscConfig+0x7b0>)
 8004ac2:	68da      	ldr	r2, [r3, #12]
 8004ac4:	4905      	ldr	r1, [pc, #20]	@ (8004adc <HAL_RCC_OscConfig+0x7b0>)
 8004ac6:	4b06      	ldr	r3, [pc, #24]	@ (8004ae0 <HAL_RCC_OscConfig+0x7b4>)
 8004ac8:	4013      	ands	r3, r2
 8004aca:	60cb      	str	r3, [r1, #12]
 8004acc:	e001      	b.n	8004ad2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e000      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3720      	adds	r7, #32
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	feeefffc 	.word	0xfeeefffc

08004ae4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e0e7      	b.n	8004cc8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004af8:	4b75      	ldr	r3, [pc, #468]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1ec>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d910      	bls.n	8004b28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b06:	4b72      	ldr	r3, [pc, #456]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1ec>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f023 0207 	bic.w	r2, r3, #7
 8004b0e:	4970      	ldr	r1, [pc, #448]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1ec>)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b16:	4b6e      	ldr	r3, [pc, #440]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1ec>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d001      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e0cf      	b.n	8004cc8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d010      	beq.n	8004b56 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	4b66      	ldr	r3, [pc, #408]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d908      	bls.n	8004b56 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b44:	4b63      	ldr	r3, [pc, #396]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	4960      	ldr	r1, [pc, #384]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d04c      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2b03      	cmp	r3, #3
 8004b68:	d107      	bne.n	8004b7a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b6a:	4b5a      	ldr	r3, [pc, #360]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d121      	bne.n	8004bba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e0a6      	b.n	8004cc8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d107      	bne.n	8004b92 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b82:	4b54      	ldr	r3, [pc, #336]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d115      	bne.n	8004bba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e09a      	b.n	8004cc8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d107      	bne.n	8004baa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b9a:	4b4e      	ldr	r3, [pc, #312]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d109      	bne.n	8004bba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e08e      	b.n	8004cc8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004baa:	4b4a      	ldr	r3, [pc, #296]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e086      	b.n	8004cc8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bba:	4b46      	ldr	r3, [pc, #280]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f023 0203 	bic.w	r2, r3, #3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	4943      	ldr	r1, [pc, #268]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bcc:	f7fd fe8e 	bl	80028ec <HAL_GetTick>
 8004bd0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bd2:	e00a      	b.n	8004bea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bd4:	f7fd fe8a 	bl	80028ec <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e06e      	b.n	8004cc8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bea:	4b3a      	ldr	r3, [pc, #232]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f003 020c 	and.w	r2, r3, #12
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d1eb      	bne.n	8004bd4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d010      	beq.n	8004c2a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	4b31      	ldr	r3, [pc, #196]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d208      	bcs.n	8004c2a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c18:	4b2e      	ldr	r3, [pc, #184]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	492b      	ldr	r1, [pc, #172]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c2a:	4b29      	ldr	r3, [pc, #164]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1ec>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0307 	and.w	r3, r3, #7
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d210      	bcs.n	8004c5a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c38:	4b25      	ldr	r3, [pc, #148]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1ec>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f023 0207 	bic.w	r2, r3, #7
 8004c40:	4923      	ldr	r1, [pc, #140]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1ec>)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c48:	4b21      	ldr	r3, [pc, #132]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1ec>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0307 	and.w	r3, r3, #7
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d001      	beq.n	8004c5a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e036      	b.n	8004cc8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0304 	and.w	r3, r3, #4
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d008      	beq.n	8004c78 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c66:	4b1b      	ldr	r3, [pc, #108]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	4918      	ldr	r1, [pc, #96]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0308 	and.w	r3, r3, #8
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d009      	beq.n	8004c98 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c84:	4b13      	ldr	r3, [pc, #76]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	4910      	ldr	r1, [pc, #64]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c98:	f000 f824 	bl	8004ce4 <HAL_RCC_GetSysClockFreq>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	091b      	lsrs	r3, r3, #4
 8004ca4:	f003 030f 	and.w	r3, r3, #15
 8004ca8:	490b      	ldr	r1, [pc, #44]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1f4>)
 8004caa:	5ccb      	ldrb	r3, [r1, r3]
 8004cac:	f003 031f 	and.w	r3, r3, #31
 8004cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb4:	4a09      	ldr	r2, [pc, #36]	@ (8004cdc <HAL_RCC_ClockConfig+0x1f8>)
 8004cb6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004cb8:	4b09      	ldr	r3, [pc, #36]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1fc>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7fd fdc5 	bl	800284c <HAL_InitTick>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	72fb      	strb	r3, [r7, #11]

  return status;
 8004cc6:	7afb      	ldrb	r3, [r7, #11]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	40022000 	.word	0x40022000
 8004cd4:	40021000 	.word	0x40021000
 8004cd8:	0800a758 	.word	0x0800a758
 8004cdc:	20000000 	.word	0x20000000
 8004ce0:	20000b18 	.word	0x20000b18

08004ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b089      	sub	sp, #36	@ 0x24
 8004ce8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004cea:	2300      	movs	r3, #0
 8004cec:	61fb      	str	r3, [r7, #28]
 8004cee:	2300      	movs	r3, #0
 8004cf0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cf2:	4b3e      	ldr	r3, [pc, #248]	@ (8004dec <HAL_RCC_GetSysClockFreq+0x108>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f003 030c 	and.w	r3, r3, #12
 8004cfa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cfc:	4b3b      	ldr	r3, [pc, #236]	@ (8004dec <HAL_RCC_GetSysClockFreq+0x108>)
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f003 0303 	and.w	r3, r3, #3
 8004d04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d005      	beq.n	8004d18 <HAL_RCC_GetSysClockFreq+0x34>
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	2b0c      	cmp	r3, #12
 8004d10:	d121      	bne.n	8004d56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d11e      	bne.n	8004d56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d18:	4b34      	ldr	r3, [pc, #208]	@ (8004dec <HAL_RCC_GetSysClockFreq+0x108>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0308 	and.w	r3, r3, #8
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d107      	bne.n	8004d34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d24:	4b31      	ldr	r3, [pc, #196]	@ (8004dec <HAL_RCC_GetSysClockFreq+0x108>)
 8004d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d2a:	0a1b      	lsrs	r3, r3, #8
 8004d2c:	f003 030f 	and.w	r3, r3, #15
 8004d30:	61fb      	str	r3, [r7, #28]
 8004d32:	e005      	b.n	8004d40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d34:	4b2d      	ldr	r3, [pc, #180]	@ (8004dec <HAL_RCC_GetSysClockFreq+0x108>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	091b      	lsrs	r3, r3, #4
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d40:	4a2b      	ldr	r2, [pc, #172]	@ (8004df0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10d      	bne.n	8004d6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d54:	e00a      	b.n	8004d6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	2b04      	cmp	r3, #4
 8004d5a:	d102      	bne.n	8004d62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d5c:	4b25      	ldr	r3, [pc, #148]	@ (8004df4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d5e:	61bb      	str	r3, [r7, #24]
 8004d60:	e004      	b.n	8004d6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	2b08      	cmp	r3, #8
 8004d66:	d101      	bne.n	8004d6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d68:	4b23      	ldr	r3, [pc, #140]	@ (8004df8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	2b0c      	cmp	r3, #12
 8004d70:	d134      	bne.n	8004ddc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d72:	4b1e      	ldr	r3, [pc, #120]	@ (8004dec <HAL_RCC_GetSysClockFreq+0x108>)
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d003      	beq.n	8004d8a <HAL_RCC_GetSysClockFreq+0xa6>
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	2b03      	cmp	r3, #3
 8004d86:	d003      	beq.n	8004d90 <HAL_RCC_GetSysClockFreq+0xac>
 8004d88:	e005      	b.n	8004d96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8004df4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d8c:	617b      	str	r3, [r7, #20]
      break;
 8004d8e:	e005      	b.n	8004d9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d90:	4b19      	ldr	r3, [pc, #100]	@ (8004df8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d92:	617b      	str	r3, [r7, #20]
      break;
 8004d94:	e002      	b.n	8004d9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	617b      	str	r3, [r7, #20]
      break;
 8004d9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d9c:	4b13      	ldr	r3, [pc, #76]	@ (8004dec <HAL_RCC_GetSysClockFreq+0x108>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	091b      	lsrs	r3, r3, #4
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	3301      	adds	r3, #1
 8004da8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004daa:	4b10      	ldr	r3, [pc, #64]	@ (8004dec <HAL_RCC_GetSysClockFreq+0x108>)
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	0a1b      	lsrs	r3, r3, #8
 8004db0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	fb03 f202 	mul.w	r2, r3, r2
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8004dec <HAL_RCC_GetSysClockFreq+0x108>)
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	0e5b      	lsrs	r3, r3, #25
 8004dc8:	f003 0303 	and.w	r3, r3, #3
 8004dcc:	3301      	adds	r3, #1
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004ddc:	69bb      	ldr	r3, [r7, #24]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3724      	adds	r7, #36	@ 0x24
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	40021000 	.word	0x40021000
 8004df0:	0800a770 	.word	0x0800a770
 8004df4:	00f42400 	.word	0x00f42400
 8004df8:	007a1200 	.word	0x007a1200

08004dfc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e00:	4b03      	ldr	r3, [pc, #12]	@ (8004e10 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e02:	681b      	ldr	r3, [r3, #0]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	20000000 	.word	0x20000000

08004e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e18:	f7ff fff0 	bl	8004dfc <HAL_RCC_GetHCLKFreq>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	4b06      	ldr	r3, [pc, #24]	@ (8004e38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	0a1b      	lsrs	r3, r3, #8
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	4904      	ldr	r1, [pc, #16]	@ (8004e3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e2a:	5ccb      	ldrb	r3, [r1, r3]
 8004e2c:	f003 031f 	and.w	r3, r3, #31
 8004e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	40021000 	.word	0x40021000
 8004e3c:	0800a768 	.word	0x0800a768

08004e40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e44:	f7ff ffda 	bl	8004dfc <HAL_RCC_GetHCLKFreq>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	4b06      	ldr	r3, [pc, #24]	@ (8004e64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	0adb      	lsrs	r3, r3, #11
 8004e50:	f003 0307 	and.w	r3, r3, #7
 8004e54:	4904      	ldr	r1, [pc, #16]	@ (8004e68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e56:	5ccb      	ldrb	r3, [r1, r3]
 8004e58:	f003 031f 	and.w	r3, r3, #31
 8004e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	40021000 	.word	0x40021000
 8004e68:	0800a768 	.word	0x0800a768

08004e6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e74:	2300      	movs	r3, #0
 8004e76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e78:	4b2a      	ldr	r3, [pc, #168]	@ (8004f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d003      	beq.n	8004e8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e84:	f7ff f8f4 	bl	8004070 <HAL_PWREx_GetVoltageRange>
 8004e88:	6178      	str	r0, [r7, #20]
 8004e8a:	e014      	b.n	8004eb6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e8c:	4b25      	ldr	r3, [pc, #148]	@ (8004f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e90:	4a24      	ldr	r2, [pc, #144]	@ (8004f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e96:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e98:	4b22      	ldr	r3, [pc, #136]	@ (8004f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ea0:	60fb      	str	r3, [r7, #12]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ea4:	f7ff f8e4 	bl	8004070 <HAL_PWREx_GetVoltageRange>
 8004ea8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8004f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eae:	4a1d      	ldr	r2, [pc, #116]	@ (8004f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eb4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ebc:	d10b      	bne.n	8004ed6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b80      	cmp	r3, #128	@ 0x80
 8004ec2:	d919      	bls.n	8004ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2ba0      	cmp	r3, #160	@ 0xa0
 8004ec8:	d902      	bls.n	8004ed0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004eca:	2302      	movs	r3, #2
 8004ecc:	613b      	str	r3, [r7, #16]
 8004ece:	e013      	b.n	8004ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	613b      	str	r3, [r7, #16]
 8004ed4:	e010      	b.n	8004ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b80      	cmp	r3, #128	@ 0x80
 8004eda:	d902      	bls.n	8004ee2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004edc:	2303      	movs	r3, #3
 8004ede:	613b      	str	r3, [r7, #16]
 8004ee0:	e00a      	b.n	8004ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b80      	cmp	r3, #128	@ 0x80
 8004ee6:	d102      	bne.n	8004eee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ee8:	2302      	movs	r3, #2
 8004eea:	613b      	str	r3, [r7, #16]
 8004eec:	e004      	b.n	8004ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b70      	cmp	r3, #112	@ 0x70
 8004ef2:	d101      	bne.n	8004ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8004f28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f023 0207 	bic.w	r2, r3, #7
 8004f00:	4909      	ldr	r1, [pc, #36]	@ (8004f28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f08:	4b07      	ldr	r3, [pc, #28]	@ (8004f28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0307 	and.w	r3, r3, #7
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d001      	beq.n	8004f1a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e000      	b.n	8004f1c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3718      	adds	r7, #24
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40021000 	.word	0x40021000
 8004f28:	40022000 	.word	0x40022000

08004f2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f34:	2300      	movs	r3, #0
 8004f36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f38:	2300      	movs	r3, #0
 8004f3a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d041      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f4c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004f50:	d02a      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004f52:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004f56:	d824      	bhi.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f58:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f5c:	d008      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f62:	d81e      	bhi.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00a      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004f68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f6c:	d010      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f6e:	e018      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f70:	4b86      	ldr	r3, [pc, #536]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	4a85      	ldr	r2, [pc, #532]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f7a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f7c:	e015      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3304      	adds	r3, #4
 8004f82:	2100      	movs	r1, #0
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 fabb 	bl	8005500 <RCCEx_PLLSAI1_Config>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f8e:	e00c      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3320      	adds	r3, #32
 8004f94:	2100      	movs	r1, #0
 8004f96:	4618      	mov	r0, r3
 8004f98:	f000 fba6 	bl	80056e8 <RCCEx_PLLSAI2_Config>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fa0:	e003      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	74fb      	strb	r3, [r7, #19]
      break;
 8004fa6:	e000      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004fa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004faa:	7cfb      	ldrb	r3, [r7, #19]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10b      	bne.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fb0:	4b76      	ldr	r3, [pc, #472]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fbe:	4973      	ldr	r1, [pc, #460]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004fc6:	e001      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc8:	7cfb      	ldrb	r3, [r7, #19]
 8004fca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d041      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004fdc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004fe0:	d02a      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004fe2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004fe6:	d824      	bhi.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004fe8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004fec:	d008      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004fee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ff2:	d81e      	bhi.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00a      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004ff8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ffc:	d010      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004ffe:	e018      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005000:	4b62      	ldr	r3, [pc, #392]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	4a61      	ldr	r2, [pc, #388]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005006:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800500a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800500c:	e015      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	3304      	adds	r3, #4
 8005012:	2100      	movs	r1, #0
 8005014:	4618      	mov	r0, r3
 8005016:	f000 fa73 	bl	8005500 <RCCEx_PLLSAI1_Config>
 800501a:	4603      	mov	r3, r0
 800501c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800501e:	e00c      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	3320      	adds	r3, #32
 8005024:	2100      	movs	r1, #0
 8005026:	4618      	mov	r0, r3
 8005028:	f000 fb5e 	bl	80056e8 <RCCEx_PLLSAI2_Config>
 800502c:	4603      	mov	r3, r0
 800502e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005030:	e003      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	74fb      	strb	r3, [r7, #19]
      break;
 8005036:	e000      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005038:	bf00      	nop
    }

    if(ret == HAL_OK)
 800503a:	7cfb      	ldrb	r3, [r7, #19]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10b      	bne.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005040:	4b52      	ldr	r3, [pc, #328]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005046:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800504e:	494f      	ldr	r1, [pc, #316]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005050:	4313      	orrs	r3, r2
 8005052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005056:	e001      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005058:	7cfb      	ldrb	r3, [r7, #19]
 800505a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 80a0 	beq.w	80051aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800506a:	2300      	movs	r3, #0
 800506c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800506e:	4b47      	ldr	r3, [pc, #284]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800507a:	2301      	movs	r3, #1
 800507c:	e000      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800507e:	2300      	movs	r3, #0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00d      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005084:	4b41      	ldr	r3, [pc, #260]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005088:	4a40      	ldr	r2, [pc, #256]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800508a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800508e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005090:	4b3e      	ldr	r3, [pc, #248]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005098:	60bb      	str	r3, [r7, #8]
 800509a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800509c:	2301      	movs	r3, #1
 800509e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050a0:	4b3b      	ldr	r3, [pc, #236]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a3a      	ldr	r2, [pc, #232]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050ac:	f7fd fc1e 	bl	80028ec <HAL_GetTick>
 80050b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050b2:	e009      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050b4:	f7fd fc1a 	bl	80028ec <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d902      	bls.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	74fb      	strb	r3, [r7, #19]
        break;
 80050c6:	e005      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050c8:	4b31      	ldr	r3, [pc, #196]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d0ef      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80050d4:	7cfb      	ldrb	r3, [r7, #19]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d15c      	bne.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050da:	4b2c      	ldr	r3, [pc, #176]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d01f      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d019      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050f8:	4b24      	ldr	r3, [pc, #144]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005102:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005104:	4b21      	ldr	r3, [pc, #132]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800510a:	4a20      	ldr	r2, [pc, #128]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800510c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005110:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005114:	4b1d      	ldr	r3, [pc, #116]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800511a:	4a1c      	ldr	r2, [pc, #112]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800511c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005120:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005124:	4a19      	ldr	r2, [pc, #100]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b00      	cmp	r3, #0
 8005134:	d016      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005136:	f7fd fbd9 	bl	80028ec <HAL_GetTick>
 800513a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800513c:	e00b      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800513e:	f7fd fbd5 	bl	80028ec <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	f241 3288 	movw	r2, #5000	@ 0x1388
 800514c:	4293      	cmp	r3, r2
 800514e:	d902      	bls.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	74fb      	strb	r3, [r7, #19]
            break;
 8005154:	e006      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005156:	4b0d      	ldr	r3, [pc, #52]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d0ec      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005164:	7cfb      	ldrb	r3, [r7, #19]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10c      	bne.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800516a:	4b08      	ldr	r3, [pc, #32]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800516c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005170:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800517a:	4904      	ldr	r1, [pc, #16]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800517c:	4313      	orrs	r3, r2
 800517e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005182:	e009      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005184:	7cfb      	ldrb	r3, [r7, #19]
 8005186:	74bb      	strb	r3, [r7, #18]
 8005188:	e006      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800518a:	bf00      	nop
 800518c:	40021000 	.word	0x40021000
 8005190:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005194:	7cfb      	ldrb	r3, [r7, #19]
 8005196:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005198:	7c7b      	ldrb	r3, [r7, #17]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d105      	bne.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800519e:	4b9e      	ldr	r3, [pc, #632]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051a2:	4a9d      	ldr	r2, [pc, #628]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051a8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00a      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051b6:	4b98      	ldr	r3, [pc, #608]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051bc:	f023 0203 	bic.w	r2, r3, #3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c4:	4994      	ldr	r1, [pc, #592]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00a      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051d8:	4b8f      	ldr	r3, [pc, #572]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051de:	f023 020c 	bic.w	r2, r3, #12
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e6:	498c      	ldr	r1, [pc, #560]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0304 	and.w	r3, r3, #4
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051fa:	4b87      	ldr	r3, [pc, #540]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005200:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005208:	4983      	ldr	r1, [pc, #524]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800520a:	4313      	orrs	r3, r2
 800520c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0308 	and.w	r3, r3, #8
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00a      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800521c:	4b7e      	ldr	r3, [pc, #504]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800521e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005222:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800522a:	497b      	ldr	r1, [pc, #492]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800522c:	4313      	orrs	r3, r2
 800522e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0310 	and.w	r3, r3, #16
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00a      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800523e:	4b76      	ldr	r3, [pc, #472]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005244:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800524c:	4972      	ldr	r1, [pc, #456]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800524e:	4313      	orrs	r3, r2
 8005250:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0320 	and.w	r3, r3, #32
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00a      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005260:	4b6d      	ldr	r3, [pc, #436]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005266:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800526e:	496a      	ldr	r1, [pc, #424]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005270:	4313      	orrs	r3, r2
 8005272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00a      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005282:	4b65      	ldr	r3, [pc, #404]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005288:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005290:	4961      	ldr	r1, [pc, #388]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005292:	4313      	orrs	r3, r2
 8005294:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00a      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052a4:	4b5c      	ldr	r3, [pc, #368]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052b2:	4959      	ldr	r1, [pc, #356]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00a      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052c6:	4b54      	ldr	r3, [pc, #336]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052cc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052d4:	4950      	ldr	r1, [pc, #320]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00a      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052e8:	4b4b      	ldr	r3, [pc, #300]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052f6:	4948      	ldr	r1, [pc, #288]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00a      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800530a:	4b43      	ldr	r3, [pc, #268]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800530c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005310:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005318:	493f      	ldr	r1, [pc, #252]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800531a:	4313      	orrs	r3, r2
 800531c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d028      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800532c:	4b3a      	ldr	r3, [pc, #232]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800532e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005332:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800533a:	4937      	ldr	r1, [pc, #220]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800533c:	4313      	orrs	r3, r2
 800533e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005346:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800534a:	d106      	bne.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800534c:	4b32      	ldr	r3, [pc, #200]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	4a31      	ldr	r2, [pc, #196]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005352:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005356:	60d3      	str	r3, [r2, #12]
 8005358:	e011      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800535e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005362:	d10c      	bne.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	3304      	adds	r3, #4
 8005368:	2101      	movs	r1, #1
 800536a:	4618      	mov	r0, r3
 800536c:	f000 f8c8 	bl	8005500 <RCCEx_PLLSAI1_Config>
 8005370:	4603      	mov	r3, r0
 8005372:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005374:	7cfb      	ldrb	r3, [r7, #19]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800537a:	7cfb      	ldrb	r3, [r7, #19]
 800537c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d028      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800538a:	4b23      	ldr	r3, [pc, #140]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800538c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005390:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005398:	491f      	ldr	r1, [pc, #124]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800539a:	4313      	orrs	r3, r2
 800539c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053a8:	d106      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053aa:	4b1b      	ldr	r3, [pc, #108]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	4a1a      	ldr	r2, [pc, #104]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053b4:	60d3      	str	r3, [r2, #12]
 80053b6:	e011      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80053c0:	d10c      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	3304      	adds	r3, #4
 80053c6:	2101      	movs	r1, #1
 80053c8:	4618      	mov	r0, r3
 80053ca:	f000 f899 	bl	8005500 <RCCEx_PLLSAI1_Config>
 80053ce:	4603      	mov	r3, r0
 80053d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053d2:	7cfb      	ldrb	r3, [r7, #19]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80053d8:	7cfb      	ldrb	r3, [r7, #19]
 80053da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d02b      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053f6:	4908      	ldr	r1, [pc, #32]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005402:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005406:	d109      	bne.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005408:	4b03      	ldr	r3, [pc, #12]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	4a02      	ldr	r2, [pc, #8]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800540e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005412:	60d3      	str	r3, [r2, #12]
 8005414:	e014      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005416:	bf00      	nop
 8005418:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005420:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005424:	d10c      	bne.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	3304      	adds	r3, #4
 800542a:	2101      	movs	r1, #1
 800542c:	4618      	mov	r0, r3
 800542e:	f000 f867 	bl	8005500 <RCCEx_PLLSAI1_Config>
 8005432:	4603      	mov	r3, r0
 8005434:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005436:	7cfb      	ldrb	r3, [r7, #19]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d001      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800543c:	7cfb      	ldrb	r3, [r7, #19]
 800543e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d02f      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800544c:	4b2b      	ldr	r3, [pc, #172]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800544e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005452:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800545a:	4928      	ldr	r1, [pc, #160]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800545c:	4313      	orrs	r3, r2
 800545e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005466:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800546a:	d10d      	bne.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	3304      	adds	r3, #4
 8005470:	2102      	movs	r1, #2
 8005472:	4618      	mov	r0, r3
 8005474:	f000 f844 	bl	8005500 <RCCEx_PLLSAI1_Config>
 8005478:	4603      	mov	r3, r0
 800547a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800547c:	7cfb      	ldrb	r3, [r7, #19]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d014      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005482:	7cfb      	ldrb	r3, [r7, #19]
 8005484:	74bb      	strb	r3, [r7, #18]
 8005486:	e011      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800548c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005490:	d10c      	bne.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	3320      	adds	r3, #32
 8005496:	2102      	movs	r1, #2
 8005498:	4618      	mov	r0, r3
 800549a:	f000 f925 	bl	80056e8 <RCCEx_PLLSAI2_Config>
 800549e:	4603      	mov	r3, r0
 80054a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054a2:	7cfb      	ldrb	r3, [r7, #19]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80054a8:	7cfb      	ldrb	r3, [r7, #19]
 80054aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00a      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80054b8:	4b10      	ldr	r3, [pc, #64]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054be:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054c6:	490d      	ldr	r1, [pc, #52]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00b      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80054da:	4b08      	ldr	r3, [pc, #32]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054ea:	4904      	ldr	r1, [pc, #16]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80054f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3718      	adds	r7, #24
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	40021000 	.word	0x40021000

08005500 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800550a:	2300      	movs	r3, #0
 800550c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800550e:	4b75      	ldr	r3, [pc, #468]	@ (80056e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f003 0303 	and.w	r3, r3, #3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d018      	beq.n	800554c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800551a:	4b72      	ldr	r3, [pc, #456]	@ (80056e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	f003 0203 	and.w	r2, r3, #3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	429a      	cmp	r2, r3
 8005528:	d10d      	bne.n	8005546 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
       ||
 800552e:	2b00      	cmp	r3, #0
 8005530:	d009      	beq.n	8005546 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005532:	4b6c      	ldr	r3, [pc, #432]	@ (80056e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	091b      	lsrs	r3, r3, #4
 8005538:	f003 0307 	and.w	r3, r3, #7
 800553c:	1c5a      	adds	r2, r3, #1
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
       ||
 8005542:	429a      	cmp	r2, r3
 8005544:	d047      	beq.n	80055d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	73fb      	strb	r3, [r7, #15]
 800554a:	e044      	b.n	80055d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2b03      	cmp	r3, #3
 8005552:	d018      	beq.n	8005586 <RCCEx_PLLSAI1_Config+0x86>
 8005554:	2b03      	cmp	r3, #3
 8005556:	d825      	bhi.n	80055a4 <RCCEx_PLLSAI1_Config+0xa4>
 8005558:	2b01      	cmp	r3, #1
 800555a:	d002      	beq.n	8005562 <RCCEx_PLLSAI1_Config+0x62>
 800555c:	2b02      	cmp	r3, #2
 800555e:	d009      	beq.n	8005574 <RCCEx_PLLSAI1_Config+0x74>
 8005560:	e020      	b.n	80055a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005562:	4b60      	ldr	r3, [pc, #384]	@ (80056e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d11d      	bne.n	80055aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005572:	e01a      	b.n	80055aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005574:	4b5b      	ldr	r3, [pc, #364]	@ (80056e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800557c:	2b00      	cmp	r3, #0
 800557e:	d116      	bne.n	80055ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005584:	e013      	b.n	80055ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005586:	4b57      	ldr	r3, [pc, #348]	@ (80056e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10f      	bne.n	80055b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005592:	4b54      	ldr	r3, [pc, #336]	@ (80056e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d109      	bne.n	80055b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80055a2:	e006      	b.n	80055b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	73fb      	strb	r3, [r7, #15]
      break;
 80055a8:	e004      	b.n	80055b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055aa:	bf00      	nop
 80055ac:	e002      	b.n	80055b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055ae:	bf00      	nop
 80055b0:	e000      	b.n	80055b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10d      	bne.n	80055d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80055ba:	4b4a      	ldr	r3, [pc, #296]	@ (80056e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6819      	ldr	r1, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	3b01      	subs	r3, #1
 80055cc:	011b      	lsls	r3, r3, #4
 80055ce:	430b      	orrs	r3, r1
 80055d0:	4944      	ldr	r1, [pc, #272]	@ (80056e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80055d6:	7bfb      	ldrb	r3, [r7, #15]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d17d      	bne.n	80056d8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80055dc:	4b41      	ldr	r3, [pc, #260]	@ (80056e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a40      	ldr	r2, [pc, #256]	@ (80056e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80055e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055e8:	f7fd f980 	bl	80028ec <HAL_GetTick>
 80055ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055ee:	e009      	b.n	8005604 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055f0:	f7fd f97c 	bl	80028ec <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d902      	bls.n	8005604 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	73fb      	strb	r3, [r7, #15]
        break;
 8005602:	e005      	b.n	8005610 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005604:	4b37      	ldr	r3, [pc, #220]	@ (80056e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1ef      	bne.n	80055f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005610:	7bfb      	ldrb	r3, [r7, #15]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d160      	bne.n	80056d8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d111      	bne.n	8005640 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800561c:	4b31      	ldr	r3, [pc, #196]	@ (80056e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005624:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6892      	ldr	r2, [r2, #8]
 800562c:	0211      	lsls	r1, r2, #8
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	68d2      	ldr	r2, [r2, #12]
 8005632:	0912      	lsrs	r2, r2, #4
 8005634:	0452      	lsls	r2, r2, #17
 8005636:	430a      	orrs	r2, r1
 8005638:	492a      	ldr	r1, [pc, #168]	@ (80056e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800563a:	4313      	orrs	r3, r2
 800563c:	610b      	str	r3, [r1, #16]
 800563e:	e027      	b.n	8005690 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d112      	bne.n	800566c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005646:	4b27      	ldr	r3, [pc, #156]	@ (80056e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800564e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	6892      	ldr	r2, [r2, #8]
 8005656:	0211      	lsls	r1, r2, #8
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	6912      	ldr	r2, [r2, #16]
 800565c:	0852      	lsrs	r2, r2, #1
 800565e:	3a01      	subs	r2, #1
 8005660:	0552      	lsls	r2, r2, #21
 8005662:	430a      	orrs	r2, r1
 8005664:	491f      	ldr	r1, [pc, #124]	@ (80056e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005666:	4313      	orrs	r3, r2
 8005668:	610b      	str	r3, [r1, #16]
 800566a:	e011      	b.n	8005690 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800566c:	4b1d      	ldr	r3, [pc, #116]	@ (80056e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005674:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	6892      	ldr	r2, [r2, #8]
 800567c:	0211      	lsls	r1, r2, #8
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	6952      	ldr	r2, [r2, #20]
 8005682:	0852      	lsrs	r2, r2, #1
 8005684:	3a01      	subs	r2, #1
 8005686:	0652      	lsls	r2, r2, #25
 8005688:	430a      	orrs	r2, r1
 800568a:	4916      	ldr	r1, [pc, #88]	@ (80056e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800568c:	4313      	orrs	r3, r2
 800568e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005690:	4b14      	ldr	r3, [pc, #80]	@ (80056e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a13      	ldr	r2, [pc, #76]	@ (80056e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005696:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800569a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800569c:	f7fd f926 	bl	80028ec <HAL_GetTick>
 80056a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056a2:	e009      	b.n	80056b8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056a4:	f7fd f922 	bl	80028ec <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d902      	bls.n	80056b8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	73fb      	strb	r3, [r7, #15]
          break;
 80056b6:	e005      	b.n	80056c4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056b8:	4b0a      	ldr	r3, [pc, #40]	@ (80056e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d0ef      	beq.n	80056a4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80056c4:	7bfb      	ldrb	r3, [r7, #15]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d106      	bne.n	80056d8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80056ca:	4b06      	ldr	r3, [pc, #24]	@ (80056e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056cc:	691a      	ldr	r2, [r3, #16]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	4904      	ldr	r1, [pc, #16]	@ (80056e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	40021000 	.word	0x40021000

080056e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056f6:	4b6a      	ldr	r3, [pc, #424]	@ (80058a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	f003 0303 	and.w	r3, r3, #3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d018      	beq.n	8005734 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005702:	4b67      	ldr	r3, [pc, #412]	@ (80058a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f003 0203 	and.w	r2, r3, #3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	429a      	cmp	r2, r3
 8005710:	d10d      	bne.n	800572e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
       ||
 8005716:	2b00      	cmp	r3, #0
 8005718:	d009      	beq.n	800572e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800571a:	4b61      	ldr	r3, [pc, #388]	@ (80058a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	091b      	lsrs	r3, r3, #4
 8005720:	f003 0307 	and.w	r3, r3, #7
 8005724:	1c5a      	adds	r2, r3, #1
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
       ||
 800572a:	429a      	cmp	r2, r3
 800572c:	d047      	beq.n	80057be <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	73fb      	strb	r3, [r7, #15]
 8005732:	e044      	b.n	80057be <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2b03      	cmp	r3, #3
 800573a:	d018      	beq.n	800576e <RCCEx_PLLSAI2_Config+0x86>
 800573c:	2b03      	cmp	r3, #3
 800573e:	d825      	bhi.n	800578c <RCCEx_PLLSAI2_Config+0xa4>
 8005740:	2b01      	cmp	r3, #1
 8005742:	d002      	beq.n	800574a <RCCEx_PLLSAI2_Config+0x62>
 8005744:	2b02      	cmp	r3, #2
 8005746:	d009      	beq.n	800575c <RCCEx_PLLSAI2_Config+0x74>
 8005748:	e020      	b.n	800578c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800574a:	4b55      	ldr	r3, [pc, #340]	@ (80058a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d11d      	bne.n	8005792 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800575a:	e01a      	b.n	8005792 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800575c:	4b50      	ldr	r3, [pc, #320]	@ (80058a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005764:	2b00      	cmp	r3, #0
 8005766:	d116      	bne.n	8005796 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800576c:	e013      	b.n	8005796 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800576e:	4b4c      	ldr	r3, [pc, #304]	@ (80058a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10f      	bne.n	800579a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800577a:	4b49      	ldr	r3, [pc, #292]	@ (80058a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d109      	bne.n	800579a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800578a:	e006      	b.n	800579a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	73fb      	strb	r3, [r7, #15]
      break;
 8005790:	e004      	b.n	800579c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005792:	bf00      	nop
 8005794:	e002      	b.n	800579c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005796:	bf00      	nop
 8005798:	e000      	b.n	800579c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800579a:	bf00      	nop
    }

    if(status == HAL_OK)
 800579c:	7bfb      	ldrb	r3, [r7, #15]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10d      	bne.n	80057be <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80057a2:	4b3f      	ldr	r3, [pc, #252]	@ (80058a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6819      	ldr	r1, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	3b01      	subs	r3, #1
 80057b4:	011b      	lsls	r3, r3, #4
 80057b6:	430b      	orrs	r3, r1
 80057b8:	4939      	ldr	r1, [pc, #228]	@ (80058a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80057be:	7bfb      	ldrb	r3, [r7, #15]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d167      	bne.n	8005894 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80057c4:	4b36      	ldr	r3, [pc, #216]	@ (80058a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a35      	ldr	r2, [pc, #212]	@ (80058a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057d0:	f7fd f88c 	bl	80028ec <HAL_GetTick>
 80057d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80057d6:	e009      	b.n	80057ec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057d8:	f7fd f888 	bl	80028ec <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d902      	bls.n	80057ec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	73fb      	strb	r3, [r7, #15]
        break;
 80057ea:	e005      	b.n	80057f8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80057ec:	4b2c      	ldr	r3, [pc, #176]	@ (80058a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1ef      	bne.n	80057d8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80057f8:	7bfb      	ldrb	r3, [r7, #15]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d14a      	bne.n	8005894 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d111      	bne.n	8005828 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005804:	4b26      	ldr	r3, [pc, #152]	@ (80058a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800580c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	6892      	ldr	r2, [r2, #8]
 8005814:	0211      	lsls	r1, r2, #8
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	68d2      	ldr	r2, [r2, #12]
 800581a:	0912      	lsrs	r2, r2, #4
 800581c:	0452      	lsls	r2, r2, #17
 800581e:	430a      	orrs	r2, r1
 8005820:	491f      	ldr	r1, [pc, #124]	@ (80058a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005822:	4313      	orrs	r3, r2
 8005824:	614b      	str	r3, [r1, #20]
 8005826:	e011      	b.n	800584c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005828:	4b1d      	ldr	r3, [pc, #116]	@ (80058a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005830:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	6892      	ldr	r2, [r2, #8]
 8005838:	0211      	lsls	r1, r2, #8
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	6912      	ldr	r2, [r2, #16]
 800583e:	0852      	lsrs	r2, r2, #1
 8005840:	3a01      	subs	r2, #1
 8005842:	0652      	lsls	r2, r2, #25
 8005844:	430a      	orrs	r2, r1
 8005846:	4916      	ldr	r1, [pc, #88]	@ (80058a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005848:	4313      	orrs	r3, r2
 800584a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800584c:	4b14      	ldr	r3, [pc, #80]	@ (80058a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a13      	ldr	r2, [pc, #76]	@ (80058a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005852:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005856:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005858:	f7fd f848 	bl	80028ec <HAL_GetTick>
 800585c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800585e:	e009      	b.n	8005874 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005860:	f7fd f844 	bl	80028ec <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b02      	cmp	r3, #2
 800586c:	d902      	bls.n	8005874 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	73fb      	strb	r3, [r7, #15]
          break;
 8005872:	e005      	b.n	8005880 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005874:	4b0a      	ldr	r3, [pc, #40]	@ (80058a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d0ef      	beq.n	8005860 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005880:	7bfb      	ldrb	r3, [r7, #15]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d106      	bne.n	8005894 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005886:	4b06      	ldr	r3, [pc, #24]	@ (80058a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005888:	695a      	ldr	r2, [r3, #20]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	4904      	ldr	r1, [pc, #16]	@ (80058a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005890:	4313      	orrs	r3, r2
 8005892:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005894:	7bfb      	ldrb	r3, [r7, #15]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	40021000 	.word	0x40021000

080058a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d101      	bne.n	80058b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e049      	b.n	800594a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d106      	bne.n	80058d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7fb ff88 	bl	80017e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	3304      	adds	r3, #4
 80058e0:	4619      	mov	r1, r3
 80058e2:	4610      	mov	r0, r2
 80058e4:	f000 f968 	bl	8005bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b01      	cmp	r3, #1
 8005966:	d001      	beq.n	800596c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e047      	b.n	80059fc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2202      	movs	r2, #2
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a23      	ldr	r2, [pc, #140]	@ (8005a08 <HAL_TIM_Base_Start+0xb4>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d01d      	beq.n	80059ba <HAL_TIM_Base_Start+0x66>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005986:	d018      	beq.n	80059ba <HAL_TIM_Base_Start+0x66>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a1f      	ldr	r2, [pc, #124]	@ (8005a0c <HAL_TIM_Base_Start+0xb8>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d013      	beq.n	80059ba <HAL_TIM_Base_Start+0x66>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a1e      	ldr	r2, [pc, #120]	@ (8005a10 <HAL_TIM_Base_Start+0xbc>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d00e      	beq.n	80059ba <HAL_TIM_Base_Start+0x66>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005a14 <HAL_TIM_Base_Start+0xc0>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d009      	beq.n	80059ba <HAL_TIM_Base_Start+0x66>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005a18 <HAL_TIM_Base_Start+0xc4>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d004      	beq.n	80059ba <HAL_TIM_Base_Start+0x66>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a19      	ldr	r2, [pc, #100]	@ (8005a1c <HAL_TIM_Base_Start+0xc8>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d115      	bne.n	80059e6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	689a      	ldr	r2, [r3, #8]
 80059c0:	4b17      	ldr	r3, [pc, #92]	@ (8005a20 <HAL_TIM_Base_Start+0xcc>)
 80059c2:	4013      	ands	r3, r2
 80059c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2b06      	cmp	r3, #6
 80059ca:	d015      	beq.n	80059f8 <HAL_TIM_Base_Start+0xa4>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059d2:	d011      	beq.n	80059f8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f042 0201 	orr.w	r2, r2, #1
 80059e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059e4:	e008      	b.n	80059f8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f042 0201 	orr.w	r2, r2, #1
 80059f4:	601a      	str	r2, [r3, #0]
 80059f6:	e000      	b.n	80059fa <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3714      	adds	r7, #20
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	40012c00 	.word	0x40012c00
 8005a0c:	40000400 	.word	0x40000400
 8005a10:	40000800 	.word	0x40000800
 8005a14:	40000c00 	.word	0x40000c00
 8005a18:	40013400 	.word	0x40013400
 8005a1c:	40014000 	.word	0x40014000
 8005a20:	00010007 	.word	0x00010007

08005a24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d101      	bne.n	8005a40 <HAL_TIM_ConfigClockSource+0x1c>
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	e0b6      	b.n	8005bae <HAL_TIM_ConfigClockSource+0x18a>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a5e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005a62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a7c:	d03e      	beq.n	8005afc <HAL_TIM_ConfigClockSource+0xd8>
 8005a7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a82:	f200 8087 	bhi.w	8005b94 <HAL_TIM_ConfigClockSource+0x170>
 8005a86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a8a:	f000 8086 	beq.w	8005b9a <HAL_TIM_ConfigClockSource+0x176>
 8005a8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a92:	d87f      	bhi.n	8005b94 <HAL_TIM_ConfigClockSource+0x170>
 8005a94:	2b70      	cmp	r3, #112	@ 0x70
 8005a96:	d01a      	beq.n	8005ace <HAL_TIM_ConfigClockSource+0xaa>
 8005a98:	2b70      	cmp	r3, #112	@ 0x70
 8005a9a:	d87b      	bhi.n	8005b94 <HAL_TIM_ConfigClockSource+0x170>
 8005a9c:	2b60      	cmp	r3, #96	@ 0x60
 8005a9e:	d050      	beq.n	8005b42 <HAL_TIM_ConfigClockSource+0x11e>
 8005aa0:	2b60      	cmp	r3, #96	@ 0x60
 8005aa2:	d877      	bhi.n	8005b94 <HAL_TIM_ConfigClockSource+0x170>
 8005aa4:	2b50      	cmp	r3, #80	@ 0x50
 8005aa6:	d03c      	beq.n	8005b22 <HAL_TIM_ConfigClockSource+0xfe>
 8005aa8:	2b50      	cmp	r3, #80	@ 0x50
 8005aaa:	d873      	bhi.n	8005b94 <HAL_TIM_ConfigClockSource+0x170>
 8005aac:	2b40      	cmp	r3, #64	@ 0x40
 8005aae:	d058      	beq.n	8005b62 <HAL_TIM_ConfigClockSource+0x13e>
 8005ab0:	2b40      	cmp	r3, #64	@ 0x40
 8005ab2:	d86f      	bhi.n	8005b94 <HAL_TIM_ConfigClockSource+0x170>
 8005ab4:	2b30      	cmp	r3, #48	@ 0x30
 8005ab6:	d064      	beq.n	8005b82 <HAL_TIM_ConfigClockSource+0x15e>
 8005ab8:	2b30      	cmp	r3, #48	@ 0x30
 8005aba:	d86b      	bhi.n	8005b94 <HAL_TIM_ConfigClockSource+0x170>
 8005abc:	2b20      	cmp	r3, #32
 8005abe:	d060      	beq.n	8005b82 <HAL_TIM_ConfigClockSource+0x15e>
 8005ac0:	2b20      	cmp	r3, #32
 8005ac2:	d867      	bhi.n	8005b94 <HAL_TIM_ConfigClockSource+0x170>
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d05c      	beq.n	8005b82 <HAL_TIM_ConfigClockSource+0x15e>
 8005ac8:	2b10      	cmp	r3, #16
 8005aca:	d05a      	beq.n	8005b82 <HAL_TIM_ConfigClockSource+0x15e>
 8005acc:	e062      	b.n	8005b94 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ade:	f000 f97f 	bl	8005de0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005af0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	609a      	str	r2, [r3, #8]
      break;
 8005afa:	e04f      	b.n	8005b9c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b0c:	f000 f968 	bl	8005de0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689a      	ldr	r2, [r3, #8]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b1e:	609a      	str	r2, [r3, #8]
      break;
 8005b20:	e03c      	b.n	8005b9c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b2e:	461a      	mov	r2, r3
 8005b30:	f000 f8dc 	bl	8005cec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2150      	movs	r1, #80	@ 0x50
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 f935 	bl	8005daa <TIM_ITRx_SetConfig>
      break;
 8005b40:	e02c      	b.n	8005b9c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b4e:	461a      	mov	r2, r3
 8005b50:	f000 f8fb 	bl	8005d4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2160      	movs	r1, #96	@ 0x60
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 f925 	bl	8005daa <TIM_ITRx_SetConfig>
      break;
 8005b60:	e01c      	b.n	8005b9c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b6e:	461a      	mov	r2, r3
 8005b70:	f000 f8bc 	bl	8005cec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2140      	movs	r1, #64	@ 0x40
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 f915 	bl	8005daa <TIM_ITRx_SetConfig>
      break;
 8005b80:	e00c      	b.n	8005b9c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	f000 f90c 	bl	8005daa <TIM_ITRx_SetConfig>
      break;
 8005b92:	e003      	b.n	8005b9c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	73fb      	strb	r3, [r7, #15]
      break;
 8005b98:	e000      	b.n	8005b9c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005b9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
	...

08005bb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a40      	ldr	r2, [pc, #256]	@ (8005ccc <TIM_Base_SetConfig+0x114>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d013      	beq.n	8005bf8 <TIM_Base_SetConfig+0x40>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bd6:	d00f      	beq.n	8005bf8 <TIM_Base_SetConfig+0x40>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a3d      	ldr	r2, [pc, #244]	@ (8005cd0 <TIM_Base_SetConfig+0x118>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d00b      	beq.n	8005bf8 <TIM_Base_SetConfig+0x40>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a3c      	ldr	r2, [pc, #240]	@ (8005cd4 <TIM_Base_SetConfig+0x11c>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d007      	beq.n	8005bf8 <TIM_Base_SetConfig+0x40>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a3b      	ldr	r2, [pc, #236]	@ (8005cd8 <TIM_Base_SetConfig+0x120>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d003      	beq.n	8005bf8 <TIM_Base_SetConfig+0x40>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a3a      	ldr	r2, [pc, #232]	@ (8005cdc <TIM_Base_SetConfig+0x124>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d108      	bne.n	8005c0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a2f      	ldr	r2, [pc, #188]	@ (8005ccc <TIM_Base_SetConfig+0x114>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d01f      	beq.n	8005c52 <TIM_Base_SetConfig+0x9a>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c18:	d01b      	beq.n	8005c52 <TIM_Base_SetConfig+0x9a>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a2c      	ldr	r2, [pc, #176]	@ (8005cd0 <TIM_Base_SetConfig+0x118>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d017      	beq.n	8005c52 <TIM_Base_SetConfig+0x9a>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a2b      	ldr	r2, [pc, #172]	@ (8005cd4 <TIM_Base_SetConfig+0x11c>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d013      	beq.n	8005c52 <TIM_Base_SetConfig+0x9a>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a2a      	ldr	r2, [pc, #168]	@ (8005cd8 <TIM_Base_SetConfig+0x120>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d00f      	beq.n	8005c52 <TIM_Base_SetConfig+0x9a>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a29      	ldr	r2, [pc, #164]	@ (8005cdc <TIM_Base_SetConfig+0x124>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d00b      	beq.n	8005c52 <TIM_Base_SetConfig+0x9a>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a28      	ldr	r2, [pc, #160]	@ (8005ce0 <TIM_Base_SetConfig+0x128>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d007      	beq.n	8005c52 <TIM_Base_SetConfig+0x9a>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a27      	ldr	r2, [pc, #156]	@ (8005ce4 <TIM_Base_SetConfig+0x12c>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d003      	beq.n	8005c52 <TIM_Base_SetConfig+0x9a>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a26      	ldr	r2, [pc, #152]	@ (8005ce8 <TIM_Base_SetConfig+0x130>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d108      	bne.n	8005c64 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a10      	ldr	r2, [pc, #64]	@ (8005ccc <TIM_Base_SetConfig+0x114>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d00f      	beq.n	8005cb0 <TIM_Base_SetConfig+0xf8>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a12      	ldr	r2, [pc, #72]	@ (8005cdc <TIM_Base_SetConfig+0x124>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d00b      	beq.n	8005cb0 <TIM_Base_SetConfig+0xf8>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a11      	ldr	r2, [pc, #68]	@ (8005ce0 <TIM_Base_SetConfig+0x128>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d007      	beq.n	8005cb0 <TIM_Base_SetConfig+0xf8>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a10      	ldr	r2, [pc, #64]	@ (8005ce4 <TIM_Base_SetConfig+0x12c>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d003      	beq.n	8005cb0 <TIM_Base_SetConfig+0xf8>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a0f      	ldr	r2, [pc, #60]	@ (8005ce8 <TIM_Base_SetConfig+0x130>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d103      	bne.n	8005cb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	691a      	ldr	r2, [r3, #16]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	615a      	str	r2, [r3, #20]
}
 8005cbe:	bf00      	nop
 8005cc0:	3714      	adds	r7, #20
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	40012c00 	.word	0x40012c00
 8005cd0:	40000400 	.word	0x40000400
 8005cd4:	40000800 	.word	0x40000800
 8005cd8:	40000c00 	.word	0x40000c00
 8005cdc:	40013400 	.word	0x40013400
 8005ce0:	40014000 	.word	0x40014000
 8005ce4:	40014400 	.word	0x40014400
 8005ce8:	40014800 	.word	0x40014800

08005cec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b087      	sub	sp, #28
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6a1b      	ldr	r3, [r3, #32]
 8005cfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	f023 0201 	bic.w	r2, r3, #1
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	011b      	lsls	r3, r3, #4
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f023 030a 	bic.w	r3, r3, #10
 8005d28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	621a      	str	r2, [r3, #32]
}
 8005d3e:	bf00      	nop
 8005d40:	371c      	adds	r7, #28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b087      	sub	sp, #28
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	60f8      	str	r0, [r7, #12]
 8005d52:	60b9      	str	r1, [r7, #8]
 8005d54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	f023 0210 	bic.w	r2, r3, #16
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	031b      	lsls	r3, r3, #12
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005d86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	011b      	lsls	r3, r3, #4
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	621a      	str	r2, [r3, #32]
}
 8005d9e:	bf00      	nop
 8005da0:	371c      	adds	r7, #28
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr

08005daa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b085      	sub	sp, #20
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
 8005db2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	f043 0307 	orr.w	r3, r3, #7
 8005dcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	609a      	str	r2, [r3, #8]
}
 8005dd4:	bf00      	nop
 8005dd6:	3714      	adds	r7, #20
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
 8005dec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005dfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	021a      	lsls	r2, r3, #8
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	431a      	orrs	r2, r3
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	609a      	str	r2, [r3, #8]
}
 8005e14:	bf00      	nop
 8005e16:	371c      	adds	r7, #28
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d101      	bne.n	8005e38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e34:	2302      	movs	r3, #2
 8005e36:	e068      	b.n	8005f0a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2202      	movs	r2, #2
 8005e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a2e      	ldr	r2, [pc, #184]	@ (8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d004      	beq.n	8005e6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a2d      	ldr	r2, [pc, #180]	@ (8005f1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d108      	bne.n	8005e7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005e72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a1e      	ldr	r2, [pc, #120]	@ (8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d01d      	beq.n	8005ede <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eaa:	d018      	beq.n	8005ede <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a1b      	ldr	r2, [pc, #108]	@ (8005f20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d013      	beq.n	8005ede <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a1a      	ldr	r2, [pc, #104]	@ (8005f24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d00e      	beq.n	8005ede <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a18      	ldr	r2, [pc, #96]	@ (8005f28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d009      	beq.n	8005ede <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a13      	ldr	r2, [pc, #76]	@ (8005f1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d004      	beq.n	8005ede <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a14      	ldr	r2, [pc, #80]	@ (8005f2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d10c      	bne.n	8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ee4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	40012c00 	.word	0x40012c00
 8005f1c:	40013400 	.word	0x40013400
 8005f20:	40000400 	.word	0x40000400
 8005f24:	40000800 	.word	0x40000800
 8005f28:	40000c00 	.word	0x40000c00
 8005f2c:	40014000 	.word	0x40014000

08005f30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e040      	b.n	8005fc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d106      	bne.n	8005f58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7fc f8e4 	bl	8002120 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2224      	movs	r2, #36	@ 0x24
 8005f5c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 0201 	bic.w	r2, r2, #1
 8005f6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d002      	beq.n	8005f7c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 ff50 	bl	8006e1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 fc95 	bl	80068ac <UART_SetConfig>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d101      	bne.n	8005f8c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e01b      	b.n	8005fc4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689a      	ldr	r2, [r3, #8]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005faa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f042 0201 	orr.w	r2, r2, #1
 8005fba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 ffcf 	bl	8006f60 <UART_CheckIdleState>
 8005fc2:	4603      	mov	r3, r0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3708      	adds	r7, #8
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b08a      	sub	sp, #40	@ 0x28
 8005fd0:	af02      	add	r7, sp, #8
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	603b      	str	r3, [r7, #0]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005fe0:	2b20      	cmp	r3, #32
 8005fe2:	d177      	bne.n	80060d4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d002      	beq.n	8005ff0 <HAL_UART_Transmit+0x24>
 8005fea:	88fb      	ldrh	r3, [r7, #6]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d101      	bne.n	8005ff4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e070      	b.n	80060d6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2221      	movs	r2, #33	@ 0x21
 8006000:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006002:	f7fc fc73 	bl	80028ec <HAL_GetTick>
 8006006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	88fa      	ldrh	r2, [r7, #6]
 800600c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	88fa      	ldrh	r2, [r7, #6]
 8006014:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006020:	d108      	bne.n	8006034 <HAL_UART_Transmit+0x68>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d104      	bne.n	8006034 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800602a:	2300      	movs	r3, #0
 800602c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	61bb      	str	r3, [r7, #24]
 8006032:	e003      	b.n	800603c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006038:	2300      	movs	r3, #0
 800603a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800603c:	e02f      	b.n	800609e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	2200      	movs	r2, #0
 8006046:	2180      	movs	r1, #128	@ 0x80
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f001 f831 	bl	80070b0 <UART_WaitOnFlagUntilTimeout>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d004      	beq.n	800605e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2220      	movs	r2, #32
 8006058:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e03b      	b.n	80060d6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10b      	bne.n	800607c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	881a      	ldrh	r2, [r3, #0]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006070:	b292      	uxth	r2, r2
 8006072:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	3302      	adds	r3, #2
 8006078:	61bb      	str	r3, [r7, #24]
 800607a:	e007      	b.n	800608c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	781a      	ldrb	r2, [r3, #0]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	3301      	adds	r3, #1
 800608a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006092:	b29b      	uxth	r3, r3
 8006094:	3b01      	subs	r3, #1
 8006096:	b29a      	uxth	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1c9      	bne.n	800603e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	2200      	movs	r2, #0
 80060b2:	2140      	movs	r1, #64	@ 0x40
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f000 fffb 	bl	80070b0 <UART_WaitOnFlagUntilTimeout>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d004      	beq.n	80060ca <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2220      	movs	r2, #32
 80060c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e005      	b.n	80060d6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2220      	movs	r2, #32
 80060ce:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80060d0:	2300      	movs	r3, #0
 80060d2:	e000      	b.n	80060d6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80060d4:	2302      	movs	r3, #2
  }
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3720      	adds	r7, #32
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
	...

080060e0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b08a      	sub	sp, #40	@ 0x28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	4613      	mov	r3, r2
 80060ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060f4:	2b20      	cmp	r3, #32
 80060f6:	d137      	bne.n	8006168 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d002      	beq.n	8006104 <HAL_UART_Receive_IT+0x24>
 80060fe:	88fb      	ldrh	r3, [r7, #6]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e030      	b.n	800616a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a18      	ldr	r2, [pc, #96]	@ (8006174 <HAL_UART_Receive_IT+0x94>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d01f      	beq.n	8006158 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d018      	beq.n	8006158 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	e853 3f00 	ldrex	r3, [r3]
 8006132:	613b      	str	r3, [r7, #16]
   return(result);
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800613a:	627b      	str	r3, [r7, #36]	@ 0x24
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	461a      	mov	r2, r3
 8006142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006144:	623b      	str	r3, [r7, #32]
 8006146:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006148:	69f9      	ldr	r1, [r7, #28]
 800614a:	6a3a      	ldr	r2, [r7, #32]
 800614c:	e841 2300 	strex	r3, r2, [r1]
 8006150:	61bb      	str	r3, [r7, #24]
   return(result);
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1e6      	bne.n	8006126 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006158:	88fb      	ldrh	r3, [r7, #6]
 800615a:	461a      	mov	r2, r3
 800615c:	68b9      	ldr	r1, [r7, #8]
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f001 f80e 	bl	8007180 <UART_Start_Receive_IT>
 8006164:	4603      	mov	r3, r0
 8006166:	e000      	b.n	800616a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006168:	2302      	movs	r3, #2
  }
}
 800616a:	4618      	mov	r0, r3
 800616c:	3728      	adds	r7, #40	@ 0x28
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	40008000 	.word	0x40008000

08006178 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b08a      	sub	sp, #40	@ 0x28
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	4613      	mov	r3, r2
 8006184:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800618a:	2b20      	cmp	r3, #32
 800618c:	d165      	bne.n	800625a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d002      	beq.n	800619a <HAL_UART_Transmit_DMA+0x22>
 8006194:	88fb      	ldrh	r3, [r7, #6]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e05e      	b.n	800625c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	88fa      	ldrh	r2, [r7, #6]
 80061a8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	88fa      	ldrh	r2, [r7, #6]
 80061b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2221      	movs	r2, #33	@ 0x21
 80061c0:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d027      	beq.n	800621a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061ce:	4a25      	ldr	r2, [pc, #148]	@ (8006264 <HAL_UART_Transmit_DMA+0xec>)
 80061d0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061d6:	4a24      	ldr	r2, [pc, #144]	@ (8006268 <HAL_UART_Transmit_DMA+0xf0>)
 80061d8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061de:	4a23      	ldr	r2, [pc, #140]	@ (800626c <HAL_UART_Transmit_DMA+0xf4>)
 80061e0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061e6:	2200      	movs	r2, #0
 80061e8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061f2:	4619      	mov	r1, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3328      	adds	r3, #40	@ 0x28
 80061fa:	461a      	mov	r2, r3
 80061fc:	88fb      	ldrh	r3, [r7, #6]
 80061fe:	f7fd f84d 	bl	800329c <HAL_DMA_Start_IT>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d008      	beq.n	800621a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2210      	movs	r2, #16
 800620c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2220      	movs	r2, #32
 8006214:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e020      	b.n	800625c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2240      	movs	r2, #64	@ 0x40
 8006220:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	3308      	adds	r3, #8
 8006228:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	e853 3f00 	ldrex	r3, [r3]
 8006230:	613b      	str	r3, [r7, #16]
   return(result);
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006238:	627b      	str	r3, [r7, #36]	@ 0x24
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3308      	adds	r3, #8
 8006240:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006242:	623a      	str	r2, [r7, #32]
 8006244:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006246:	69f9      	ldr	r1, [r7, #28]
 8006248:	6a3a      	ldr	r2, [r7, #32]
 800624a:	e841 2300 	strex	r3, r2, [r1]
 800624e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1e5      	bne.n	8006222 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8006256:	2300      	movs	r3, #0
 8006258:	e000      	b.n	800625c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800625a:	2302      	movs	r3, #2
  }
}
 800625c:	4618      	mov	r0, r3
 800625e:	3728      	adds	r7, #40	@ 0x28
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	08007421 	.word	0x08007421
 8006268:	080074bb 	.word	0x080074bb
 800626c:	080074d7 	.word	0x080074d7

08006270 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b0ba      	sub	sp, #232	@ 0xe8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006296:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800629a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800629e:	4013      	ands	r3, r2
 80062a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80062a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d115      	bne.n	80062d8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80062ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062b0:	f003 0320 	and.w	r3, r3, #32
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00f      	beq.n	80062d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80062b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062bc:	f003 0320 	and.w	r3, r3, #32
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d009      	beq.n	80062d8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f000 82ae 	beq.w	800682a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	4798      	blx	r3
      }
      return;
 80062d6:	e2a8      	b.n	800682a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80062d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 8117 	beq.w	8006510 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80062e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d106      	bne.n	80062fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80062ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80062f2:	4b85      	ldr	r3, [pc, #532]	@ (8006508 <HAL_UART_IRQHandler+0x298>)
 80062f4:	4013      	ands	r3, r2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f000 810a 	beq.w	8006510 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80062fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006300:	f003 0301 	and.w	r3, r3, #1
 8006304:	2b00      	cmp	r3, #0
 8006306:	d011      	beq.n	800632c <HAL_UART_IRQHandler+0xbc>
 8006308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800630c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00b      	beq.n	800632c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2201      	movs	r2, #1
 800631a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006322:	f043 0201 	orr.w	r2, r3, #1
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800632c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006330:	f003 0302 	and.w	r3, r3, #2
 8006334:	2b00      	cmp	r3, #0
 8006336:	d011      	beq.n	800635c <HAL_UART_IRQHandler+0xec>
 8006338:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800633c:	f003 0301 	and.w	r3, r3, #1
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00b      	beq.n	800635c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2202      	movs	r2, #2
 800634a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006352:	f043 0204 	orr.w	r2, r3, #4
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800635c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006360:	f003 0304 	and.w	r3, r3, #4
 8006364:	2b00      	cmp	r3, #0
 8006366:	d011      	beq.n	800638c <HAL_UART_IRQHandler+0x11c>
 8006368:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00b      	beq.n	800638c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2204      	movs	r2, #4
 800637a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006382:	f043 0202 	orr.w	r2, r3, #2
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800638c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006390:	f003 0308 	and.w	r3, r3, #8
 8006394:	2b00      	cmp	r3, #0
 8006396:	d017      	beq.n	80063c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800639c:	f003 0320 	and.w	r3, r3, #32
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d105      	bne.n	80063b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80063a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00b      	beq.n	80063c8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2208      	movs	r2, #8
 80063b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063be:	f043 0208 	orr.w	r2, r3, #8
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80063c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d012      	beq.n	80063fa <HAL_UART_IRQHandler+0x18a>
 80063d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00c      	beq.n	80063fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80063e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063f0:	f043 0220 	orr.w	r2, r3, #32
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 8214 	beq.w	800682e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800640a:	f003 0320 	and.w	r3, r3, #32
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00d      	beq.n	800642e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006416:	f003 0320 	and.w	r3, r3, #32
 800641a:	2b00      	cmp	r3, #0
 800641c:	d007      	beq.n	800642e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006422:	2b00      	cmp	r3, #0
 8006424:	d003      	beq.n	800642e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006434:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006442:	2b40      	cmp	r3, #64	@ 0x40
 8006444:	d005      	beq.n	8006452 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006446:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800644a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800644e:	2b00      	cmp	r3, #0
 8006450:	d04f      	beq.n	80064f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 ff80 	bl	8007358 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006462:	2b40      	cmp	r3, #64	@ 0x40
 8006464:	d141      	bne.n	80064ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	3308      	adds	r3, #8
 800646c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006470:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006474:	e853 3f00 	ldrex	r3, [r3]
 8006478:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800647c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006480:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006484:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	3308      	adds	r3, #8
 800648e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006492:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006496:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800649e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80064a2:	e841 2300 	strex	r3, r2, [r1]
 80064a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80064aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1d9      	bne.n	8006466 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d013      	beq.n	80064e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064be:	4a13      	ldr	r2, [pc, #76]	@ (800650c <HAL_UART_IRQHandler+0x29c>)
 80064c0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fc ff86 	bl	80033d8 <HAL_DMA_Abort_IT>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d017      	beq.n	8006502 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80064dc:	4610      	mov	r0, r2
 80064de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064e0:	e00f      	b.n	8006502 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f9cc 	bl	8006880 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064e8:	e00b      	b.n	8006502 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f9c8 	bl	8006880 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064f0:	e007      	b.n	8006502 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f9c4 	bl	8006880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006500:	e195      	b.n	800682e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006502:	bf00      	nop
    return;
 8006504:	e193      	b.n	800682e <HAL_UART_IRQHandler+0x5be>
 8006506:	bf00      	nop
 8006508:	04000120 	.word	0x04000120
 800650c:	08007555 	.word	0x08007555

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006514:	2b01      	cmp	r3, #1
 8006516:	f040 814e 	bne.w	80067b6 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800651a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800651e:	f003 0310 	and.w	r3, r3, #16
 8006522:	2b00      	cmp	r3, #0
 8006524:	f000 8147 	beq.w	80067b6 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800652c:	f003 0310 	and.w	r3, r3, #16
 8006530:	2b00      	cmp	r3, #0
 8006532:	f000 8140 	beq.w	80067b6 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2210      	movs	r2, #16
 800653c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006548:	2b40      	cmp	r3, #64	@ 0x40
 800654a:	f040 80b8 	bne.w	80066be <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800655a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800655e:	2b00      	cmp	r3, #0
 8006560:	f000 8167 	beq.w	8006832 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800656a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800656e:	429a      	cmp	r2, r3
 8006570:	f080 815f 	bcs.w	8006832 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800657a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0320 	and.w	r3, r3, #32
 800658a:	2b00      	cmp	r3, #0
 800658c:	f040 8086 	bne.w	800669c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006598:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800659c:	e853 3f00 	ldrex	r3, [r3]
 80065a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80065a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80065a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	461a      	mov	r2, r3
 80065b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80065ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80065be:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80065c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80065ca:	e841 2300 	strex	r3, r2, [r1]
 80065ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80065d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1da      	bne.n	8006590 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3308      	adds	r3, #8
 80065e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065e4:	e853 3f00 	ldrex	r3, [r3]
 80065e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80065ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065ec:	f023 0301 	bic.w	r3, r3, #1
 80065f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	3308      	adds	r3, #8
 80065fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80065fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006602:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006604:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006606:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800660a:	e841 2300 	strex	r3, r2, [r1]
 800660e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006610:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1e1      	bne.n	80065da <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	3308      	adds	r3, #8
 800661c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006620:	e853 3f00 	ldrex	r3, [r3]
 8006624:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006626:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006628:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800662c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	3308      	adds	r3, #8
 8006636:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800663a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800663c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006640:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006642:	e841 2300 	strex	r3, r2, [r1]
 8006646:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006648:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1e3      	bne.n	8006616 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2220      	movs	r2, #32
 8006652:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006662:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006664:	e853 3f00 	ldrex	r3, [r3]
 8006668:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800666a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800666c:	f023 0310 	bic.w	r3, r3, #16
 8006670:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	461a      	mov	r2, r3
 800667a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800667e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006680:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006682:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006684:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006686:	e841 2300 	strex	r3, r2, [r1]
 800668a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800668c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1e4      	bne.n	800665c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006696:	4618      	mov	r0, r3
 8006698:	f7fc fe60 	bl	800335c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2202      	movs	r2, #2
 80066a0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	4619      	mov	r1, r3
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f8ec 	bl	8006894 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80066bc:	e0b9      	b.n	8006832 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80066d8:	b29b      	uxth	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f000 80ab 	beq.w	8006836 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80066e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f000 80a6 	beq.w	8006836 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f2:	e853 3f00 	ldrex	r3, [r3]
 80066f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	461a      	mov	r2, r3
 8006708:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800670c:	647b      	str	r3, [r7, #68]	@ 0x44
 800670e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006710:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006712:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006714:	e841 2300 	strex	r3, r2, [r1]
 8006718:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800671a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1e4      	bne.n	80066ea <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	3308      	adds	r3, #8
 8006726:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672a:	e853 3f00 	ldrex	r3, [r3]
 800672e:	623b      	str	r3, [r7, #32]
   return(result);
 8006730:	6a3b      	ldr	r3, [r7, #32]
 8006732:	f023 0301 	bic.w	r3, r3, #1
 8006736:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	3308      	adds	r3, #8
 8006740:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006744:	633a      	str	r2, [r7, #48]	@ 0x30
 8006746:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006748:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800674a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800674c:	e841 2300 	strex	r3, r2, [r1]
 8006750:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1e3      	bne.n	8006720 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2220      	movs	r2, #32
 800675c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	e853 3f00 	ldrex	r3, [r3]
 8006778:	60fb      	str	r3, [r7, #12]
   return(result);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f023 0310 	bic.w	r3, r3, #16
 8006780:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	461a      	mov	r2, r3
 800678a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800678e:	61fb      	str	r3, [r7, #28]
 8006790:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006792:	69b9      	ldr	r1, [r7, #24]
 8006794:	69fa      	ldr	r2, [r7, #28]
 8006796:	e841 2300 	strex	r3, r2, [r1]
 800679a:	617b      	str	r3, [r7, #20]
   return(result);
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1e4      	bne.n	800676c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2202      	movs	r2, #2
 80067a6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067ac:	4619      	mov	r1, r3
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f870 	bl	8006894 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067b4:	e03f      	b.n	8006836 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80067b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00e      	beq.n	80067e0 <HAL_UART_IRQHandler+0x570>
 80067c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d008      	beq.n	80067e0 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80067d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f001 f8b7 	bl	800794c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067de:	e02d      	b.n	800683c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80067e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00e      	beq.n	800680a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80067ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d008      	beq.n	800680a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d01c      	beq.n	800683a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	4798      	blx	r3
    }
    return;
 8006808:	e017      	b.n	800683a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800680a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800680e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006812:	2b00      	cmp	r3, #0
 8006814:	d012      	beq.n	800683c <HAL_UART_IRQHandler+0x5cc>
 8006816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800681a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00c      	beq.n	800683c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 feac 	bl	8007580 <UART_EndTransmit_IT>
    return;
 8006828:	e008      	b.n	800683c <HAL_UART_IRQHandler+0x5cc>
      return;
 800682a:	bf00      	nop
 800682c:	e006      	b.n	800683c <HAL_UART_IRQHandler+0x5cc>
    return;
 800682e:	bf00      	nop
 8006830:	e004      	b.n	800683c <HAL_UART_IRQHandler+0x5cc>
      return;
 8006832:	bf00      	nop
 8006834:	e002      	b.n	800683c <HAL_UART_IRQHandler+0x5cc>
      return;
 8006836:	bf00      	nop
 8006838:	e000      	b.n	800683c <HAL_UART_IRQHandler+0x5cc>
    return;
 800683a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800683c:	37e8      	adds	r7, #232	@ 0xe8
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop

08006844 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006888:	bf00      	nop
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	460b      	mov	r3, r1
 800689e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068b0:	b08a      	sub	sp, #40	@ 0x28
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068b6:	2300      	movs	r3, #0
 80068b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	689a      	ldr	r2, [r3, #8]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	431a      	orrs	r2, r3
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	431a      	orrs	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	4ba4      	ldr	r3, [pc, #656]	@ (8006b6c <UART_SetConfig+0x2c0>)
 80068dc:	4013      	ands	r3, r2
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	6812      	ldr	r2, [r2, #0]
 80068e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80068e4:	430b      	orrs	r3, r1
 80068e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a99      	ldr	r2, [pc, #612]	@ (8006b70 <UART_SetConfig+0x2c4>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d004      	beq.n	8006918 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006914:	4313      	orrs	r3, r2
 8006916:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006928:	430a      	orrs	r2, r1
 800692a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a90      	ldr	r2, [pc, #576]	@ (8006b74 <UART_SetConfig+0x2c8>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d126      	bne.n	8006984 <UART_SetConfig+0xd8>
 8006936:	4b90      	ldr	r3, [pc, #576]	@ (8006b78 <UART_SetConfig+0x2cc>)
 8006938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800693c:	f003 0303 	and.w	r3, r3, #3
 8006940:	2b03      	cmp	r3, #3
 8006942:	d81b      	bhi.n	800697c <UART_SetConfig+0xd0>
 8006944:	a201      	add	r2, pc, #4	@ (adr r2, 800694c <UART_SetConfig+0xa0>)
 8006946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694a:	bf00      	nop
 800694c:	0800695d 	.word	0x0800695d
 8006950:	0800696d 	.word	0x0800696d
 8006954:	08006965 	.word	0x08006965
 8006958:	08006975 	.word	0x08006975
 800695c:	2301      	movs	r3, #1
 800695e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006962:	e116      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006964:	2302      	movs	r3, #2
 8006966:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800696a:	e112      	b.n	8006b92 <UART_SetConfig+0x2e6>
 800696c:	2304      	movs	r3, #4
 800696e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006972:	e10e      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006974:	2308      	movs	r3, #8
 8006976:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800697a:	e10a      	b.n	8006b92 <UART_SetConfig+0x2e6>
 800697c:	2310      	movs	r3, #16
 800697e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006982:	e106      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a7c      	ldr	r2, [pc, #496]	@ (8006b7c <UART_SetConfig+0x2d0>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d138      	bne.n	8006a00 <UART_SetConfig+0x154>
 800698e:	4b7a      	ldr	r3, [pc, #488]	@ (8006b78 <UART_SetConfig+0x2cc>)
 8006990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006994:	f003 030c 	and.w	r3, r3, #12
 8006998:	2b0c      	cmp	r3, #12
 800699a:	d82d      	bhi.n	80069f8 <UART_SetConfig+0x14c>
 800699c:	a201      	add	r2, pc, #4	@ (adr r2, 80069a4 <UART_SetConfig+0xf8>)
 800699e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a2:	bf00      	nop
 80069a4:	080069d9 	.word	0x080069d9
 80069a8:	080069f9 	.word	0x080069f9
 80069ac:	080069f9 	.word	0x080069f9
 80069b0:	080069f9 	.word	0x080069f9
 80069b4:	080069e9 	.word	0x080069e9
 80069b8:	080069f9 	.word	0x080069f9
 80069bc:	080069f9 	.word	0x080069f9
 80069c0:	080069f9 	.word	0x080069f9
 80069c4:	080069e1 	.word	0x080069e1
 80069c8:	080069f9 	.word	0x080069f9
 80069cc:	080069f9 	.word	0x080069f9
 80069d0:	080069f9 	.word	0x080069f9
 80069d4:	080069f1 	.word	0x080069f1
 80069d8:	2300      	movs	r3, #0
 80069da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069de:	e0d8      	b.n	8006b92 <UART_SetConfig+0x2e6>
 80069e0:	2302      	movs	r3, #2
 80069e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069e6:	e0d4      	b.n	8006b92 <UART_SetConfig+0x2e6>
 80069e8:	2304      	movs	r3, #4
 80069ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069ee:	e0d0      	b.n	8006b92 <UART_SetConfig+0x2e6>
 80069f0:	2308      	movs	r3, #8
 80069f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069f6:	e0cc      	b.n	8006b92 <UART_SetConfig+0x2e6>
 80069f8:	2310      	movs	r3, #16
 80069fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069fe:	e0c8      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a5e      	ldr	r2, [pc, #376]	@ (8006b80 <UART_SetConfig+0x2d4>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d125      	bne.n	8006a56 <UART_SetConfig+0x1aa>
 8006a0a:	4b5b      	ldr	r3, [pc, #364]	@ (8006b78 <UART_SetConfig+0x2cc>)
 8006a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a10:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006a14:	2b30      	cmp	r3, #48	@ 0x30
 8006a16:	d016      	beq.n	8006a46 <UART_SetConfig+0x19a>
 8006a18:	2b30      	cmp	r3, #48	@ 0x30
 8006a1a:	d818      	bhi.n	8006a4e <UART_SetConfig+0x1a2>
 8006a1c:	2b20      	cmp	r3, #32
 8006a1e:	d00a      	beq.n	8006a36 <UART_SetConfig+0x18a>
 8006a20:	2b20      	cmp	r3, #32
 8006a22:	d814      	bhi.n	8006a4e <UART_SetConfig+0x1a2>
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d002      	beq.n	8006a2e <UART_SetConfig+0x182>
 8006a28:	2b10      	cmp	r3, #16
 8006a2a:	d008      	beq.n	8006a3e <UART_SetConfig+0x192>
 8006a2c:	e00f      	b.n	8006a4e <UART_SetConfig+0x1a2>
 8006a2e:	2300      	movs	r3, #0
 8006a30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a34:	e0ad      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006a36:	2302      	movs	r3, #2
 8006a38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a3c:	e0a9      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006a3e:	2304      	movs	r3, #4
 8006a40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a44:	e0a5      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006a46:	2308      	movs	r3, #8
 8006a48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a4c:	e0a1      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006a4e:	2310      	movs	r3, #16
 8006a50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a54:	e09d      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a4a      	ldr	r2, [pc, #296]	@ (8006b84 <UART_SetConfig+0x2d8>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d125      	bne.n	8006aac <UART_SetConfig+0x200>
 8006a60:	4b45      	ldr	r3, [pc, #276]	@ (8006b78 <UART_SetConfig+0x2cc>)
 8006a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a66:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006a6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a6c:	d016      	beq.n	8006a9c <UART_SetConfig+0x1f0>
 8006a6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a70:	d818      	bhi.n	8006aa4 <UART_SetConfig+0x1f8>
 8006a72:	2b80      	cmp	r3, #128	@ 0x80
 8006a74:	d00a      	beq.n	8006a8c <UART_SetConfig+0x1e0>
 8006a76:	2b80      	cmp	r3, #128	@ 0x80
 8006a78:	d814      	bhi.n	8006aa4 <UART_SetConfig+0x1f8>
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d002      	beq.n	8006a84 <UART_SetConfig+0x1d8>
 8006a7e:	2b40      	cmp	r3, #64	@ 0x40
 8006a80:	d008      	beq.n	8006a94 <UART_SetConfig+0x1e8>
 8006a82:	e00f      	b.n	8006aa4 <UART_SetConfig+0x1f8>
 8006a84:	2300      	movs	r3, #0
 8006a86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a8a:	e082      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a92:	e07e      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006a94:	2304      	movs	r3, #4
 8006a96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a9a:	e07a      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006a9c:	2308      	movs	r3, #8
 8006a9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006aa2:	e076      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006aa4:	2310      	movs	r3, #16
 8006aa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006aaa:	e072      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a35      	ldr	r2, [pc, #212]	@ (8006b88 <UART_SetConfig+0x2dc>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d12a      	bne.n	8006b0c <UART_SetConfig+0x260>
 8006ab6:	4b30      	ldr	r3, [pc, #192]	@ (8006b78 <UART_SetConfig+0x2cc>)
 8006ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006abc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ac0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ac4:	d01a      	beq.n	8006afc <UART_SetConfig+0x250>
 8006ac6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006aca:	d81b      	bhi.n	8006b04 <UART_SetConfig+0x258>
 8006acc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ad0:	d00c      	beq.n	8006aec <UART_SetConfig+0x240>
 8006ad2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ad6:	d815      	bhi.n	8006b04 <UART_SetConfig+0x258>
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d003      	beq.n	8006ae4 <UART_SetConfig+0x238>
 8006adc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ae0:	d008      	beq.n	8006af4 <UART_SetConfig+0x248>
 8006ae2:	e00f      	b.n	8006b04 <UART_SetConfig+0x258>
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006aea:	e052      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006aec:	2302      	movs	r3, #2
 8006aee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006af2:	e04e      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006af4:	2304      	movs	r3, #4
 8006af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006afa:	e04a      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006afc:	2308      	movs	r3, #8
 8006afe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b02:	e046      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006b04:	2310      	movs	r3, #16
 8006b06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b0a:	e042      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a17      	ldr	r2, [pc, #92]	@ (8006b70 <UART_SetConfig+0x2c4>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d13a      	bne.n	8006b8c <UART_SetConfig+0x2e0>
 8006b16:	4b18      	ldr	r3, [pc, #96]	@ (8006b78 <UART_SetConfig+0x2cc>)
 8006b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b1c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006b20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b24:	d01a      	beq.n	8006b5c <UART_SetConfig+0x2b0>
 8006b26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b2a:	d81b      	bhi.n	8006b64 <UART_SetConfig+0x2b8>
 8006b2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b30:	d00c      	beq.n	8006b4c <UART_SetConfig+0x2a0>
 8006b32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b36:	d815      	bhi.n	8006b64 <UART_SetConfig+0x2b8>
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d003      	beq.n	8006b44 <UART_SetConfig+0x298>
 8006b3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b40:	d008      	beq.n	8006b54 <UART_SetConfig+0x2a8>
 8006b42:	e00f      	b.n	8006b64 <UART_SetConfig+0x2b8>
 8006b44:	2300      	movs	r3, #0
 8006b46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b4a:	e022      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b52:	e01e      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006b54:	2304      	movs	r3, #4
 8006b56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b5a:	e01a      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006b5c:	2308      	movs	r3, #8
 8006b5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b62:	e016      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006b64:	2310      	movs	r3, #16
 8006b66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b6a:	e012      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006b6c:	efff69f3 	.word	0xefff69f3
 8006b70:	40008000 	.word	0x40008000
 8006b74:	40013800 	.word	0x40013800
 8006b78:	40021000 	.word	0x40021000
 8006b7c:	40004400 	.word	0x40004400
 8006b80:	40004800 	.word	0x40004800
 8006b84:	40004c00 	.word	0x40004c00
 8006b88:	40005000 	.word	0x40005000
 8006b8c:	2310      	movs	r3, #16
 8006b8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a9f      	ldr	r2, [pc, #636]	@ (8006e14 <UART_SetConfig+0x568>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d17a      	bne.n	8006c92 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006ba0:	2b08      	cmp	r3, #8
 8006ba2:	d824      	bhi.n	8006bee <UART_SetConfig+0x342>
 8006ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8006bac <UART_SetConfig+0x300>)
 8006ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006baa:	bf00      	nop
 8006bac:	08006bd1 	.word	0x08006bd1
 8006bb0:	08006bef 	.word	0x08006bef
 8006bb4:	08006bd9 	.word	0x08006bd9
 8006bb8:	08006bef 	.word	0x08006bef
 8006bbc:	08006bdf 	.word	0x08006bdf
 8006bc0:	08006bef 	.word	0x08006bef
 8006bc4:	08006bef 	.word	0x08006bef
 8006bc8:	08006bef 	.word	0x08006bef
 8006bcc:	08006be7 	.word	0x08006be7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bd0:	f7fe f920 	bl	8004e14 <HAL_RCC_GetPCLK1Freq>
 8006bd4:	61f8      	str	r0, [r7, #28]
        break;
 8006bd6:	e010      	b.n	8006bfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bd8:	4b8f      	ldr	r3, [pc, #572]	@ (8006e18 <UART_SetConfig+0x56c>)
 8006bda:	61fb      	str	r3, [r7, #28]
        break;
 8006bdc:	e00d      	b.n	8006bfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bde:	f7fe f881 	bl	8004ce4 <HAL_RCC_GetSysClockFreq>
 8006be2:	61f8      	str	r0, [r7, #28]
        break;
 8006be4:	e009      	b.n	8006bfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006be6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bea:	61fb      	str	r3, [r7, #28]
        break;
 8006bec:	e005      	b.n	8006bfa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006bf8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f000 80fb 	beq.w	8006df8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	4613      	mov	r3, r2
 8006c08:	005b      	lsls	r3, r3, #1
 8006c0a:	4413      	add	r3, r2
 8006c0c:	69fa      	ldr	r2, [r7, #28]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d305      	bcc.n	8006c1e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c18:	69fa      	ldr	r2, [r7, #28]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d903      	bls.n	8006c26 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006c24:	e0e8      	b.n	8006df8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	461c      	mov	r4, r3
 8006c2c:	4615      	mov	r5, r2
 8006c2e:	f04f 0200 	mov.w	r2, #0
 8006c32:	f04f 0300 	mov.w	r3, #0
 8006c36:	022b      	lsls	r3, r5, #8
 8006c38:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006c3c:	0222      	lsls	r2, r4, #8
 8006c3e:	68f9      	ldr	r1, [r7, #12]
 8006c40:	6849      	ldr	r1, [r1, #4]
 8006c42:	0849      	lsrs	r1, r1, #1
 8006c44:	2000      	movs	r0, #0
 8006c46:	4688      	mov	r8, r1
 8006c48:	4681      	mov	r9, r0
 8006c4a:	eb12 0a08 	adds.w	sl, r2, r8
 8006c4e:	eb43 0b09 	adc.w	fp, r3, r9
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	603b      	str	r3, [r7, #0]
 8006c5a:	607a      	str	r2, [r7, #4]
 8006c5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c60:	4650      	mov	r0, sl
 8006c62:	4659      	mov	r1, fp
 8006c64:	f7f9 ffba 	bl	8000bdc <__aeabi_uldivmod>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c76:	d308      	bcc.n	8006c8a <UART_SetConfig+0x3de>
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c7e:	d204      	bcs.n	8006c8a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	69ba      	ldr	r2, [r7, #24]
 8006c86:	60da      	str	r2, [r3, #12]
 8006c88:	e0b6      	b.n	8006df8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006c90:	e0b2      	b.n	8006df8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	69db      	ldr	r3, [r3, #28]
 8006c96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c9a:	d15e      	bne.n	8006d5a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006c9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006ca0:	2b08      	cmp	r3, #8
 8006ca2:	d828      	bhi.n	8006cf6 <UART_SetConfig+0x44a>
 8006ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8006cac <UART_SetConfig+0x400>)
 8006ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006caa:	bf00      	nop
 8006cac:	08006cd1 	.word	0x08006cd1
 8006cb0:	08006cd9 	.word	0x08006cd9
 8006cb4:	08006ce1 	.word	0x08006ce1
 8006cb8:	08006cf7 	.word	0x08006cf7
 8006cbc:	08006ce7 	.word	0x08006ce7
 8006cc0:	08006cf7 	.word	0x08006cf7
 8006cc4:	08006cf7 	.word	0x08006cf7
 8006cc8:	08006cf7 	.word	0x08006cf7
 8006ccc:	08006cef 	.word	0x08006cef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cd0:	f7fe f8a0 	bl	8004e14 <HAL_RCC_GetPCLK1Freq>
 8006cd4:	61f8      	str	r0, [r7, #28]
        break;
 8006cd6:	e014      	b.n	8006d02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cd8:	f7fe f8b2 	bl	8004e40 <HAL_RCC_GetPCLK2Freq>
 8006cdc:	61f8      	str	r0, [r7, #28]
        break;
 8006cde:	e010      	b.n	8006d02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ce0:	4b4d      	ldr	r3, [pc, #308]	@ (8006e18 <UART_SetConfig+0x56c>)
 8006ce2:	61fb      	str	r3, [r7, #28]
        break;
 8006ce4:	e00d      	b.n	8006d02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ce6:	f7fd fffd 	bl	8004ce4 <HAL_RCC_GetSysClockFreq>
 8006cea:	61f8      	str	r0, [r7, #28]
        break;
 8006cec:	e009      	b.n	8006d02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cf2:	61fb      	str	r3, [r7, #28]
        break;
 8006cf4:	e005      	b.n	8006d02 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006d00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d077      	beq.n	8006df8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	005a      	lsls	r2, r3, #1
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	085b      	lsrs	r3, r3, #1
 8006d12:	441a      	add	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d1c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	2b0f      	cmp	r3, #15
 8006d22:	d916      	bls.n	8006d52 <UART_SetConfig+0x4a6>
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d2a:	d212      	bcs.n	8006d52 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	f023 030f 	bic.w	r3, r3, #15
 8006d34:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	085b      	lsrs	r3, r3, #1
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	f003 0307 	and.w	r3, r3, #7
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	8afb      	ldrh	r3, [r7, #22]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	8afa      	ldrh	r2, [r7, #22]
 8006d4e:	60da      	str	r2, [r3, #12]
 8006d50:	e052      	b.n	8006df8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006d58:	e04e      	b.n	8006df8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d5a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006d5e:	2b08      	cmp	r3, #8
 8006d60:	d827      	bhi.n	8006db2 <UART_SetConfig+0x506>
 8006d62:	a201      	add	r2, pc, #4	@ (adr r2, 8006d68 <UART_SetConfig+0x4bc>)
 8006d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d68:	08006d8d 	.word	0x08006d8d
 8006d6c:	08006d95 	.word	0x08006d95
 8006d70:	08006d9d 	.word	0x08006d9d
 8006d74:	08006db3 	.word	0x08006db3
 8006d78:	08006da3 	.word	0x08006da3
 8006d7c:	08006db3 	.word	0x08006db3
 8006d80:	08006db3 	.word	0x08006db3
 8006d84:	08006db3 	.word	0x08006db3
 8006d88:	08006dab 	.word	0x08006dab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d8c:	f7fe f842 	bl	8004e14 <HAL_RCC_GetPCLK1Freq>
 8006d90:	61f8      	str	r0, [r7, #28]
        break;
 8006d92:	e014      	b.n	8006dbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d94:	f7fe f854 	bl	8004e40 <HAL_RCC_GetPCLK2Freq>
 8006d98:	61f8      	str	r0, [r7, #28]
        break;
 8006d9a:	e010      	b.n	8006dbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d9c:	4b1e      	ldr	r3, [pc, #120]	@ (8006e18 <UART_SetConfig+0x56c>)
 8006d9e:	61fb      	str	r3, [r7, #28]
        break;
 8006da0:	e00d      	b.n	8006dbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006da2:	f7fd ff9f 	bl	8004ce4 <HAL_RCC_GetSysClockFreq>
 8006da6:	61f8      	str	r0, [r7, #28]
        break;
 8006da8:	e009      	b.n	8006dbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006daa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006dae:	61fb      	str	r3, [r7, #28]
        break;
 8006db0:	e005      	b.n	8006dbe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006db2:	2300      	movs	r3, #0
 8006db4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006dbc:	bf00      	nop
    }

    if (pclk != 0U)
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d019      	beq.n	8006df8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	085a      	lsrs	r2, r3, #1
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	441a      	add	r2, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	2b0f      	cmp	r3, #15
 8006ddc:	d909      	bls.n	8006df2 <UART_SetConfig+0x546>
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006de4:	d205      	bcs.n	8006df2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	60da      	str	r2, [r3, #12]
 8006df0:	e002      	b.n	8006df8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006e04:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3728      	adds	r7, #40	@ 0x28
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e12:	bf00      	nop
 8006e14:	40008000 	.word	0x40008000
 8006e18:	00f42400 	.word	0x00f42400

08006e1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e28:	f003 0308 	and.w	r3, r3, #8
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00a      	beq.n	8006e46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00a      	beq.n	8006e68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	430a      	orrs	r2, r1
 8006e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e6c:	f003 0302 	and.w	r3, r3, #2
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00a      	beq.n	8006e8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	430a      	orrs	r2, r1
 8006e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e8e:	f003 0304 	and.w	r3, r3, #4
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00a      	beq.n	8006eac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	430a      	orrs	r2, r1
 8006eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb0:	f003 0310 	and.w	r3, r3, #16
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00a      	beq.n	8006ece <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed2:	f003 0320 	and.w	r3, r3, #32
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00a      	beq.n	8006ef0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	430a      	orrs	r2, r1
 8006eee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d01a      	beq.n	8006f32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f1a:	d10a      	bne.n	8006f32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00a      	beq.n	8006f54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	430a      	orrs	r2, r1
 8006f52:	605a      	str	r2, [r3, #4]
  }
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b098      	sub	sp, #96	@ 0x60
 8006f64:	af02      	add	r7, sp, #8
 8006f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f70:	f7fb fcbc 	bl	80028ec <HAL_GetTick>
 8006f74:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0308 	and.w	r3, r3, #8
 8006f80:	2b08      	cmp	r3, #8
 8006f82:	d12e      	bne.n	8006fe2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f88c 	bl	80070b0 <UART_WaitOnFlagUntilTimeout>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d021      	beq.n	8006fe2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa6:	e853 3f00 	ldrex	r3, [r3]
 8006faa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	461a      	mov	r2, r3
 8006fba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fbe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006fc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fc4:	e841 2300 	strex	r3, r2, [r1]
 8006fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1e6      	bne.n	8006f9e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2220      	movs	r2, #32
 8006fd4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e062      	b.n	80070a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0304 	and.w	r3, r3, #4
 8006fec:	2b04      	cmp	r3, #4
 8006fee:	d149      	bne.n	8007084 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ff0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f856 	bl	80070b0 <UART_WaitOnFlagUntilTimeout>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d03c      	beq.n	8007084 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007012:	e853 3f00 	ldrex	r3, [r3]
 8007016:	623b      	str	r3, [r7, #32]
   return(result);
 8007018:	6a3b      	ldr	r3, [r7, #32]
 800701a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800701e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	461a      	mov	r2, r3
 8007026:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007028:	633b      	str	r3, [r7, #48]	@ 0x30
 800702a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800702e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007030:	e841 2300 	strex	r3, r2, [r1]
 8007034:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1e6      	bne.n	800700a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	3308      	adds	r3, #8
 8007042:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	e853 3f00 	ldrex	r3, [r3]
 800704a:	60fb      	str	r3, [r7, #12]
   return(result);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f023 0301 	bic.w	r3, r3, #1
 8007052:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	3308      	adds	r3, #8
 800705a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800705c:	61fa      	str	r2, [r7, #28]
 800705e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007060:	69b9      	ldr	r1, [r7, #24]
 8007062:	69fa      	ldr	r2, [r7, #28]
 8007064:	e841 2300 	strex	r3, r2, [r1]
 8007068:	617b      	str	r3, [r7, #20]
   return(result);
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1e5      	bne.n	800703c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2220      	movs	r2, #32
 8007074:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	e011      	b.n	80070a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2220      	movs	r2, #32
 8007088:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2220      	movs	r2, #32
 800708e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3758      	adds	r7, #88	@ 0x58
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	603b      	str	r3, [r7, #0]
 80070bc:	4613      	mov	r3, r2
 80070be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070c0:	e049      	b.n	8007156 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c8:	d045      	beq.n	8007156 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070ca:	f7fb fc0f 	bl	80028ec <HAL_GetTick>
 80070ce:	4602      	mov	r2, r0
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	69ba      	ldr	r2, [r7, #24]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d302      	bcc.n	80070e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d101      	bne.n	80070e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e048      	b.n	8007176 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0304 	and.w	r3, r3, #4
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d031      	beq.n	8007156 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	69db      	ldr	r3, [r3, #28]
 80070f8:	f003 0308 	and.w	r3, r3, #8
 80070fc:	2b08      	cmp	r3, #8
 80070fe:	d110      	bne.n	8007122 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2208      	movs	r2, #8
 8007106:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f000 f925 	bl	8007358 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2208      	movs	r2, #8
 8007112:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e029      	b.n	8007176 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	69db      	ldr	r3, [r3, #28]
 8007128:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800712c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007130:	d111      	bne.n	8007156 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800713a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f000 f90b 	bl	8007358 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2220      	movs	r2, #32
 8007146:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e00f      	b.n	8007176 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	69da      	ldr	r2, [r3, #28]
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	4013      	ands	r3, r2
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	429a      	cmp	r2, r3
 8007164:	bf0c      	ite	eq
 8007166:	2301      	moveq	r3, #1
 8007168:	2300      	movne	r3, #0
 800716a:	b2db      	uxtb	r3, r3
 800716c:	461a      	mov	r2, r3
 800716e:	79fb      	ldrb	r3, [r7, #7]
 8007170:	429a      	cmp	r2, r3
 8007172:	d0a6      	beq.n	80070c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
	...

08007180 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007180:	b480      	push	{r7}
 8007182:	b097      	sub	sp, #92	@ 0x5c
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	4613      	mov	r3, r2
 800718c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	88fa      	ldrh	r2, [r7, #6]
 8007198:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	88fa      	ldrh	r2, [r7, #6]
 80071a0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071b2:	d10e      	bne.n	80071d2 <UART_Start_Receive_IT+0x52>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d105      	bne.n	80071c8 <UART_Start_Receive_IT+0x48>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80071c2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80071c6:	e02d      	b.n	8007224 <UART_Start_Receive_IT+0xa4>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	22ff      	movs	r2, #255	@ 0xff
 80071cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80071d0:	e028      	b.n	8007224 <UART_Start_Receive_IT+0xa4>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10d      	bne.n	80071f6 <UART_Start_Receive_IT+0x76>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d104      	bne.n	80071ec <UART_Start_Receive_IT+0x6c>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	22ff      	movs	r2, #255	@ 0xff
 80071e6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80071ea:	e01b      	b.n	8007224 <UART_Start_Receive_IT+0xa4>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	227f      	movs	r2, #127	@ 0x7f
 80071f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80071f4:	e016      	b.n	8007224 <UART_Start_Receive_IT+0xa4>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071fe:	d10d      	bne.n	800721c <UART_Start_Receive_IT+0x9c>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d104      	bne.n	8007212 <UART_Start_Receive_IT+0x92>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	227f      	movs	r2, #127	@ 0x7f
 800720c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007210:	e008      	b.n	8007224 <UART_Start_Receive_IT+0xa4>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	223f      	movs	r2, #63	@ 0x3f
 8007216:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800721a:	e003      	b.n	8007224 <UART_Start_Receive_IT+0xa4>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2222      	movs	r2, #34	@ 0x22
 8007230:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	3308      	adds	r3, #8
 800723a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800723e:	e853 3f00 	ldrex	r3, [r3]
 8007242:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007246:	f043 0301 	orr.w	r3, r3, #1
 800724a:	657b      	str	r3, [r7, #84]	@ 0x54
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	3308      	adds	r3, #8
 8007252:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007254:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007256:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007258:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800725a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800725c:	e841 2300 	strex	r3, r2, [r1]
 8007260:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007262:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007264:	2b00      	cmp	r3, #0
 8007266:	d1e5      	bne.n	8007234 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007270:	d107      	bne.n	8007282 <UART_Start_Receive_IT+0x102>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d103      	bne.n	8007282 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	4a21      	ldr	r2, [pc, #132]	@ (8007304 <UART_Start_Receive_IT+0x184>)
 800727e:	669a      	str	r2, [r3, #104]	@ 0x68
 8007280:	e002      	b.n	8007288 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	4a20      	ldr	r2, [pc, #128]	@ (8007308 <UART_Start_Receive_IT+0x188>)
 8007286:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d019      	beq.n	80072c4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007298:	e853 3f00 	ldrex	r3, [r3]
 800729c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800729e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80072a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	461a      	mov	r2, r3
 80072ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80072b0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80072b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80072b6:	e841 2300 	strex	r3, r2, [r1]
 80072ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80072bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1e6      	bne.n	8007290 <UART_Start_Receive_IT+0x110>
 80072c2:	e018      	b.n	80072f6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	e853 3f00 	ldrex	r3, [r3]
 80072d0:	613b      	str	r3, [r7, #16]
   return(result);
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	f043 0320 	orr.w	r3, r3, #32
 80072d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	461a      	mov	r2, r3
 80072e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072e2:	623b      	str	r3, [r7, #32]
 80072e4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e6:	69f9      	ldr	r1, [r7, #28]
 80072e8:	6a3a      	ldr	r2, [r7, #32]
 80072ea:	e841 2300 	strex	r3, r2, [r1]
 80072ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1e6      	bne.n	80072c4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	375c      	adds	r7, #92	@ 0x5c
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr
 8007304:	08007791 	.word	0x08007791
 8007308:	080075d5 	.word	0x080075d5

0800730c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800730c:	b480      	push	{r7}
 800730e:	b089      	sub	sp, #36	@ 0x24
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	e853 3f00 	ldrex	r3, [r3]
 8007320:	60bb      	str	r3, [r7, #8]
   return(result);
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007328:	61fb      	str	r3, [r7, #28]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	461a      	mov	r2, r3
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	61bb      	str	r3, [r7, #24]
 8007334:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007336:	6979      	ldr	r1, [r7, #20]
 8007338:	69ba      	ldr	r2, [r7, #24]
 800733a:	e841 2300 	strex	r3, r2, [r1]
 800733e:	613b      	str	r3, [r7, #16]
   return(result);
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1e6      	bne.n	8007314 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2220      	movs	r2, #32
 800734a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800734c:	bf00      	nop
 800734e:	3724      	adds	r7, #36	@ 0x24
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007358:	b480      	push	{r7}
 800735a:	b095      	sub	sp, #84	@ 0x54
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007368:	e853 3f00 	ldrex	r3, [r3]
 800736c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800736e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007370:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007374:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	461a      	mov	r2, r3
 800737c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800737e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007380:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007382:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007384:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007386:	e841 2300 	strex	r3, r2, [r1]
 800738a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800738c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1e6      	bne.n	8007360 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	3308      	adds	r3, #8
 8007398:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739a:	6a3b      	ldr	r3, [r7, #32]
 800739c:	e853 3f00 	ldrex	r3, [r3]
 80073a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	f023 0301 	bic.w	r3, r3, #1
 80073a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3308      	adds	r3, #8
 80073b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073ba:	e841 2300 	strex	r3, r2, [r1]
 80073be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1e5      	bne.n	8007392 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d118      	bne.n	8007400 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	e853 3f00 	ldrex	r3, [r3]
 80073da:	60bb      	str	r3, [r7, #8]
   return(result);
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	f023 0310 	bic.w	r3, r3, #16
 80073e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	461a      	mov	r2, r3
 80073ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073ec:	61bb      	str	r3, [r7, #24]
 80073ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f0:	6979      	ldr	r1, [r7, #20]
 80073f2:	69ba      	ldr	r2, [r7, #24]
 80073f4:	e841 2300 	strex	r3, r2, [r1]
 80073f8:	613b      	str	r3, [r7, #16]
   return(result);
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1e6      	bne.n	80073ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2220      	movs	r2, #32
 8007404:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007414:	bf00      	nop
 8007416:	3754      	adds	r7, #84	@ 0x54
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b090      	sub	sp, #64	@ 0x40
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800742c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0320 	and.w	r3, r3, #32
 8007438:	2b00      	cmp	r3, #0
 800743a:	d137      	bne.n	80074ac <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800743c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800743e:	2200      	movs	r2, #0
 8007440:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	3308      	adds	r3, #8
 800744a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744e:	e853 3f00 	ldrex	r3, [r3]
 8007452:	623b      	str	r3, [r7, #32]
   return(result);
 8007454:	6a3b      	ldr	r3, [r7, #32]
 8007456:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800745a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800745c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	3308      	adds	r3, #8
 8007462:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007464:	633a      	str	r2, [r7, #48]	@ 0x30
 8007466:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007468:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800746a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800746c:	e841 2300 	strex	r3, r2, [r1]
 8007470:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1e5      	bne.n	8007444 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007478:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	e853 3f00 	ldrex	r3, [r3]
 8007484:	60fb      	str	r3, [r7, #12]
   return(result);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800748c:	637b      	str	r3, [r7, #52]	@ 0x34
 800748e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	461a      	mov	r2, r3
 8007494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007496:	61fb      	str	r3, [r7, #28]
 8007498:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749a:	69b9      	ldr	r1, [r7, #24]
 800749c:	69fa      	ldr	r2, [r7, #28]
 800749e:	e841 2300 	strex	r3, r2, [r1]
 80074a2:	617b      	str	r3, [r7, #20]
   return(result);
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1e6      	bne.n	8007478 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80074aa:	e002      	b.n	80074b2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80074ac:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80074ae:	f7ff f9c9 	bl	8006844 <HAL_UART_TxCpltCallback>
}
 80074b2:	bf00      	nop
 80074b4:	3740      	adds	r7, #64	@ 0x40
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b084      	sub	sp, #16
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f7ff f9c5 	bl	8006858 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074ce:	bf00      	nop
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b086      	sub	sp, #24
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074e8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074f0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074fc:	2b80      	cmp	r3, #128	@ 0x80
 80074fe:	d109      	bne.n	8007514 <UART_DMAError+0x3e>
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	2b21      	cmp	r3, #33	@ 0x21
 8007504:	d106      	bne.n	8007514 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	2200      	movs	r2, #0
 800750a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800750e:	6978      	ldr	r0, [r7, #20]
 8007510:	f7ff fefc 	bl	800730c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800751e:	2b40      	cmp	r3, #64	@ 0x40
 8007520:	d109      	bne.n	8007536 <UART_DMAError+0x60>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2b22      	cmp	r3, #34	@ 0x22
 8007526:	d106      	bne.n	8007536 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	2200      	movs	r2, #0
 800752c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8007530:	6978      	ldr	r0, [r7, #20]
 8007532:	f7ff ff11 	bl	8007358 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800753c:	f043 0210 	orr.w	r2, r3, #16
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007546:	6978      	ldr	r0, [r7, #20]
 8007548:	f7ff f99a 	bl	8006880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800754c:	bf00      	nop
 800754e:	3718      	adds	r7, #24
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007560:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f7ff f984 	bl	8006880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007578:	bf00      	nop
 800757a:	3710      	adds	r7, #16
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b088      	sub	sp, #32
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	e853 3f00 	ldrex	r3, [r3]
 8007594:	60bb      	str	r3, [r7, #8]
   return(result);
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800759c:	61fb      	str	r3, [r7, #28]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	461a      	mov	r2, r3
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	61bb      	str	r3, [r7, #24]
 80075a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075aa:	6979      	ldr	r1, [r7, #20]
 80075ac:	69ba      	ldr	r2, [r7, #24]
 80075ae:	e841 2300 	strex	r3, r2, [r1]
 80075b2:	613b      	str	r3, [r7, #16]
   return(result);
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1e6      	bne.n	8007588 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2220      	movs	r2, #32
 80075be:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f7ff f93c 	bl	8006844 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075cc:	bf00      	nop
 80075ce:	3720      	adds	r7, #32
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b09c      	sub	sp, #112	@ 0x70
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80075e2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075ec:	2b22      	cmp	r3, #34	@ 0x22
 80075ee:	f040 80be 	bne.w	800776e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80075f8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80075fc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007600:	b2d9      	uxtb	r1, r3
 8007602:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007606:	b2da      	uxtb	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800760c:	400a      	ands	r2, r1
 800760e:	b2d2      	uxtb	r2, r2
 8007610:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007616:	1c5a      	adds	r2, r3, #1
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007622:	b29b      	uxth	r3, r3
 8007624:	3b01      	subs	r3, #1
 8007626:	b29a      	uxth	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007634:	b29b      	uxth	r3, r3
 8007636:	2b00      	cmp	r3, #0
 8007638:	f040 80a3 	bne.w	8007782 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007642:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007644:	e853 3f00 	ldrex	r3, [r3]
 8007648:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800764a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800764c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007650:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	461a      	mov	r2, r3
 8007658:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800765a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800765c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007660:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007662:	e841 2300 	strex	r3, r2, [r1]
 8007666:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007668:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1e6      	bne.n	800763c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	3308      	adds	r3, #8
 8007674:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007678:	e853 3f00 	ldrex	r3, [r3]
 800767c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800767e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007680:	f023 0301 	bic.w	r3, r3, #1
 8007684:	667b      	str	r3, [r7, #100]	@ 0x64
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	3308      	adds	r3, #8
 800768c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800768e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007690:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007692:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007694:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007696:	e841 2300 	strex	r3, r2, [r1]
 800769a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800769c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1e5      	bne.n	800766e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2220      	movs	r2, #32
 80076a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a34      	ldr	r2, [pc, #208]	@ (800778c <UART_RxISR_8BIT+0x1b8>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d01f      	beq.n	8007700 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d018      	beq.n	8007700 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d6:	e853 3f00 	ldrex	r3, [r3]
 80076da:	623b      	str	r3, [r7, #32]
   return(result);
 80076dc:	6a3b      	ldr	r3, [r7, #32]
 80076de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80076e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	461a      	mov	r2, r3
 80076ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80076ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076f4:	e841 2300 	strex	r3, r2, [r1]
 80076f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1e6      	bne.n	80076ce <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007704:	2b01      	cmp	r3, #1
 8007706:	d12e      	bne.n	8007766 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	e853 3f00 	ldrex	r3, [r3]
 800771a:	60fb      	str	r3, [r7, #12]
   return(result);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f023 0310 	bic.w	r3, r3, #16
 8007722:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	461a      	mov	r2, r3
 800772a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800772c:	61fb      	str	r3, [r7, #28]
 800772e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007730:	69b9      	ldr	r1, [r7, #24]
 8007732:	69fa      	ldr	r2, [r7, #28]
 8007734:	e841 2300 	strex	r3, r2, [r1]
 8007738:	617b      	str	r3, [r7, #20]
   return(result);
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1e6      	bne.n	800770e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	69db      	ldr	r3, [r3, #28]
 8007746:	f003 0310 	and.w	r3, r3, #16
 800774a:	2b10      	cmp	r3, #16
 800774c:	d103      	bne.n	8007756 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2210      	movs	r2, #16
 8007754:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800775c:	4619      	mov	r1, r3
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f7ff f898 	bl	8006894 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007764:	e00d      	b.n	8007782 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f7ff f880 	bl	800686c <HAL_UART_RxCpltCallback>
}
 800776c:	e009      	b.n	8007782 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	8b1b      	ldrh	r3, [r3, #24]
 8007774:	b29a      	uxth	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f042 0208 	orr.w	r2, r2, #8
 800777e:	b292      	uxth	r2, r2
 8007780:	831a      	strh	r2, [r3, #24]
}
 8007782:	bf00      	nop
 8007784:	3770      	adds	r7, #112	@ 0x70
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	40008000 	.word	0x40008000

08007790 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b09c      	sub	sp, #112	@ 0x70
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800779e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077a8:	2b22      	cmp	r3, #34	@ 0x22
 80077aa:	f040 80be 	bne.w	800792a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80077b4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077bc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80077be:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80077c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80077c6:	4013      	ands	r3, r2
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80077cc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077d2:	1c9a      	adds	r2, r3, #2
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80077de:	b29b      	uxth	r3, r3
 80077e0:	3b01      	subs	r3, #1
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f040 80a3 	bne.w	800793e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007800:	e853 3f00 	ldrex	r3, [r3]
 8007804:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007806:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007808:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800780c:	667b      	str	r3, [r7, #100]	@ 0x64
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	461a      	mov	r2, r3
 8007814:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007816:	657b      	str	r3, [r7, #84]	@ 0x54
 8007818:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800781c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800781e:	e841 2300 	strex	r3, r2, [r1]
 8007822:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007824:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1e6      	bne.n	80077f8 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	3308      	adds	r3, #8
 8007830:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007834:	e853 3f00 	ldrex	r3, [r3]
 8007838:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800783a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783c:	f023 0301 	bic.w	r3, r3, #1
 8007840:	663b      	str	r3, [r7, #96]	@ 0x60
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	3308      	adds	r3, #8
 8007848:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800784a:	643a      	str	r2, [r7, #64]	@ 0x40
 800784c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007850:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007852:	e841 2300 	strex	r3, r2, [r1]
 8007856:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1e5      	bne.n	800782a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2220      	movs	r2, #32
 8007862:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a34      	ldr	r2, [pc, #208]	@ (8007948 <UART_RxISR_16BIT+0x1b8>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d01f      	beq.n	80078bc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007886:	2b00      	cmp	r3, #0
 8007888:	d018      	beq.n	80078bc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007890:	6a3b      	ldr	r3, [r7, #32]
 8007892:	e853 3f00 	ldrex	r3, [r3]
 8007896:	61fb      	str	r3, [r7, #28]
   return(result);
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800789e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	461a      	mov	r2, r3
 80078a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078aa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078b0:	e841 2300 	strex	r3, r2, [r1]
 80078b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1e6      	bne.n	800788a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d12e      	bne.n	8007922 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	e853 3f00 	ldrex	r3, [r3]
 80078d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	f023 0310 	bic.w	r3, r3, #16
 80078de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	461a      	mov	r2, r3
 80078e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80078e8:	61bb      	str	r3, [r7, #24]
 80078ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ec:	6979      	ldr	r1, [r7, #20]
 80078ee:	69ba      	ldr	r2, [r7, #24]
 80078f0:	e841 2300 	strex	r3, r2, [r1]
 80078f4:	613b      	str	r3, [r7, #16]
   return(result);
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1e6      	bne.n	80078ca <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	69db      	ldr	r3, [r3, #28]
 8007902:	f003 0310 	and.w	r3, r3, #16
 8007906:	2b10      	cmp	r3, #16
 8007908:	d103      	bne.n	8007912 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2210      	movs	r2, #16
 8007910:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007918:	4619      	mov	r1, r3
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f7fe ffba 	bl	8006894 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007920:	e00d      	b.n	800793e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f7fe ffa2 	bl	800686c <HAL_UART_RxCpltCallback>
}
 8007928:	e009      	b.n	800793e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	8b1b      	ldrh	r3, [r3, #24]
 8007930:	b29a      	uxth	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f042 0208 	orr.w	r2, r2, #8
 800793a:	b292      	uxth	r2, r2
 800793c:	831a      	strh	r2, [r3, #24]
}
 800793e:	bf00      	nop
 8007940:	3770      	adds	r7, #112	@ 0x70
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	40008000 	.word	0x40008000

0800794c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007954:	bf00      	nop
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007968:	4b05      	ldr	r3, [pc, #20]	@ (8007980 <LL_EXTI_EnableIT_0_31+0x20>)
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	4904      	ldr	r1, [pc, #16]	@ (8007980 <LL_EXTI_EnableIT_0_31+0x20>)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4313      	orrs	r3, r2
 8007972:	600b      	str	r3, [r1, #0]
}
 8007974:	bf00      	nop
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr
 8007980:	40010400 	.word	0x40010400

08007984 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800798c:	4b05      	ldr	r3, [pc, #20]	@ (80079a4 <LL_EXTI_EnableIT_32_63+0x20>)
 800798e:	6a1a      	ldr	r2, [r3, #32]
 8007990:	4904      	ldr	r1, [pc, #16]	@ (80079a4 <LL_EXTI_EnableIT_32_63+0x20>)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4313      	orrs	r3, r2
 8007996:	620b      	str	r3, [r1, #32]
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr
 80079a4:	40010400 	.word	0x40010400

080079a8 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80079b0:	4b06      	ldr	r3, [pc, #24]	@ (80079cc <LL_EXTI_DisableIT_0_31+0x24>)
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	43db      	mvns	r3, r3
 80079b8:	4904      	ldr	r1, [pc, #16]	@ (80079cc <LL_EXTI_DisableIT_0_31+0x24>)
 80079ba:	4013      	ands	r3, r2
 80079bc:	600b      	str	r3, [r1, #0]
}
 80079be:	bf00      	nop
 80079c0:	370c      	adds	r7, #12
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	40010400 	.word	0x40010400

080079d0 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80079d8:	4b06      	ldr	r3, [pc, #24]	@ (80079f4 <LL_EXTI_DisableIT_32_63+0x24>)
 80079da:	6a1a      	ldr	r2, [r3, #32]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	43db      	mvns	r3, r3
 80079e0:	4904      	ldr	r1, [pc, #16]	@ (80079f4 <LL_EXTI_DisableIT_32_63+0x24>)
 80079e2:	4013      	ands	r3, r2
 80079e4:	620b      	str	r3, [r1, #32]
}
 80079e6:	bf00      	nop
 80079e8:	370c      	adds	r7, #12
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	40010400 	.word	0x40010400

080079f8 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8007a00:	4b05      	ldr	r3, [pc, #20]	@ (8007a18 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007a02:	685a      	ldr	r2, [r3, #4]
 8007a04:	4904      	ldr	r1, [pc, #16]	@ (8007a18 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	604b      	str	r3, [r1, #4]

}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr
 8007a18:	40010400 	.word	0x40010400

08007a1c <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8007a24:	4b05      	ldr	r3, [pc, #20]	@ (8007a3c <LL_EXTI_EnableEvent_32_63+0x20>)
 8007a26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a28:	4904      	ldr	r1, [pc, #16]	@ (8007a3c <LL_EXTI_EnableEvent_32_63+0x20>)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8007a30:	bf00      	nop
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr
 8007a3c:	40010400 	.word	0x40010400

08007a40 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8007a48:	4b06      	ldr	r3, [pc, #24]	@ (8007a64 <LL_EXTI_DisableEvent_0_31+0x24>)
 8007a4a:	685a      	ldr	r2, [r3, #4]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	43db      	mvns	r3, r3
 8007a50:	4904      	ldr	r1, [pc, #16]	@ (8007a64 <LL_EXTI_DisableEvent_0_31+0x24>)
 8007a52:	4013      	ands	r3, r2
 8007a54:	604b      	str	r3, [r1, #4]
}
 8007a56:	bf00      	nop
 8007a58:	370c      	adds	r7, #12
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	40010400 	.word	0x40010400

08007a68 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8007a70:	4b06      	ldr	r3, [pc, #24]	@ (8007a8c <LL_EXTI_DisableEvent_32_63+0x24>)
 8007a72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	43db      	mvns	r3, r3
 8007a78:	4904      	ldr	r1, [pc, #16]	@ (8007a8c <LL_EXTI_DisableEvent_32_63+0x24>)
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8007a7e:	bf00      	nop
 8007a80:	370c      	adds	r7, #12
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	40010400 	.word	0x40010400

08007a90 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007a98:	4b05      	ldr	r3, [pc, #20]	@ (8007ab0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	4904      	ldr	r1, [pc, #16]	@ (8007ab0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	608b      	str	r3, [r1, #8]

}
 8007aa4:	bf00      	nop
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr
 8007ab0:	40010400 	.word	0x40010400

08007ab4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8007abc:	4b05      	ldr	r3, [pc, #20]	@ (8007ad4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007abe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007ac0:	4904      	ldr	r1, [pc, #16]	@ (8007ad4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8007ac8:	bf00      	nop
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr
 8007ad4:	40010400 	.word	0x40010400

08007ad8 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8007ae0:	4b06      	ldr	r3, [pc, #24]	@ (8007afc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007ae2:	689a      	ldr	r2, [r3, #8]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	43db      	mvns	r3, r3
 8007ae8:	4904      	ldr	r1, [pc, #16]	@ (8007afc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007aea:	4013      	ands	r3, r2
 8007aec:	608b      	str	r3, [r1, #8]

}
 8007aee:	bf00      	nop
 8007af0:	370c      	adds	r7, #12
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	40010400 	.word	0x40010400

08007b00 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8007b08:	4b06      	ldr	r3, [pc, #24]	@ (8007b24 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8007b0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	43db      	mvns	r3, r3
 8007b10:	4904      	ldr	r1, [pc, #16]	@ (8007b24 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8007b12:	4013      	ands	r3, r2
 8007b14:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8007b16:	bf00      	nop
 8007b18:	370c      	adds	r7, #12
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	40010400 	.word	0x40010400

08007b28 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8007b30:	4b05      	ldr	r3, [pc, #20]	@ (8007b48 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007b32:	68da      	ldr	r2, [r3, #12]
 8007b34:	4904      	ldr	r1, [pc, #16]	@ (8007b48 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	60cb      	str	r3, [r1, #12]
}
 8007b3c:	bf00      	nop
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr
 8007b48:	40010400 	.word	0x40010400

08007b4c <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8007b54:	4b05      	ldr	r3, [pc, #20]	@ (8007b6c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8007b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b58:	4904      	ldr	r1, [pc, #16]	@ (8007b6c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8007b60:	bf00      	nop
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr
 8007b6c:	40010400 	.word	0x40010400

08007b70 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8007b78:	4b06      	ldr	r3, [pc, #24]	@ (8007b94 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007b7a:	68da      	ldr	r2, [r3, #12]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	43db      	mvns	r3, r3
 8007b80:	4904      	ldr	r1, [pc, #16]	@ (8007b94 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007b82:	4013      	ands	r3, r2
 8007b84:	60cb      	str	r3, [r1, #12]
}
 8007b86:	bf00      	nop
 8007b88:	370c      	adds	r7, #12
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	40010400 	.word	0x40010400

08007b98 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8007ba0:	4b06      	ldr	r3, [pc, #24]	@ (8007bbc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8007ba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	43db      	mvns	r3, r3
 8007ba8:	4904      	ldr	r1, [pc, #16]	@ (8007bbc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8007baa:	4013      	ands	r3, r2
 8007bac:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8007bae:	bf00      	nop
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	40010400 	.word	0x40010400

08007bc0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	7a1b      	ldrb	r3, [r3, #8]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 80d0 	beq.w	8007d76 <LL_EXTI_Init+0x1b6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d063      	beq.n	8007ca6 <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	7a5b      	ldrb	r3, [r3, #9]
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d01c      	beq.n	8007c20 <LL_EXTI_Init+0x60>
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	dc25      	bgt.n	8007c36 <LL_EXTI_Init+0x76>
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d002      	beq.n	8007bf4 <LL_EXTI_Init+0x34>
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d00b      	beq.n	8007c0a <LL_EXTI_Init+0x4a>
 8007bf2:	e020      	b.n	8007c36 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7ff ff21 	bl	8007a40 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7ff feac 	bl	8007960 <LL_EXTI_EnableIT_0_31>
          break;
 8007c08:	e018      	b.n	8007c3c <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7ff feca 	bl	80079a8 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f7ff feed 	bl	80079f8 <LL_EXTI_EnableEvent_0_31>
          break;
 8007c1e:	e00d      	b.n	8007c3c <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7ff fe9b 	bl	8007960 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7ff fee2 	bl	80079f8 <LL_EXTI_EnableEvent_0_31>
          break;
 8007c34:	e002      	b.n	8007c3c <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 8007c36:	2301      	movs	r3, #1
 8007c38:	60fb      	str	r3, [r7, #12]
          break;
 8007c3a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	7a9b      	ldrb	r3, [r3, #10]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d030      	beq.n	8007ca6 <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	7a9b      	ldrb	r3, [r3, #10]
 8007c48:	2b03      	cmp	r3, #3
 8007c4a:	d01c      	beq.n	8007c86 <LL_EXTI_Init+0xc6>
 8007c4c:	2b03      	cmp	r3, #3
 8007c4e:	dc25      	bgt.n	8007c9c <LL_EXTI_Init+0xdc>
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d002      	beq.n	8007c5a <LL_EXTI_Init+0x9a>
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	d00b      	beq.n	8007c70 <LL_EXTI_Init+0xb0>
 8007c58:	e020      	b.n	8007c9c <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7ff ff86 	bl	8007b70 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7ff ff11 	bl	8007a90 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8007c6e:	e01a      	b.n	8007ca6 <LL_EXTI_Init+0xe6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7ff ff2f 	bl	8007ad8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7ff ff52 	bl	8007b28 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8007c84:	e00f      	b.n	8007ca6 <LL_EXTI_Init+0xe6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7ff ff00 	bl	8007a90 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7ff ff47 	bl	8007b28 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8007c9a:	e004      	b.n	8007ca6 <LL_EXTI_Init+0xe6>
          default:
            status |= 0x02u;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f043 0302 	orr.w	r3, r3, #2
 8007ca2:	60fb      	str	r3, [r7, #12]
            break;
 8007ca4:	bf00      	nop
        }
      }
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d077      	beq.n	8007d9e <LL_EXTI_Init+0x1de>
    {
      switch (EXTI_InitStruct->Mode)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	7a5b      	ldrb	r3, [r3, #9]
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d01c      	beq.n	8007cf0 <LL_EXTI_Init+0x130>
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	dc25      	bgt.n	8007d06 <LL_EXTI_Init+0x146>
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d002      	beq.n	8007cc4 <LL_EXTI_Init+0x104>
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d00b      	beq.n	8007cda <LL_EXTI_Init+0x11a>
 8007cc2:	e020      	b.n	8007d06 <LL_EXTI_Init+0x146>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f7ff fecd 	bl	8007a68 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7ff fe56 	bl	8007984 <LL_EXTI_EnableIT_32_63>
          break;
 8007cd8:	e01a      	b.n	8007d10 <LL_EXTI_Init+0x150>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7ff fe76 	bl	80079d0 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7ff fe97 	bl	8007a1c <LL_EXTI_EnableEvent_32_63>
          break;
 8007cee:	e00f      	b.n	8007d10 <LL_EXTI_Init+0x150>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7ff fe45 	bl	8007984 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7ff fe8c 	bl	8007a1c <LL_EXTI_EnableEvent_32_63>
          break;
 8007d04:	e004      	b.n	8007d10 <LL_EXTI_Init+0x150>
        default:
          status |= 0x04u;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f043 0304 	orr.w	r3, r3, #4
 8007d0c:	60fb      	str	r3, [r7, #12]
          break;
 8007d0e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	7a9b      	ldrb	r3, [r3, #10]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d042      	beq.n	8007d9e <LL_EXTI_Init+0x1de>
      {
        switch (EXTI_InitStruct->Trigger)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	7a9b      	ldrb	r3, [r3, #10]
 8007d1c:	2b03      	cmp	r3, #3
 8007d1e:	d01c      	beq.n	8007d5a <LL_EXTI_Init+0x19a>
 8007d20:	2b03      	cmp	r3, #3
 8007d22:	dc25      	bgt.n	8007d70 <LL_EXTI_Init+0x1b0>
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d002      	beq.n	8007d2e <LL_EXTI_Init+0x16e>
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d00b      	beq.n	8007d44 <LL_EXTI_Init+0x184>
 8007d2c:	e020      	b.n	8007d70 <LL_EXTI_Init+0x1b0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7ff ff30 	bl	8007b98 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7ff feb9 	bl	8007ab4 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8007d42:	e02c      	b.n	8007d9e <LL_EXTI_Init+0x1de>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7ff fed9 	bl	8007b00 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7ff fefa 	bl	8007b4c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8007d58:	e021      	b.n	8007d9e <LL_EXTI_Init+0x1de>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7ff fea8 	bl	8007ab4 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7ff feef 	bl	8007b4c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8007d6e:	e016      	b.n	8007d9e <LL_EXTI_Init+0x1de>
          default:
            status = ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	60fb      	str	r3, [r7, #12]
            break;
 8007d74:	e013      	b.n	8007d9e <LL_EXTI_Init+0x1de>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7ff fe14 	bl	80079a8 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7ff fe5b 	bl	8007a40 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7ff fe1e 	bl	80079d0 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7ff fe65 	bl	8007a68 <LL_EXTI_DisableEvent_32_63>
  }

  return status;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <LL_GPIO_SetPinMode>:
{
 8007da8:	b480      	push	{r7}
 8007daa:	b08b      	sub	sp, #44	@ 0x2c
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	fa93 f3a3 	rbit	r3, r3
 8007dc2:	613b      	str	r3, [r7, #16]
  return result;
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d101      	bne.n	8007dd2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8007dce:	2320      	movs	r3, #32
 8007dd0:	e003      	b.n	8007dda <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	fab3 f383 	clz	r3, r3
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	005b      	lsls	r3, r3, #1
 8007ddc:	2103      	movs	r1, #3
 8007dde:	fa01 f303 	lsl.w	r3, r1, r3
 8007de2:	43db      	mvns	r3, r3
 8007de4:	401a      	ands	r2, r3
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dea:	6a3b      	ldr	r3, [r7, #32]
 8007dec:	fa93 f3a3 	rbit	r3, r3
 8007df0:	61fb      	str	r3, [r7, #28]
  return result;
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d101      	bne.n	8007e00 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8007dfc:	2320      	movs	r3, #32
 8007dfe:	e003      	b.n	8007e08 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8007e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e02:	fab3 f383 	clz	r3, r3
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	005b      	lsls	r3, r3, #1
 8007e0a:	6879      	ldr	r1, [r7, #4]
 8007e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e10:	431a      	orrs	r2, r3
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	601a      	str	r2, [r3, #0]
}
 8007e16:	bf00      	nop
 8007e18:	372c      	adds	r7, #44	@ 0x2c
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr

08007e22 <LL_GPIO_SetPinOutputType>:
{
 8007e22:	b480      	push	{r7}
 8007e24:	b085      	sub	sp, #20
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	60f8      	str	r0, [r7, #12]
 8007e2a:	60b9      	str	r1, [r7, #8]
 8007e2c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	685a      	ldr	r2, [r3, #4]
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	43db      	mvns	r3, r3
 8007e36:	401a      	ands	r2, r3
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	6879      	ldr	r1, [r7, #4]
 8007e3c:	fb01 f303 	mul.w	r3, r1, r3
 8007e40:	431a      	orrs	r2, r3
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	605a      	str	r2, [r3, #4]
}
 8007e46:	bf00      	nop
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr

08007e52 <LL_GPIO_SetPinSpeed>:
{
 8007e52:	b480      	push	{r7}
 8007e54:	b08b      	sub	sp, #44	@ 0x2c
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	60f8      	str	r0, [r7, #12]
 8007e5a:	60b9      	str	r1, [r7, #8]
 8007e5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	689a      	ldr	r2, [r3, #8]
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	fa93 f3a3 	rbit	r3, r3
 8007e6c:	613b      	str	r3, [r7, #16]
  return result;
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d101      	bne.n	8007e7c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8007e78:	2320      	movs	r3, #32
 8007e7a:	e003      	b.n	8007e84 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	fab3 f383 	clz	r3, r3
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	005b      	lsls	r3, r3, #1
 8007e86:	2103      	movs	r1, #3
 8007e88:	fa01 f303 	lsl.w	r3, r1, r3
 8007e8c:	43db      	mvns	r3, r3
 8007e8e:	401a      	ands	r2, r3
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e94:	6a3b      	ldr	r3, [r7, #32]
 8007e96:	fa93 f3a3 	rbit	r3, r3
 8007e9a:	61fb      	str	r3, [r7, #28]
  return result;
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d101      	bne.n	8007eaa <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8007ea6:	2320      	movs	r3, #32
 8007ea8:	e003      	b.n	8007eb2 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8007eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eac:	fab3 f383 	clz	r3, r3
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	005b      	lsls	r3, r3, #1
 8007eb4:	6879      	ldr	r1, [r7, #4]
 8007eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8007eba:	431a      	orrs	r2, r3
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	609a      	str	r2, [r3, #8]
}
 8007ec0:	bf00      	nop
 8007ec2:	372c      	adds	r7, #44	@ 0x2c
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <LL_GPIO_SetPinPull>:
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b08b      	sub	sp, #44	@ 0x2c
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	68da      	ldr	r2, [r3, #12]
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	fa93 f3a3 	rbit	r3, r3
 8007ee6:	613b      	str	r3, [r7, #16]
  return result;
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d101      	bne.n	8007ef6 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8007ef2:	2320      	movs	r3, #32
 8007ef4:	e003      	b.n	8007efe <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	fab3 f383 	clz	r3, r3
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	005b      	lsls	r3, r3, #1
 8007f00:	2103      	movs	r1, #3
 8007f02:	fa01 f303 	lsl.w	r3, r1, r3
 8007f06:	43db      	mvns	r3, r3
 8007f08:	401a      	ands	r2, r3
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f0e:	6a3b      	ldr	r3, [r7, #32]
 8007f10:	fa93 f3a3 	rbit	r3, r3
 8007f14:	61fb      	str	r3, [r7, #28]
  return result;
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d101      	bne.n	8007f24 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8007f20:	2320      	movs	r3, #32
 8007f22:	e003      	b.n	8007f2c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8007f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f26:	fab3 f383 	clz	r3, r3
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	005b      	lsls	r3, r3, #1
 8007f2e:	6879      	ldr	r1, [r7, #4]
 8007f30:	fa01 f303 	lsl.w	r3, r1, r3
 8007f34:	431a      	orrs	r2, r3
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	60da      	str	r2, [r3, #12]
}
 8007f3a:	bf00      	nop
 8007f3c:	372c      	adds	r7, #44	@ 0x2c
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr

08007f46 <LL_GPIO_SetAFPin_0_7>:
{
 8007f46:	b480      	push	{r7}
 8007f48:	b08b      	sub	sp, #44	@ 0x2c
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	60f8      	str	r0, [r7, #12]
 8007f4e:	60b9      	str	r1, [r7, #8]
 8007f50:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	6a1a      	ldr	r2, [r3, #32]
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	fa93 f3a3 	rbit	r3, r3
 8007f60:	613b      	str	r3, [r7, #16]
  return result;
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d101      	bne.n	8007f70 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8007f6c:	2320      	movs	r3, #32
 8007f6e:	e003      	b.n	8007f78 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	fab3 f383 	clz	r3, r3
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	210f      	movs	r1, #15
 8007f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8007f80:	43db      	mvns	r3, r3
 8007f82:	401a      	ands	r2, r3
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f88:	6a3b      	ldr	r3, [r7, #32]
 8007f8a:	fa93 f3a3 	rbit	r3, r3
 8007f8e:	61fb      	str	r3, [r7, #28]
  return result;
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d101      	bne.n	8007f9e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8007f9a:	2320      	movs	r3, #32
 8007f9c:	e003      	b.n	8007fa6 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa0:	fab3 f383 	clz	r3, r3
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	6879      	ldr	r1, [r7, #4]
 8007faa:	fa01 f303 	lsl.w	r3, r1, r3
 8007fae:	431a      	orrs	r2, r3
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	621a      	str	r2, [r3, #32]
}
 8007fb4:	bf00      	nop
 8007fb6:	372c      	adds	r7, #44	@ 0x2c
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <LL_GPIO_SetAFPin_8_15>:
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b08b      	sub	sp, #44	@ 0x2c
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	0a1b      	lsrs	r3, r3, #8
 8007fd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	fa93 f3a3 	rbit	r3, r3
 8007fdc:	613b      	str	r3, [r7, #16]
  return result;
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d101      	bne.n	8007fec <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8007fe8:	2320      	movs	r3, #32
 8007fea:	e003      	b.n	8007ff4 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	fab3 f383 	clz	r3, r3
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	210f      	movs	r1, #15
 8007ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8007ffc:	43db      	mvns	r3, r3
 8007ffe:	401a      	ands	r2, r3
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	0a1b      	lsrs	r3, r3, #8
 8008004:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008006:	6a3b      	ldr	r3, [r7, #32]
 8008008:	fa93 f3a3 	rbit	r3, r3
 800800c:	61fb      	str	r3, [r7, #28]
  return result;
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8008018:	2320      	movs	r3, #32
 800801a:	e003      	b.n	8008024 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800801c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800801e:	fab3 f383 	clz	r3, r3
 8008022:	b2db      	uxtb	r3, r3
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	6879      	ldr	r1, [r7, #4]
 8008028:	fa01 f303 	lsl.w	r3, r1, r3
 800802c:	431a      	orrs	r2, r3
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8008032:	bf00      	nop
 8008034:	372c      	adds	r7, #44	@ 0x2c
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b088      	sub	sp, #32
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
 8008046:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	fa93 f3a3 	rbit	r3, r3
 8008054:	60fb      	str	r3, [r7, #12]
  return result;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d101      	bne.n	8008064 <LL_GPIO_Init+0x26>
    return 32U;
 8008060:	2320      	movs	r3, #32
 8008062:	e003      	b.n	800806c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	fab3 f383 	clz	r3, r3
 800806a:	b2db      	uxtb	r3, r3
 800806c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800806e:	e048      	b.n	8008102 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	2101      	movs	r1, #1
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	fa01 f303 	lsl.w	r3, r1, r3
 800807c:	4013      	ands	r3, r2
 800807e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d03a      	beq.n	80080fc <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	2b01      	cmp	r3, #1
 800808c:	d003      	beq.n	8008096 <LL_GPIO_Init+0x58>
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	2b02      	cmp	r3, #2
 8008094:	d10e      	bne.n	80080b4 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	461a      	mov	r2, r3
 800809c:	69b9      	ldr	r1, [r7, #24]
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7ff fed7 	bl	8007e52 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	6819      	ldr	r1, [r3, #0]
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	461a      	mov	r2, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7ff feb7 	bl	8007e22 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	691b      	ldr	r3, [r3, #16]
 80080b8:	461a      	mov	r2, r3
 80080ba:	69b9      	ldr	r1, [r7, #24]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f7ff ff05 	bl	8007ecc <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	d111      	bne.n	80080ee <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	2bff      	cmp	r3, #255	@ 0xff
 80080ce:	d807      	bhi.n	80080e0 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	695b      	ldr	r3, [r3, #20]
 80080d4:	461a      	mov	r2, r3
 80080d6:	69b9      	ldr	r1, [r7, #24]
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f7ff ff34 	bl	8007f46 <LL_GPIO_SetAFPin_0_7>
 80080de:	e006      	b.n	80080ee <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	695b      	ldr	r3, [r3, #20]
 80080e4:	461a      	mov	r2, r3
 80080e6:	69b9      	ldr	r1, [r7, #24]
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f7ff ff69 	bl	8007fc0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	461a      	mov	r2, r3
 80080f4:	69b9      	ldr	r1, [r7, #24]
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f7ff fe56 	bl	8007da8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	3301      	adds	r3, #1
 8008100:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	fa22 f303 	lsr.w	r3, r2, r3
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1af      	bne.n	8008070 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3720      	adds	r7, #32
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <atoi>:
 800811a:	220a      	movs	r2, #10
 800811c:	2100      	movs	r1, #0
 800811e:	f000 b87b 	b.w	8008218 <strtol>
	...

08008124 <_strtol_l.constprop.0>:
 8008124:	2b24      	cmp	r3, #36	@ 0x24
 8008126:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800812a:	4686      	mov	lr, r0
 800812c:	4690      	mov	r8, r2
 800812e:	d801      	bhi.n	8008134 <_strtol_l.constprop.0+0x10>
 8008130:	2b01      	cmp	r3, #1
 8008132:	d106      	bne.n	8008142 <_strtol_l.constprop.0+0x1e>
 8008134:	f000 fbfe 	bl	8008934 <__errno>
 8008138:	2316      	movs	r3, #22
 800813a:	6003      	str	r3, [r0, #0]
 800813c:	2000      	movs	r0, #0
 800813e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008142:	4834      	ldr	r0, [pc, #208]	@ (8008214 <_strtol_l.constprop.0+0xf0>)
 8008144:	460d      	mov	r5, r1
 8008146:	462a      	mov	r2, r5
 8008148:	f815 4b01 	ldrb.w	r4, [r5], #1
 800814c:	5d06      	ldrb	r6, [r0, r4]
 800814e:	f016 0608 	ands.w	r6, r6, #8
 8008152:	d1f8      	bne.n	8008146 <_strtol_l.constprop.0+0x22>
 8008154:	2c2d      	cmp	r4, #45	@ 0x2d
 8008156:	d12d      	bne.n	80081b4 <_strtol_l.constprop.0+0x90>
 8008158:	782c      	ldrb	r4, [r5, #0]
 800815a:	2601      	movs	r6, #1
 800815c:	1c95      	adds	r5, r2, #2
 800815e:	f033 0210 	bics.w	r2, r3, #16
 8008162:	d109      	bne.n	8008178 <_strtol_l.constprop.0+0x54>
 8008164:	2c30      	cmp	r4, #48	@ 0x30
 8008166:	d12a      	bne.n	80081be <_strtol_l.constprop.0+0x9a>
 8008168:	782a      	ldrb	r2, [r5, #0]
 800816a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800816e:	2a58      	cmp	r2, #88	@ 0x58
 8008170:	d125      	bne.n	80081be <_strtol_l.constprop.0+0x9a>
 8008172:	786c      	ldrb	r4, [r5, #1]
 8008174:	2310      	movs	r3, #16
 8008176:	3502      	adds	r5, #2
 8008178:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800817c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008180:	2200      	movs	r2, #0
 8008182:	fbbc f9f3 	udiv	r9, ip, r3
 8008186:	4610      	mov	r0, r2
 8008188:	fb03 ca19 	mls	sl, r3, r9, ip
 800818c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008190:	2f09      	cmp	r7, #9
 8008192:	d81b      	bhi.n	80081cc <_strtol_l.constprop.0+0xa8>
 8008194:	463c      	mov	r4, r7
 8008196:	42a3      	cmp	r3, r4
 8008198:	dd27      	ble.n	80081ea <_strtol_l.constprop.0+0xc6>
 800819a:	1c57      	adds	r7, r2, #1
 800819c:	d007      	beq.n	80081ae <_strtol_l.constprop.0+0x8a>
 800819e:	4581      	cmp	r9, r0
 80081a0:	d320      	bcc.n	80081e4 <_strtol_l.constprop.0+0xc0>
 80081a2:	d101      	bne.n	80081a8 <_strtol_l.constprop.0+0x84>
 80081a4:	45a2      	cmp	sl, r4
 80081a6:	db1d      	blt.n	80081e4 <_strtol_l.constprop.0+0xc0>
 80081a8:	fb00 4003 	mla	r0, r0, r3, r4
 80081ac:	2201      	movs	r2, #1
 80081ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80081b2:	e7eb      	b.n	800818c <_strtol_l.constprop.0+0x68>
 80081b4:	2c2b      	cmp	r4, #43	@ 0x2b
 80081b6:	bf04      	itt	eq
 80081b8:	782c      	ldrbeq	r4, [r5, #0]
 80081ba:	1c95      	addeq	r5, r2, #2
 80081bc:	e7cf      	b.n	800815e <_strtol_l.constprop.0+0x3a>
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1da      	bne.n	8008178 <_strtol_l.constprop.0+0x54>
 80081c2:	2c30      	cmp	r4, #48	@ 0x30
 80081c4:	bf0c      	ite	eq
 80081c6:	2308      	moveq	r3, #8
 80081c8:	230a      	movne	r3, #10
 80081ca:	e7d5      	b.n	8008178 <_strtol_l.constprop.0+0x54>
 80081cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80081d0:	2f19      	cmp	r7, #25
 80081d2:	d801      	bhi.n	80081d8 <_strtol_l.constprop.0+0xb4>
 80081d4:	3c37      	subs	r4, #55	@ 0x37
 80081d6:	e7de      	b.n	8008196 <_strtol_l.constprop.0+0x72>
 80081d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80081dc:	2f19      	cmp	r7, #25
 80081de:	d804      	bhi.n	80081ea <_strtol_l.constprop.0+0xc6>
 80081e0:	3c57      	subs	r4, #87	@ 0x57
 80081e2:	e7d8      	b.n	8008196 <_strtol_l.constprop.0+0x72>
 80081e4:	f04f 32ff 	mov.w	r2, #4294967295
 80081e8:	e7e1      	b.n	80081ae <_strtol_l.constprop.0+0x8a>
 80081ea:	1c53      	adds	r3, r2, #1
 80081ec:	d108      	bne.n	8008200 <_strtol_l.constprop.0+0xdc>
 80081ee:	2322      	movs	r3, #34	@ 0x22
 80081f0:	f8ce 3000 	str.w	r3, [lr]
 80081f4:	4660      	mov	r0, ip
 80081f6:	f1b8 0f00 	cmp.w	r8, #0
 80081fa:	d0a0      	beq.n	800813e <_strtol_l.constprop.0+0x1a>
 80081fc:	1e69      	subs	r1, r5, #1
 80081fe:	e006      	b.n	800820e <_strtol_l.constprop.0+0xea>
 8008200:	b106      	cbz	r6, 8008204 <_strtol_l.constprop.0+0xe0>
 8008202:	4240      	negs	r0, r0
 8008204:	f1b8 0f00 	cmp.w	r8, #0
 8008208:	d099      	beq.n	800813e <_strtol_l.constprop.0+0x1a>
 800820a:	2a00      	cmp	r2, #0
 800820c:	d1f6      	bne.n	80081fc <_strtol_l.constprop.0+0xd8>
 800820e:	f8c8 1000 	str.w	r1, [r8]
 8008212:	e794      	b.n	800813e <_strtol_l.constprop.0+0x1a>
 8008214:	0800a7a1 	.word	0x0800a7a1

08008218 <strtol>:
 8008218:	4613      	mov	r3, r2
 800821a:	460a      	mov	r2, r1
 800821c:	4601      	mov	r1, r0
 800821e:	4802      	ldr	r0, [pc, #8]	@ (8008228 <strtol+0x10>)
 8008220:	6800      	ldr	r0, [r0, #0]
 8008222:	f7ff bf7f 	b.w	8008124 <_strtol_l.constprop.0>
 8008226:	bf00      	nop
 8008228:	20000b2c 	.word	0x20000b2c

0800822c <__sflush_r>:
 800822c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008234:	0716      	lsls	r6, r2, #28
 8008236:	4605      	mov	r5, r0
 8008238:	460c      	mov	r4, r1
 800823a:	d454      	bmi.n	80082e6 <__sflush_r+0xba>
 800823c:	684b      	ldr	r3, [r1, #4]
 800823e:	2b00      	cmp	r3, #0
 8008240:	dc02      	bgt.n	8008248 <__sflush_r+0x1c>
 8008242:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008244:	2b00      	cmp	r3, #0
 8008246:	dd48      	ble.n	80082da <__sflush_r+0xae>
 8008248:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800824a:	2e00      	cmp	r6, #0
 800824c:	d045      	beq.n	80082da <__sflush_r+0xae>
 800824e:	2300      	movs	r3, #0
 8008250:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008254:	682f      	ldr	r7, [r5, #0]
 8008256:	6a21      	ldr	r1, [r4, #32]
 8008258:	602b      	str	r3, [r5, #0]
 800825a:	d030      	beq.n	80082be <__sflush_r+0x92>
 800825c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800825e:	89a3      	ldrh	r3, [r4, #12]
 8008260:	0759      	lsls	r1, r3, #29
 8008262:	d505      	bpl.n	8008270 <__sflush_r+0x44>
 8008264:	6863      	ldr	r3, [r4, #4]
 8008266:	1ad2      	subs	r2, r2, r3
 8008268:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800826a:	b10b      	cbz	r3, 8008270 <__sflush_r+0x44>
 800826c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800826e:	1ad2      	subs	r2, r2, r3
 8008270:	2300      	movs	r3, #0
 8008272:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008274:	6a21      	ldr	r1, [r4, #32]
 8008276:	4628      	mov	r0, r5
 8008278:	47b0      	blx	r6
 800827a:	1c43      	adds	r3, r0, #1
 800827c:	89a3      	ldrh	r3, [r4, #12]
 800827e:	d106      	bne.n	800828e <__sflush_r+0x62>
 8008280:	6829      	ldr	r1, [r5, #0]
 8008282:	291d      	cmp	r1, #29
 8008284:	d82b      	bhi.n	80082de <__sflush_r+0xb2>
 8008286:	4a2a      	ldr	r2, [pc, #168]	@ (8008330 <__sflush_r+0x104>)
 8008288:	410a      	asrs	r2, r1
 800828a:	07d6      	lsls	r6, r2, #31
 800828c:	d427      	bmi.n	80082de <__sflush_r+0xb2>
 800828e:	2200      	movs	r2, #0
 8008290:	6062      	str	r2, [r4, #4]
 8008292:	04d9      	lsls	r1, r3, #19
 8008294:	6922      	ldr	r2, [r4, #16]
 8008296:	6022      	str	r2, [r4, #0]
 8008298:	d504      	bpl.n	80082a4 <__sflush_r+0x78>
 800829a:	1c42      	adds	r2, r0, #1
 800829c:	d101      	bne.n	80082a2 <__sflush_r+0x76>
 800829e:	682b      	ldr	r3, [r5, #0]
 80082a0:	b903      	cbnz	r3, 80082a4 <__sflush_r+0x78>
 80082a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80082a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082a6:	602f      	str	r7, [r5, #0]
 80082a8:	b1b9      	cbz	r1, 80082da <__sflush_r+0xae>
 80082aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082ae:	4299      	cmp	r1, r3
 80082b0:	d002      	beq.n	80082b8 <__sflush_r+0x8c>
 80082b2:	4628      	mov	r0, r5
 80082b4:	f000 fb8a 	bl	80089cc <_free_r>
 80082b8:	2300      	movs	r3, #0
 80082ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80082bc:	e00d      	b.n	80082da <__sflush_r+0xae>
 80082be:	2301      	movs	r3, #1
 80082c0:	4628      	mov	r0, r5
 80082c2:	47b0      	blx	r6
 80082c4:	4602      	mov	r2, r0
 80082c6:	1c50      	adds	r0, r2, #1
 80082c8:	d1c9      	bne.n	800825e <__sflush_r+0x32>
 80082ca:	682b      	ldr	r3, [r5, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d0c6      	beq.n	800825e <__sflush_r+0x32>
 80082d0:	2b1d      	cmp	r3, #29
 80082d2:	d001      	beq.n	80082d8 <__sflush_r+0xac>
 80082d4:	2b16      	cmp	r3, #22
 80082d6:	d11e      	bne.n	8008316 <__sflush_r+0xea>
 80082d8:	602f      	str	r7, [r5, #0]
 80082da:	2000      	movs	r0, #0
 80082dc:	e022      	b.n	8008324 <__sflush_r+0xf8>
 80082de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082e2:	b21b      	sxth	r3, r3
 80082e4:	e01b      	b.n	800831e <__sflush_r+0xf2>
 80082e6:	690f      	ldr	r7, [r1, #16]
 80082e8:	2f00      	cmp	r7, #0
 80082ea:	d0f6      	beq.n	80082da <__sflush_r+0xae>
 80082ec:	0793      	lsls	r3, r2, #30
 80082ee:	680e      	ldr	r6, [r1, #0]
 80082f0:	bf08      	it	eq
 80082f2:	694b      	ldreq	r3, [r1, #20]
 80082f4:	600f      	str	r7, [r1, #0]
 80082f6:	bf18      	it	ne
 80082f8:	2300      	movne	r3, #0
 80082fa:	eba6 0807 	sub.w	r8, r6, r7
 80082fe:	608b      	str	r3, [r1, #8]
 8008300:	f1b8 0f00 	cmp.w	r8, #0
 8008304:	dde9      	ble.n	80082da <__sflush_r+0xae>
 8008306:	6a21      	ldr	r1, [r4, #32]
 8008308:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800830a:	4643      	mov	r3, r8
 800830c:	463a      	mov	r2, r7
 800830e:	4628      	mov	r0, r5
 8008310:	47b0      	blx	r6
 8008312:	2800      	cmp	r0, #0
 8008314:	dc08      	bgt.n	8008328 <__sflush_r+0xfc>
 8008316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800831a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800831e:	81a3      	strh	r3, [r4, #12]
 8008320:	f04f 30ff 	mov.w	r0, #4294967295
 8008324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008328:	4407      	add	r7, r0
 800832a:	eba8 0800 	sub.w	r8, r8, r0
 800832e:	e7e7      	b.n	8008300 <__sflush_r+0xd4>
 8008330:	dfbffffe 	.word	0xdfbffffe

08008334 <_fflush_r>:
 8008334:	b538      	push	{r3, r4, r5, lr}
 8008336:	690b      	ldr	r3, [r1, #16]
 8008338:	4605      	mov	r5, r0
 800833a:	460c      	mov	r4, r1
 800833c:	b913      	cbnz	r3, 8008344 <_fflush_r+0x10>
 800833e:	2500      	movs	r5, #0
 8008340:	4628      	mov	r0, r5
 8008342:	bd38      	pop	{r3, r4, r5, pc}
 8008344:	b118      	cbz	r0, 800834e <_fflush_r+0x1a>
 8008346:	6a03      	ldr	r3, [r0, #32]
 8008348:	b90b      	cbnz	r3, 800834e <_fflush_r+0x1a>
 800834a:	f000 f8bb 	bl	80084c4 <__sinit>
 800834e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d0f3      	beq.n	800833e <_fflush_r+0xa>
 8008356:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008358:	07d0      	lsls	r0, r2, #31
 800835a:	d404      	bmi.n	8008366 <_fflush_r+0x32>
 800835c:	0599      	lsls	r1, r3, #22
 800835e:	d402      	bmi.n	8008366 <_fflush_r+0x32>
 8008360:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008362:	f000 fb12 	bl	800898a <__retarget_lock_acquire_recursive>
 8008366:	4628      	mov	r0, r5
 8008368:	4621      	mov	r1, r4
 800836a:	f7ff ff5f 	bl	800822c <__sflush_r>
 800836e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008370:	07da      	lsls	r2, r3, #31
 8008372:	4605      	mov	r5, r0
 8008374:	d4e4      	bmi.n	8008340 <_fflush_r+0xc>
 8008376:	89a3      	ldrh	r3, [r4, #12]
 8008378:	059b      	lsls	r3, r3, #22
 800837a:	d4e1      	bmi.n	8008340 <_fflush_r+0xc>
 800837c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800837e:	f000 fb05 	bl	800898c <__retarget_lock_release_recursive>
 8008382:	e7dd      	b.n	8008340 <_fflush_r+0xc>

08008384 <fflush>:
 8008384:	4601      	mov	r1, r0
 8008386:	b920      	cbnz	r0, 8008392 <fflush+0xe>
 8008388:	4a04      	ldr	r2, [pc, #16]	@ (800839c <fflush+0x18>)
 800838a:	4905      	ldr	r1, [pc, #20]	@ (80083a0 <fflush+0x1c>)
 800838c:	4805      	ldr	r0, [pc, #20]	@ (80083a4 <fflush+0x20>)
 800838e:	f000 b8b1 	b.w	80084f4 <_fwalk_sglue>
 8008392:	4b05      	ldr	r3, [pc, #20]	@ (80083a8 <fflush+0x24>)
 8008394:	6818      	ldr	r0, [r3, #0]
 8008396:	f7ff bfcd 	b.w	8008334 <_fflush_r>
 800839a:	bf00      	nop
 800839c:	20000b20 	.word	0x20000b20
 80083a0:	08008335 	.word	0x08008335
 80083a4:	20000b30 	.word	0x20000b30
 80083a8:	20000b2c 	.word	0x20000b2c

080083ac <std>:
 80083ac:	2300      	movs	r3, #0
 80083ae:	b510      	push	{r4, lr}
 80083b0:	4604      	mov	r4, r0
 80083b2:	e9c0 3300 	strd	r3, r3, [r0]
 80083b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083ba:	6083      	str	r3, [r0, #8]
 80083bc:	8181      	strh	r1, [r0, #12]
 80083be:	6643      	str	r3, [r0, #100]	@ 0x64
 80083c0:	81c2      	strh	r2, [r0, #14]
 80083c2:	6183      	str	r3, [r0, #24]
 80083c4:	4619      	mov	r1, r3
 80083c6:	2208      	movs	r2, #8
 80083c8:	305c      	adds	r0, #92	@ 0x5c
 80083ca:	f000 fa09 	bl	80087e0 <memset>
 80083ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008404 <std+0x58>)
 80083d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80083d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008408 <std+0x5c>)
 80083d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80083d6:	4b0d      	ldr	r3, [pc, #52]	@ (800840c <std+0x60>)
 80083d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80083da:	4b0d      	ldr	r3, [pc, #52]	@ (8008410 <std+0x64>)
 80083dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80083de:	4b0d      	ldr	r3, [pc, #52]	@ (8008414 <std+0x68>)
 80083e0:	6224      	str	r4, [r4, #32]
 80083e2:	429c      	cmp	r4, r3
 80083e4:	d006      	beq.n	80083f4 <std+0x48>
 80083e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80083ea:	4294      	cmp	r4, r2
 80083ec:	d002      	beq.n	80083f4 <std+0x48>
 80083ee:	33d0      	adds	r3, #208	@ 0xd0
 80083f0:	429c      	cmp	r4, r3
 80083f2:	d105      	bne.n	8008400 <std+0x54>
 80083f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80083f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083fc:	f000 bac4 	b.w	8008988 <__retarget_lock_init_recursive>
 8008400:	bd10      	pop	{r4, pc}
 8008402:	bf00      	nop
 8008404:	08008611 	.word	0x08008611
 8008408:	08008633 	.word	0x08008633
 800840c:	0800866b 	.word	0x0800866b
 8008410:	0800868f 	.word	0x0800868f
 8008414:	200016d8 	.word	0x200016d8

08008418 <stdio_exit_handler>:
 8008418:	4a02      	ldr	r2, [pc, #8]	@ (8008424 <stdio_exit_handler+0xc>)
 800841a:	4903      	ldr	r1, [pc, #12]	@ (8008428 <stdio_exit_handler+0x10>)
 800841c:	4803      	ldr	r0, [pc, #12]	@ (800842c <stdio_exit_handler+0x14>)
 800841e:	f000 b869 	b.w	80084f4 <_fwalk_sglue>
 8008422:	bf00      	nop
 8008424:	20000b20 	.word	0x20000b20
 8008428:	08008335 	.word	0x08008335
 800842c:	20000b30 	.word	0x20000b30

08008430 <cleanup_stdio>:
 8008430:	6841      	ldr	r1, [r0, #4]
 8008432:	4b0c      	ldr	r3, [pc, #48]	@ (8008464 <cleanup_stdio+0x34>)
 8008434:	4299      	cmp	r1, r3
 8008436:	b510      	push	{r4, lr}
 8008438:	4604      	mov	r4, r0
 800843a:	d001      	beq.n	8008440 <cleanup_stdio+0x10>
 800843c:	f7ff ff7a 	bl	8008334 <_fflush_r>
 8008440:	68a1      	ldr	r1, [r4, #8]
 8008442:	4b09      	ldr	r3, [pc, #36]	@ (8008468 <cleanup_stdio+0x38>)
 8008444:	4299      	cmp	r1, r3
 8008446:	d002      	beq.n	800844e <cleanup_stdio+0x1e>
 8008448:	4620      	mov	r0, r4
 800844a:	f7ff ff73 	bl	8008334 <_fflush_r>
 800844e:	68e1      	ldr	r1, [r4, #12]
 8008450:	4b06      	ldr	r3, [pc, #24]	@ (800846c <cleanup_stdio+0x3c>)
 8008452:	4299      	cmp	r1, r3
 8008454:	d004      	beq.n	8008460 <cleanup_stdio+0x30>
 8008456:	4620      	mov	r0, r4
 8008458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800845c:	f7ff bf6a 	b.w	8008334 <_fflush_r>
 8008460:	bd10      	pop	{r4, pc}
 8008462:	bf00      	nop
 8008464:	200016d8 	.word	0x200016d8
 8008468:	20001740 	.word	0x20001740
 800846c:	200017a8 	.word	0x200017a8

08008470 <global_stdio_init.part.0>:
 8008470:	b510      	push	{r4, lr}
 8008472:	4b0b      	ldr	r3, [pc, #44]	@ (80084a0 <global_stdio_init.part.0+0x30>)
 8008474:	4c0b      	ldr	r4, [pc, #44]	@ (80084a4 <global_stdio_init.part.0+0x34>)
 8008476:	4a0c      	ldr	r2, [pc, #48]	@ (80084a8 <global_stdio_init.part.0+0x38>)
 8008478:	601a      	str	r2, [r3, #0]
 800847a:	4620      	mov	r0, r4
 800847c:	2200      	movs	r2, #0
 800847e:	2104      	movs	r1, #4
 8008480:	f7ff ff94 	bl	80083ac <std>
 8008484:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008488:	2201      	movs	r2, #1
 800848a:	2109      	movs	r1, #9
 800848c:	f7ff ff8e 	bl	80083ac <std>
 8008490:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008494:	2202      	movs	r2, #2
 8008496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800849a:	2112      	movs	r1, #18
 800849c:	f7ff bf86 	b.w	80083ac <std>
 80084a0:	20001810 	.word	0x20001810
 80084a4:	200016d8 	.word	0x200016d8
 80084a8:	08008419 	.word	0x08008419

080084ac <__sfp_lock_acquire>:
 80084ac:	4801      	ldr	r0, [pc, #4]	@ (80084b4 <__sfp_lock_acquire+0x8>)
 80084ae:	f000 ba6c 	b.w	800898a <__retarget_lock_acquire_recursive>
 80084b2:	bf00      	nop
 80084b4:	20001819 	.word	0x20001819

080084b8 <__sfp_lock_release>:
 80084b8:	4801      	ldr	r0, [pc, #4]	@ (80084c0 <__sfp_lock_release+0x8>)
 80084ba:	f000 ba67 	b.w	800898c <__retarget_lock_release_recursive>
 80084be:	bf00      	nop
 80084c0:	20001819 	.word	0x20001819

080084c4 <__sinit>:
 80084c4:	b510      	push	{r4, lr}
 80084c6:	4604      	mov	r4, r0
 80084c8:	f7ff fff0 	bl	80084ac <__sfp_lock_acquire>
 80084cc:	6a23      	ldr	r3, [r4, #32]
 80084ce:	b11b      	cbz	r3, 80084d8 <__sinit+0x14>
 80084d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084d4:	f7ff bff0 	b.w	80084b8 <__sfp_lock_release>
 80084d8:	4b04      	ldr	r3, [pc, #16]	@ (80084ec <__sinit+0x28>)
 80084da:	6223      	str	r3, [r4, #32]
 80084dc:	4b04      	ldr	r3, [pc, #16]	@ (80084f0 <__sinit+0x2c>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d1f5      	bne.n	80084d0 <__sinit+0xc>
 80084e4:	f7ff ffc4 	bl	8008470 <global_stdio_init.part.0>
 80084e8:	e7f2      	b.n	80084d0 <__sinit+0xc>
 80084ea:	bf00      	nop
 80084ec:	08008431 	.word	0x08008431
 80084f0:	20001810 	.word	0x20001810

080084f4 <_fwalk_sglue>:
 80084f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084f8:	4607      	mov	r7, r0
 80084fa:	4688      	mov	r8, r1
 80084fc:	4614      	mov	r4, r2
 80084fe:	2600      	movs	r6, #0
 8008500:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008504:	f1b9 0901 	subs.w	r9, r9, #1
 8008508:	d505      	bpl.n	8008516 <_fwalk_sglue+0x22>
 800850a:	6824      	ldr	r4, [r4, #0]
 800850c:	2c00      	cmp	r4, #0
 800850e:	d1f7      	bne.n	8008500 <_fwalk_sglue+0xc>
 8008510:	4630      	mov	r0, r6
 8008512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008516:	89ab      	ldrh	r3, [r5, #12]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d907      	bls.n	800852c <_fwalk_sglue+0x38>
 800851c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008520:	3301      	adds	r3, #1
 8008522:	d003      	beq.n	800852c <_fwalk_sglue+0x38>
 8008524:	4629      	mov	r1, r5
 8008526:	4638      	mov	r0, r7
 8008528:	47c0      	blx	r8
 800852a:	4306      	orrs	r6, r0
 800852c:	3568      	adds	r5, #104	@ 0x68
 800852e:	e7e9      	b.n	8008504 <_fwalk_sglue+0x10>

08008530 <iprintf>:
 8008530:	b40f      	push	{r0, r1, r2, r3}
 8008532:	b507      	push	{r0, r1, r2, lr}
 8008534:	4906      	ldr	r1, [pc, #24]	@ (8008550 <iprintf+0x20>)
 8008536:	ab04      	add	r3, sp, #16
 8008538:	6808      	ldr	r0, [r1, #0]
 800853a:	f853 2b04 	ldr.w	r2, [r3], #4
 800853e:	6881      	ldr	r1, [r0, #8]
 8008540:	9301      	str	r3, [sp, #4]
 8008542:	f000 fb6d 	bl	8008c20 <_vfiprintf_r>
 8008546:	b003      	add	sp, #12
 8008548:	f85d eb04 	ldr.w	lr, [sp], #4
 800854c:	b004      	add	sp, #16
 800854e:	4770      	bx	lr
 8008550:	20000b2c 	.word	0x20000b2c

08008554 <_puts_r>:
 8008554:	6a03      	ldr	r3, [r0, #32]
 8008556:	b570      	push	{r4, r5, r6, lr}
 8008558:	6884      	ldr	r4, [r0, #8]
 800855a:	4605      	mov	r5, r0
 800855c:	460e      	mov	r6, r1
 800855e:	b90b      	cbnz	r3, 8008564 <_puts_r+0x10>
 8008560:	f7ff ffb0 	bl	80084c4 <__sinit>
 8008564:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008566:	07db      	lsls	r3, r3, #31
 8008568:	d405      	bmi.n	8008576 <_puts_r+0x22>
 800856a:	89a3      	ldrh	r3, [r4, #12]
 800856c:	0598      	lsls	r0, r3, #22
 800856e:	d402      	bmi.n	8008576 <_puts_r+0x22>
 8008570:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008572:	f000 fa0a 	bl	800898a <__retarget_lock_acquire_recursive>
 8008576:	89a3      	ldrh	r3, [r4, #12]
 8008578:	0719      	lsls	r1, r3, #28
 800857a:	d502      	bpl.n	8008582 <_puts_r+0x2e>
 800857c:	6923      	ldr	r3, [r4, #16]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d135      	bne.n	80085ee <_puts_r+0x9a>
 8008582:	4621      	mov	r1, r4
 8008584:	4628      	mov	r0, r5
 8008586:	f000 f8c5 	bl	8008714 <__swsetup_r>
 800858a:	b380      	cbz	r0, 80085ee <_puts_r+0x9a>
 800858c:	f04f 35ff 	mov.w	r5, #4294967295
 8008590:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008592:	07da      	lsls	r2, r3, #31
 8008594:	d405      	bmi.n	80085a2 <_puts_r+0x4e>
 8008596:	89a3      	ldrh	r3, [r4, #12]
 8008598:	059b      	lsls	r3, r3, #22
 800859a:	d402      	bmi.n	80085a2 <_puts_r+0x4e>
 800859c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800859e:	f000 f9f5 	bl	800898c <__retarget_lock_release_recursive>
 80085a2:	4628      	mov	r0, r5
 80085a4:	bd70      	pop	{r4, r5, r6, pc}
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	da04      	bge.n	80085b4 <_puts_r+0x60>
 80085aa:	69a2      	ldr	r2, [r4, #24]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	dc17      	bgt.n	80085e0 <_puts_r+0x8c>
 80085b0:	290a      	cmp	r1, #10
 80085b2:	d015      	beq.n	80085e0 <_puts_r+0x8c>
 80085b4:	6823      	ldr	r3, [r4, #0]
 80085b6:	1c5a      	adds	r2, r3, #1
 80085b8:	6022      	str	r2, [r4, #0]
 80085ba:	7019      	strb	r1, [r3, #0]
 80085bc:	68a3      	ldr	r3, [r4, #8]
 80085be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80085c2:	3b01      	subs	r3, #1
 80085c4:	60a3      	str	r3, [r4, #8]
 80085c6:	2900      	cmp	r1, #0
 80085c8:	d1ed      	bne.n	80085a6 <_puts_r+0x52>
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	da11      	bge.n	80085f2 <_puts_r+0x9e>
 80085ce:	4622      	mov	r2, r4
 80085d0:	210a      	movs	r1, #10
 80085d2:	4628      	mov	r0, r5
 80085d4:	f000 f85f 	bl	8008696 <__swbuf_r>
 80085d8:	3001      	adds	r0, #1
 80085da:	d0d7      	beq.n	800858c <_puts_r+0x38>
 80085dc:	250a      	movs	r5, #10
 80085de:	e7d7      	b.n	8008590 <_puts_r+0x3c>
 80085e0:	4622      	mov	r2, r4
 80085e2:	4628      	mov	r0, r5
 80085e4:	f000 f857 	bl	8008696 <__swbuf_r>
 80085e8:	3001      	adds	r0, #1
 80085ea:	d1e7      	bne.n	80085bc <_puts_r+0x68>
 80085ec:	e7ce      	b.n	800858c <_puts_r+0x38>
 80085ee:	3e01      	subs	r6, #1
 80085f0:	e7e4      	b.n	80085bc <_puts_r+0x68>
 80085f2:	6823      	ldr	r3, [r4, #0]
 80085f4:	1c5a      	adds	r2, r3, #1
 80085f6:	6022      	str	r2, [r4, #0]
 80085f8:	220a      	movs	r2, #10
 80085fa:	701a      	strb	r2, [r3, #0]
 80085fc:	e7ee      	b.n	80085dc <_puts_r+0x88>
	...

08008600 <puts>:
 8008600:	4b02      	ldr	r3, [pc, #8]	@ (800860c <puts+0xc>)
 8008602:	4601      	mov	r1, r0
 8008604:	6818      	ldr	r0, [r3, #0]
 8008606:	f7ff bfa5 	b.w	8008554 <_puts_r>
 800860a:	bf00      	nop
 800860c:	20000b2c 	.word	0x20000b2c

08008610 <__sread>:
 8008610:	b510      	push	{r4, lr}
 8008612:	460c      	mov	r4, r1
 8008614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008618:	f000 f968 	bl	80088ec <_read_r>
 800861c:	2800      	cmp	r0, #0
 800861e:	bfab      	itete	ge
 8008620:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008622:	89a3      	ldrhlt	r3, [r4, #12]
 8008624:	181b      	addge	r3, r3, r0
 8008626:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800862a:	bfac      	ite	ge
 800862c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800862e:	81a3      	strhlt	r3, [r4, #12]
 8008630:	bd10      	pop	{r4, pc}

08008632 <__swrite>:
 8008632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008636:	461f      	mov	r7, r3
 8008638:	898b      	ldrh	r3, [r1, #12]
 800863a:	05db      	lsls	r3, r3, #23
 800863c:	4605      	mov	r5, r0
 800863e:	460c      	mov	r4, r1
 8008640:	4616      	mov	r6, r2
 8008642:	d505      	bpl.n	8008650 <__swrite+0x1e>
 8008644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008648:	2302      	movs	r3, #2
 800864a:	2200      	movs	r2, #0
 800864c:	f000 f93c 	bl	80088c8 <_lseek_r>
 8008650:	89a3      	ldrh	r3, [r4, #12]
 8008652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008656:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800865a:	81a3      	strh	r3, [r4, #12]
 800865c:	4632      	mov	r2, r6
 800865e:	463b      	mov	r3, r7
 8008660:	4628      	mov	r0, r5
 8008662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008666:	f000 b953 	b.w	8008910 <_write_r>

0800866a <__sseek>:
 800866a:	b510      	push	{r4, lr}
 800866c:	460c      	mov	r4, r1
 800866e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008672:	f000 f929 	bl	80088c8 <_lseek_r>
 8008676:	1c43      	adds	r3, r0, #1
 8008678:	89a3      	ldrh	r3, [r4, #12]
 800867a:	bf15      	itete	ne
 800867c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800867e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008682:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008686:	81a3      	strheq	r3, [r4, #12]
 8008688:	bf18      	it	ne
 800868a:	81a3      	strhne	r3, [r4, #12]
 800868c:	bd10      	pop	{r4, pc}

0800868e <__sclose>:
 800868e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008692:	f000 b909 	b.w	80088a8 <_close_r>

08008696 <__swbuf_r>:
 8008696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008698:	460e      	mov	r6, r1
 800869a:	4614      	mov	r4, r2
 800869c:	4605      	mov	r5, r0
 800869e:	b118      	cbz	r0, 80086a8 <__swbuf_r+0x12>
 80086a0:	6a03      	ldr	r3, [r0, #32]
 80086a2:	b90b      	cbnz	r3, 80086a8 <__swbuf_r+0x12>
 80086a4:	f7ff ff0e 	bl	80084c4 <__sinit>
 80086a8:	69a3      	ldr	r3, [r4, #24]
 80086aa:	60a3      	str	r3, [r4, #8]
 80086ac:	89a3      	ldrh	r3, [r4, #12]
 80086ae:	071a      	lsls	r2, r3, #28
 80086b0:	d501      	bpl.n	80086b6 <__swbuf_r+0x20>
 80086b2:	6923      	ldr	r3, [r4, #16]
 80086b4:	b943      	cbnz	r3, 80086c8 <__swbuf_r+0x32>
 80086b6:	4621      	mov	r1, r4
 80086b8:	4628      	mov	r0, r5
 80086ba:	f000 f82b 	bl	8008714 <__swsetup_r>
 80086be:	b118      	cbz	r0, 80086c8 <__swbuf_r+0x32>
 80086c0:	f04f 37ff 	mov.w	r7, #4294967295
 80086c4:	4638      	mov	r0, r7
 80086c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086c8:	6823      	ldr	r3, [r4, #0]
 80086ca:	6922      	ldr	r2, [r4, #16]
 80086cc:	1a98      	subs	r0, r3, r2
 80086ce:	6963      	ldr	r3, [r4, #20]
 80086d0:	b2f6      	uxtb	r6, r6
 80086d2:	4283      	cmp	r3, r0
 80086d4:	4637      	mov	r7, r6
 80086d6:	dc05      	bgt.n	80086e4 <__swbuf_r+0x4e>
 80086d8:	4621      	mov	r1, r4
 80086da:	4628      	mov	r0, r5
 80086dc:	f7ff fe2a 	bl	8008334 <_fflush_r>
 80086e0:	2800      	cmp	r0, #0
 80086e2:	d1ed      	bne.n	80086c0 <__swbuf_r+0x2a>
 80086e4:	68a3      	ldr	r3, [r4, #8]
 80086e6:	3b01      	subs	r3, #1
 80086e8:	60a3      	str	r3, [r4, #8]
 80086ea:	6823      	ldr	r3, [r4, #0]
 80086ec:	1c5a      	adds	r2, r3, #1
 80086ee:	6022      	str	r2, [r4, #0]
 80086f0:	701e      	strb	r6, [r3, #0]
 80086f2:	6962      	ldr	r2, [r4, #20]
 80086f4:	1c43      	adds	r3, r0, #1
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d004      	beq.n	8008704 <__swbuf_r+0x6e>
 80086fa:	89a3      	ldrh	r3, [r4, #12]
 80086fc:	07db      	lsls	r3, r3, #31
 80086fe:	d5e1      	bpl.n	80086c4 <__swbuf_r+0x2e>
 8008700:	2e0a      	cmp	r6, #10
 8008702:	d1df      	bne.n	80086c4 <__swbuf_r+0x2e>
 8008704:	4621      	mov	r1, r4
 8008706:	4628      	mov	r0, r5
 8008708:	f7ff fe14 	bl	8008334 <_fflush_r>
 800870c:	2800      	cmp	r0, #0
 800870e:	d0d9      	beq.n	80086c4 <__swbuf_r+0x2e>
 8008710:	e7d6      	b.n	80086c0 <__swbuf_r+0x2a>
	...

08008714 <__swsetup_r>:
 8008714:	b538      	push	{r3, r4, r5, lr}
 8008716:	4b29      	ldr	r3, [pc, #164]	@ (80087bc <__swsetup_r+0xa8>)
 8008718:	4605      	mov	r5, r0
 800871a:	6818      	ldr	r0, [r3, #0]
 800871c:	460c      	mov	r4, r1
 800871e:	b118      	cbz	r0, 8008728 <__swsetup_r+0x14>
 8008720:	6a03      	ldr	r3, [r0, #32]
 8008722:	b90b      	cbnz	r3, 8008728 <__swsetup_r+0x14>
 8008724:	f7ff fece 	bl	80084c4 <__sinit>
 8008728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800872c:	0719      	lsls	r1, r3, #28
 800872e:	d422      	bmi.n	8008776 <__swsetup_r+0x62>
 8008730:	06da      	lsls	r2, r3, #27
 8008732:	d407      	bmi.n	8008744 <__swsetup_r+0x30>
 8008734:	2209      	movs	r2, #9
 8008736:	602a      	str	r2, [r5, #0]
 8008738:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800873c:	81a3      	strh	r3, [r4, #12]
 800873e:	f04f 30ff 	mov.w	r0, #4294967295
 8008742:	e033      	b.n	80087ac <__swsetup_r+0x98>
 8008744:	0758      	lsls	r0, r3, #29
 8008746:	d512      	bpl.n	800876e <__swsetup_r+0x5a>
 8008748:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800874a:	b141      	cbz	r1, 800875e <__swsetup_r+0x4a>
 800874c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008750:	4299      	cmp	r1, r3
 8008752:	d002      	beq.n	800875a <__swsetup_r+0x46>
 8008754:	4628      	mov	r0, r5
 8008756:	f000 f939 	bl	80089cc <_free_r>
 800875a:	2300      	movs	r3, #0
 800875c:	6363      	str	r3, [r4, #52]	@ 0x34
 800875e:	89a3      	ldrh	r3, [r4, #12]
 8008760:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008764:	81a3      	strh	r3, [r4, #12]
 8008766:	2300      	movs	r3, #0
 8008768:	6063      	str	r3, [r4, #4]
 800876a:	6923      	ldr	r3, [r4, #16]
 800876c:	6023      	str	r3, [r4, #0]
 800876e:	89a3      	ldrh	r3, [r4, #12]
 8008770:	f043 0308 	orr.w	r3, r3, #8
 8008774:	81a3      	strh	r3, [r4, #12]
 8008776:	6923      	ldr	r3, [r4, #16]
 8008778:	b94b      	cbnz	r3, 800878e <__swsetup_r+0x7a>
 800877a:	89a3      	ldrh	r3, [r4, #12]
 800877c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008780:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008784:	d003      	beq.n	800878e <__swsetup_r+0x7a>
 8008786:	4621      	mov	r1, r4
 8008788:	4628      	mov	r0, r5
 800878a:	f000 fd27 	bl	80091dc <__smakebuf_r>
 800878e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008792:	f013 0201 	ands.w	r2, r3, #1
 8008796:	d00a      	beq.n	80087ae <__swsetup_r+0x9a>
 8008798:	2200      	movs	r2, #0
 800879a:	60a2      	str	r2, [r4, #8]
 800879c:	6962      	ldr	r2, [r4, #20]
 800879e:	4252      	negs	r2, r2
 80087a0:	61a2      	str	r2, [r4, #24]
 80087a2:	6922      	ldr	r2, [r4, #16]
 80087a4:	b942      	cbnz	r2, 80087b8 <__swsetup_r+0xa4>
 80087a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80087aa:	d1c5      	bne.n	8008738 <__swsetup_r+0x24>
 80087ac:	bd38      	pop	{r3, r4, r5, pc}
 80087ae:	0799      	lsls	r1, r3, #30
 80087b0:	bf58      	it	pl
 80087b2:	6962      	ldrpl	r2, [r4, #20]
 80087b4:	60a2      	str	r2, [r4, #8]
 80087b6:	e7f4      	b.n	80087a2 <__swsetup_r+0x8e>
 80087b8:	2000      	movs	r0, #0
 80087ba:	e7f7      	b.n	80087ac <__swsetup_r+0x98>
 80087bc:	20000b2c 	.word	0x20000b2c

080087c0 <memcmp>:
 80087c0:	b510      	push	{r4, lr}
 80087c2:	3901      	subs	r1, #1
 80087c4:	4402      	add	r2, r0
 80087c6:	4290      	cmp	r0, r2
 80087c8:	d101      	bne.n	80087ce <memcmp+0xe>
 80087ca:	2000      	movs	r0, #0
 80087cc:	e005      	b.n	80087da <memcmp+0x1a>
 80087ce:	7803      	ldrb	r3, [r0, #0]
 80087d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80087d4:	42a3      	cmp	r3, r4
 80087d6:	d001      	beq.n	80087dc <memcmp+0x1c>
 80087d8:	1b18      	subs	r0, r3, r4
 80087da:	bd10      	pop	{r4, pc}
 80087dc:	3001      	adds	r0, #1
 80087de:	e7f2      	b.n	80087c6 <memcmp+0x6>

080087e0 <memset>:
 80087e0:	4402      	add	r2, r0
 80087e2:	4603      	mov	r3, r0
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d100      	bne.n	80087ea <memset+0xa>
 80087e8:	4770      	bx	lr
 80087ea:	f803 1b01 	strb.w	r1, [r3], #1
 80087ee:	e7f9      	b.n	80087e4 <memset+0x4>

080087f0 <strtok>:
 80087f0:	4b16      	ldr	r3, [pc, #88]	@ (800884c <strtok+0x5c>)
 80087f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087f6:	681f      	ldr	r7, [r3, #0]
 80087f8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80087fa:	4605      	mov	r5, r0
 80087fc:	460e      	mov	r6, r1
 80087fe:	b9ec      	cbnz	r4, 800883c <strtok+0x4c>
 8008800:	2050      	movs	r0, #80	@ 0x50
 8008802:	f000 f92d 	bl	8008a60 <malloc>
 8008806:	4602      	mov	r2, r0
 8008808:	6478      	str	r0, [r7, #68]	@ 0x44
 800880a:	b920      	cbnz	r0, 8008816 <strtok+0x26>
 800880c:	4b10      	ldr	r3, [pc, #64]	@ (8008850 <strtok+0x60>)
 800880e:	4811      	ldr	r0, [pc, #68]	@ (8008854 <strtok+0x64>)
 8008810:	215b      	movs	r1, #91	@ 0x5b
 8008812:	f000 f8bd 	bl	8008990 <__assert_func>
 8008816:	e9c0 4400 	strd	r4, r4, [r0]
 800881a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800881e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008822:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008826:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800882a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800882e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008832:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008836:	6184      	str	r4, [r0, #24]
 8008838:	7704      	strb	r4, [r0, #28]
 800883a:	6244      	str	r4, [r0, #36]	@ 0x24
 800883c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800883e:	4631      	mov	r1, r6
 8008840:	4628      	mov	r0, r5
 8008842:	2301      	movs	r3, #1
 8008844:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008848:	f000 b806 	b.w	8008858 <__strtok_r>
 800884c:	20000b2c 	.word	0x20000b2c
 8008850:	0800a8a1 	.word	0x0800a8a1
 8008854:	0800a8b8 	.word	0x0800a8b8

08008858 <__strtok_r>:
 8008858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800885a:	4604      	mov	r4, r0
 800885c:	b908      	cbnz	r0, 8008862 <__strtok_r+0xa>
 800885e:	6814      	ldr	r4, [r2, #0]
 8008860:	b144      	cbz	r4, 8008874 <__strtok_r+0x1c>
 8008862:	4620      	mov	r0, r4
 8008864:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008868:	460f      	mov	r7, r1
 800886a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800886e:	b91e      	cbnz	r6, 8008878 <__strtok_r+0x20>
 8008870:	b965      	cbnz	r5, 800888c <__strtok_r+0x34>
 8008872:	6015      	str	r5, [r2, #0]
 8008874:	2000      	movs	r0, #0
 8008876:	e005      	b.n	8008884 <__strtok_r+0x2c>
 8008878:	42b5      	cmp	r5, r6
 800887a:	d1f6      	bne.n	800886a <__strtok_r+0x12>
 800887c:	2b00      	cmp	r3, #0
 800887e:	d1f0      	bne.n	8008862 <__strtok_r+0xa>
 8008880:	6014      	str	r4, [r2, #0]
 8008882:	7003      	strb	r3, [r0, #0]
 8008884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008886:	461c      	mov	r4, r3
 8008888:	e00c      	b.n	80088a4 <__strtok_r+0x4c>
 800888a:	b915      	cbnz	r5, 8008892 <__strtok_r+0x3a>
 800888c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008890:	460e      	mov	r6, r1
 8008892:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008896:	42ab      	cmp	r3, r5
 8008898:	d1f7      	bne.n	800888a <__strtok_r+0x32>
 800889a:	2b00      	cmp	r3, #0
 800889c:	d0f3      	beq.n	8008886 <__strtok_r+0x2e>
 800889e:	2300      	movs	r3, #0
 80088a0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80088a4:	6014      	str	r4, [r2, #0]
 80088a6:	e7ed      	b.n	8008884 <__strtok_r+0x2c>

080088a8 <_close_r>:
 80088a8:	b538      	push	{r3, r4, r5, lr}
 80088aa:	4d06      	ldr	r5, [pc, #24]	@ (80088c4 <_close_r+0x1c>)
 80088ac:	2300      	movs	r3, #0
 80088ae:	4604      	mov	r4, r0
 80088b0:	4608      	mov	r0, r1
 80088b2:	602b      	str	r3, [r5, #0]
 80088b4:	f7f8 fecc 	bl	8001650 <_close>
 80088b8:	1c43      	adds	r3, r0, #1
 80088ba:	d102      	bne.n	80088c2 <_close_r+0x1a>
 80088bc:	682b      	ldr	r3, [r5, #0]
 80088be:	b103      	cbz	r3, 80088c2 <_close_r+0x1a>
 80088c0:	6023      	str	r3, [r4, #0]
 80088c2:	bd38      	pop	{r3, r4, r5, pc}
 80088c4:	20001814 	.word	0x20001814

080088c8 <_lseek_r>:
 80088c8:	b538      	push	{r3, r4, r5, lr}
 80088ca:	4d07      	ldr	r5, [pc, #28]	@ (80088e8 <_lseek_r+0x20>)
 80088cc:	4604      	mov	r4, r0
 80088ce:	4608      	mov	r0, r1
 80088d0:	4611      	mov	r1, r2
 80088d2:	2200      	movs	r2, #0
 80088d4:	602a      	str	r2, [r5, #0]
 80088d6:	461a      	mov	r2, r3
 80088d8:	f7f8 fee1 	bl	800169e <_lseek>
 80088dc:	1c43      	adds	r3, r0, #1
 80088de:	d102      	bne.n	80088e6 <_lseek_r+0x1e>
 80088e0:	682b      	ldr	r3, [r5, #0]
 80088e2:	b103      	cbz	r3, 80088e6 <_lseek_r+0x1e>
 80088e4:	6023      	str	r3, [r4, #0]
 80088e6:	bd38      	pop	{r3, r4, r5, pc}
 80088e8:	20001814 	.word	0x20001814

080088ec <_read_r>:
 80088ec:	b538      	push	{r3, r4, r5, lr}
 80088ee:	4d07      	ldr	r5, [pc, #28]	@ (800890c <_read_r+0x20>)
 80088f0:	4604      	mov	r4, r0
 80088f2:	4608      	mov	r0, r1
 80088f4:	4611      	mov	r1, r2
 80088f6:	2200      	movs	r2, #0
 80088f8:	602a      	str	r2, [r5, #0]
 80088fa:	461a      	mov	r2, r3
 80088fc:	f7f8 fe8b 	bl	8001616 <_read>
 8008900:	1c43      	adds	r3, r0, #1
 8008902:	d102      	bne.n	800890a <_read_r+0x1e>
 8008904:	682b      	ldr	r3, [r5, #0]
 8008906:	b103      	cbz	r3, 800890a <_read_r+0x1e>
 8008908:	6023      	str	r3, [r4, #0]
 800890a:	bd38      	pop	{r3, r4, r5, pc}
 800890c:	20001814 	.word	0x20001814

08008910 <_write_r>:
 8008910:	b538      	push	{r3, r4, r5, lr}
 8008912:	4d07      	ldr	r5, [pc, #28]	@ (8008930 <_write_r+0x20>)
 8008914:	4604      	mov	r4, r0
 8008916:	4608      	mov	r0, r1
 8008918:	4611      	mov	r1, r2
 800891a:	2200      	movs	r2, #0
 800891c:	602a      	str	r2, [r5, #0]
 800891e:	461a      	mov	r2, r3
 8008920:	f7f9 fda8 	bl	8002474 <_write>
 8008924:	1c43      	adds	r3, r0, #1
 8008926:	d102      	bne.n	800892e <_write_r+0x1e>
 8008928:	682b      	ldr	r3, [r5, #0]
 800892a:	b103      	cbz	r3, 800892e <_write_r+0x1e>
 800892c:	6023      	str	r3, [r4, #0]
 800892e:	bd38      	pop	{r3, r4, r5, pc}
 8008930:	20001814 	.word	0x20001814

08008934 <__errno>:
 8008934:	4b01      	ldr	r3, [pc, #4]	@ (800893c <__errno+0x8>)
 8008936:	6818      	ldr	r0, [r3, #0]
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	20000b2c 	.word	0x20000b2c

08008940 <__libc_init_array>:
 8008940:	b570      	push	{r4, r5, r6, lr}
 8008942:	4d0d      	ldr	r5, [pc, #52]	@ (8008978 <__libc_init_array+0x38>)
 8008944:	4c0d      	ldr	r4, [pc, #52]	@ (800897c <__libc_init_array+0x3c>)
 8008946:	1b64      	subs	r4, r4, r5
 8008948:	10a4      	asrs	r4, r4, #2
 800894a:	2600      	movs	r6, #0
 800894c:	42a6      	cmp	r6, r4
 800894e:	d109      	bne.n	8008964 <__libc_init_array+0x24>
 8008950:	4d0b      	ldr	r5, [pc, #44]	@ (8008980 <__libc_init_array+0x40>)
 8008952:	4c0c      	ldr	r4, [pc, #48]	@ (8008984 <__libc_init_array+0x44>)
 8008954:	f001 fd2c 	bl	800a3b0 <_init>
 8008958:	1b64      	subs	r4, r4, r5
 800895a:	10a4      	asrs	r4, r4, #2
 800895c:	2600      	movs	r6, #0
 800895e:	42a6      	cmp	r6, r4
 8008960:	d105      	bne.n	800896e <__libc_init_array+0x2e>
 8008962:	bd70      	pop	{r4, r5, r6, pc}
 8008964:	f855 3b04 	ldr.w	r3, [r5], #4
 8008968:	4798      	blx	r3
 800896a:	3601      	adds	r6, #1
 800896c:	e7ee      	b.n	800894c <__libc_init_array+0xc>
 800896e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008972:	4798      	blx	r3
 8008974:	3601      	adds	r6, #1
 8008976:	e7f2      	b.n	800895e <__libc_init_array+0x1e>
 8008978:	0800ab68 	.word	0x0800ab68
 800897c:	0800ab68 	.word	0x0800ab68
 8008980:	0800ab68 	.word	0x0800ab68
 8008984:	0800ab6c 	.word	0x0800ab6c

08008988 <__retarget_lock_init_recursive>:
 8008988:	4770      	bx	lr

0800898a <__retarget_lock_acquire_recursive>:
 800898a:	4770      	bx	lr

0800898c <__retarget_lock_release_recursive>:
 800898c:	4770      	bx	lr
	...

08008990 <__assert_func>:
 8008990:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008992:	4614      	mov	r4, r2
 8008994:	461a      	mov	r2, r3
 8008996:	4b09      	ldr	r3, [pc, #36]	@ (80089bc <__assert_func+0x2c>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4605      	mov	r5, r0
 800899c:	68d8      	ldr	r0, [r3, #12]
 800899e:	b954      	cbnz	r4, 80089b6 <__assert_func+0x26>
 80089a0:	4b07      	ldr	r3, [pc, #28]	@ (80089c0 <__assert_func+0x30>)
 80089a2:	461c      	mov	r4, r3
 80089a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80089a8:	9100      	str	r1, [sp, #0]
 80089aa:	462b      	mov	r3, r5
 80089ac:	4905      	ldr	r1, [pc, #20]	@ (80089c4 <__assert_func+0x34>)
 80089ae:	f000 fbdd 	bl	800916c <fiprintf>
 80089b2:	f000 fc81 	bl	80092b8 <abort>
 80089b6:	4b04      	ldr	r3, [pc, #16]	@ (80089c8 <__assert_func+0x38>)
 80089b8:	e7f4      	b.n	80089a4 <__assert_func+0x14>
 80089ba:	bf00      	nop
 80089bc:	20000b2c 	.word	0x20000b2c
 80089c0:	0800a94d 	.word	0x0800a94d
 80089c4:	0800a91f 	.word	0x0800a91f
 80089c8:	0800a912 	.word	0x0800a912

080089cc <_free_r>:
 80089cc:	b538      	push	{r3, r4, r5, lr}
 80089ce:	4605      	mov	r5, r0
 80089d0:	2900      	cmp	r1, #0
 80089d2:	d041      	beq.n	8008a58 <_free_r+0x8c>
 80089d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089d8:	1f0c      	subs	r4, r1, #4
 80089da:	2b00      	cmp	r3, #0
 80089dc:	bfb8      	it	lt
 80089de:	18e4      	addlt	r4, r4, r3
 80089e0:	f000 f8e8 	bl	8008bb4 <__malloc_lock>
 80089e4:	4a1d      	ldr	r2, [pc, #116]	@ (8008a5c <_free_r+0x90>)
 80089e6:	6813      	ldr	r3, [r2, #0]
 80089e8:	b933      	cbnz	r3, 80089f8 <_free_r+0x2c>
 80089ea:	6063      	str	r3, [r4, #4]
 80089ec:	6014      	str	r4, [r2, #0]
 80089ee:	4628      	mov	r0, r5
 80089f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089f4:	f000 b8e4 	b.w	8008bc0 <__malloc_unlock>
 80089f8:	42a3      	cmp	r3, r4
 80089fa:	d908      	bls.n	8008a0e <_free_r+0x42>
 80089fc:	6820      	ldr	r0, [r4, #0]
 80089fe:	1821      	adds	r1, r4, r0
 8008a00:	428b      	cmp	r3, r1
 8008a02:	bf01      	itttt	eq
 8008a04:	6819      	ldreq	r1, [r3, #0]
 8008a06:	685b      	ldreq	r3, [r3, #4]
 8008a08:	1809      	addeq	r1, r1, r0
 8008a0a:	6021      	streq	r1, [r4, #0]
 8008a0c:	e7ed      	b.n	80089ea <_free_r+0x1e>
 8008a0e:	461a      	mov	r2, r3
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	b10b      	cbz	r3, 8008a18 <_free_r+0x4c>
 8008a14:	42a3      	cmp	r3, r4
 8008a16:	d9fa      	bls.n	8008a0e <_free_r+0x42>
 8008a18:	6811      	ldr	r1, [r2, #0]
 8008a1a:	1850      	adds	r0, r2, r1
 8008a1c:	42a0      	cmp	r0, r4
 8008a1e:	d10b      	bne.n	8008a38 <_free_r+0x6c>
 8008a20:	6820      	ldr	r0, [r4, #0]
 8008a22:	4401      	add	r1, r0
 8008a24:	1850      	adds	r0, r2, r1
 8008a26:	4283      	cmp	r3, r0
 8008a28:	6011      	str	r1, [r2, #0]
 8008a2a:	d1e0      	bne.n	80089ee <_free_r+0x22>
 8008a2c:	6818      	ldr	r0, [r3, #0]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	6053      	str	r3, [r2, #4]
 8008a32:	4408      	add	r0, r1
 8008a34:	6010      	str	r0, [r2, #0]
 8008a36:	e7da      	b.n	80089ee <_free_r+0x22>
 8008a38:	d902      	bls.n	8008a40 <_free_r+0x74>
 8008a3a:	230c      	movs	r3, #12
 8008a3c:	602b      	str	r3, [r5, #0]
 8008a3e:	e7d6      	b.n	80089ee <_free_r+0x22>
 8008a40:	6820      	ldr	r0, [r4, #0]
 8008a42:	1821      	adds	r1, r4, r0
 8008a44:	428b      	cmp	r3, r1
 8008a46:	bf04      	itt	eq
 8008a48:	6819      	ldreq	r1, [r3, #0]
 8008a4a:	685b      	ldreq	r3, [r3, #4]
 8008a4c:	6063      	str	r3, [r4, #4]
 8008a4e:	bf04      	itt	eq
 8008a50:	1809      	addeq	r1, r1, r0
 8008a52:	6021      	streq	r1, [r4, #0]
 8008a54:	6054      	str	r4, [r2, #4]
 8008a56:	e7ca      	b.n	80089ee <_free_r+0x22>
 8008a58:	bd38      	pop	{r3, r4, r5, pc}
 8008a5a:	bf00      	nop
 8008a5c:	20001820 	.word	0x20001820

08008a60 <malloc>:
 8008a60:	4b02      	ldr	r3, [pc, #8]	@ (8008a6c <malloc+0xc>)
 8008a62:	4601      	mov	r1, r0
 8008a64:	6818      	ldr	r0, [r3, #0]
 8008a66:	f000 b825 	b.w	8008ab4 <_malloc_r>
 8008a6a:	bf00      	nop
 8008a6c:	20000b2c 	.word	0x20000b2c

08008a70 <sbrk_aligned>:
 8008a70:	b570      	push	{r4, r5, r6, lr}
 8008a72:	4e0f      	ldr	r6, [pc, #60]	@ (8008ab0 <sbrk_aligned+0x40>)
 8008a74:	460c      	mov	r4, r1
 8008a76:	6831      	ldr	r1, [r6, #0]
 8008a78:	4605      	mov	r5, r0
 8008a7a:	b911      	cbnz	r1, 8008a82 <sbrk_aligned+0x12>
 8008a7c:	f000 fc0c 	bl	8009298 <_sbrk_r>
 8008a80:	6030      	str	r0, [r6, #0]
 8008a82:	4621      	mov	r1, r4
 8008a84:	4628      	mov	r0, r5
 8008a86:	f000 fc07 	bl	8009298 <_sbrk_r>
 8008a8a:	1c43      	adds	r3, r0, #1
 8008a8c:	d103      	bne.n	8008a96 <sbrk_aligned+0x26>
 8008a8e:	f04f 34ff 	mov.w	r4, #4294967295
 8008a92:	4620      	mov	r0, r4
 8008a94:	bd70      	pop	{r4, r5, r6, pc}
 8008a96:	1cc4      	adds	r4, r0, #3
 8008a98:	f024 0403 	bic.w	r4, r4, #3
 8008a9c:	42a0      	cmp	r0, r4
 8008a9e:	d0f8      	beq.n	8008a92 <sbrk_aligned+0x22>
 8008aa0:	1a21      	subs	r1, r4, r0
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	f000 fbf8 	bl	8009298 <_sbrk_r>
 8008aa8:	3001      	adds	r0, #1
 8008aaa:	d1f2      	bne.n	8008a92 <sbrk_aligned+0x22>
 8008aac:	e7ef      	b.n	8008a8e <sbrk_aligned+0x1e>
 8008aae:	bf00      	nop
 8008ab0:	2000181c 	.word	0x2000181c

08008ab4 <_malloc_r>:
 8008ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ab8:	1ccd      	adds	r5, r1, #3
 8008aba:	f025 0503 	bic.w	r5, r5, #3
 8008abe:	3508      	adds	r5, #8
 8008ac0:	2d0c      	cmp	r5, #12
 8008ac2:	bf38      	it	cc
 8008ac4:	250c      	movcc	r5, #12
 8008ac6:	2d00      	cmp	r5, #0
 8008ac8:	4606      	mov	r6, r0
 8008aca:	db01      	blt.n	8008ad0 <_malloc_r+0x1c>
 8008acc:	42a9      	cmp	r1, r5
 8008ace:	d904      	bls.n	8008ada <_malloc_r+0x26>
 8008ad0:	230c      	movs	r3, #12
 8008ad2:	6033      	str	r3, [r6, #0]
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ada:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008bb0 <_malloc_r+0xfc>
 8008ade:	f000 f869 	bl	8008bb4 <__malloc_lock>
 8008ae2:	f8d8 3000 	ldr.w	r3, [r8]
 8008ae6:	461c      	mov	r4, r3
 8008ae8:	bb44      	cbnz	r4, 8008b3c <_malloc_r+0x88>
 8008aea:	4629      	mov	r1, r5
 8008aec:	4630      	mov	r0, r6
 8008aee:	f7ff ffbf 	bl	8008a70 <sbrk_aligned>
 8008af2:	1c43      	adds	r3, r0, #1
 8008af4:	4604      	mov	r4, r0
 8008af6:	d158      	bne.n	8008baa <_malloc_r+0xf6>
 8008af8:	f8d8 4000 	ldr.w	r4, [r8]
 8008afc:	4627      	mov	r7, r4
 8008afe:	2f00      	cmp	r7, #0
 8008b00:	d143      	bne.n	8008b8a <_malloc_r+0xd6>
 8008b02:	2c00      	cmp	r4, #0
 8008b04:	d04b      	beq.n	8008b9e <_malloc_r+0xea>
 8008b06:	6823      	ldr	r3, [r4, #0]
 8008b08:	4639      	mov	r1, r7
 8008b0a:	4630      	mov	r0, r6
 8008b0c:	eb04 0903 	add.w	r9, r4, r3
 8008b10:	f000 fbc2 	bl	8009298 <_sbrk_r>
 8008b14:	4581      	cmp	r9, r0
 8008b16:	d142      	bne.n	8008b9e <_malloc_r+0xea>
 8008b18:	6821      	ldr	r1, [r4, #0]
 8008b1a:	1a6d      	subs	r5, r5, r1
 8008b1c:	4629      	mov	r1, r5
 8008b1e:	4630      	mov	r0, r6
 8008b20:	f7ff ffa6 	bl	8008a70 <sbrk_aligned>
 8008b24:	3001      	adds	r0, #1
 8008b26:	d03a      	beq.n	8008b9e <_malloc_r+0xea>
 8008b28:	6823      	ldr	r3, [r4, #0]
 8008b2a:	442b      	add	r3, r5
 8008b2c:	6023      	str	r3, [r4, #0]
 8008b2e:	f8d8 3000 	ldr.w	r3, [r8]
 8008b32:	685a      	ldr	r2, [r3, #4]
 8008b34:	bb62      	cbnz	r2, 8008b90 <_malloc_r+0xdc>
 8008b36:	f8c8 7000 	str.w	r7, [r8]
 8008b3a:	e00f      	b.n	8008b5c <_malloc_r+0xa8>
 8008b3c:	6822      	ldr	r2, [r4, #0]
 8008b3e:	1b52      	subs	r2, r2, r5
 8008b40:	d420      	bmi.n	8008b84 <_malloc_r+0xd0>
 8008b42:	2a0b      	cmp	r2, #11
 8008b44:	d917      	bls.n	8008b76 <_malloc_r+0xc2>
 8008b46:	1961      	adds	r1, r4, r5
 8008b48:	42a3      	cmp	r3, r4
 8008b4a:	6025      	str	r5, [r4, #0]
 8008b4c:	bf18      	it	ne
 8008b4e:	6059      	strne	r1, [r3, #4]
 8008b50:	6863      	ldr	r3, [r4, #4]
 8008b52:	bf08      	it	eq
 8008b54:	f8c8 1000 	streq.w	r1, [r8]
 8008b58:	5162      	str	r2, [r4, r5]
 8008b5a:	604b      	str	r3, [r1, #4]
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	f000 f82f 	bl	8008bc0 <__malloc_unlock>
 8008b62:	f104 000b 	add.w	r0, r4, #11
 8008b66:	1d23      	adds	r3, r4, #4
 8008b68:	f020 0007 	bic.w	r0, r0, #7
 8008b6c:	1ac2      	subs	r2, r0, r3
 8008b6e:	bf1c      	itt	ne
 8008b70:	1a1b      	subne	r3, r3, r0
 8008b72:	50a3      	strne	r3, [r4, r2]
 8008b74:	e7af      	b.n	8008ad6 <_malloc_r+0x22>
 8008b76:	6862      	ldr	r2, [r4, #4]
 8008b78:	42a3      	cmp	r3, r4
 8008b7a:	bf0c      	ite	eq
 8008b7c:	f8c8 2000 	streq.w	r2, [r8]
 8008b80:	605a      	strne	r2, [r3, #4]
 8008b82:	e7eb      	b.n	8008b5c <_malloc_r+0xa8>
 8008b84:	4623      	mov	r3, r4
 8008b86:	6864      	ldr	r4, [r4, #4]
 8008b88:	e7ae      	b.n	8008ae8 <_malloc_r+0x34>
 8008b8a:	463c      	mov	r4, r7
 8008b8c:	687f      	ldr	r7, [r7, #4]
 8008b8e:	e7b6      	b.n	8008afe <_malloc_r+0x4a>
 8008b90:	461a      	mov	r2, r3
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	42a3      	cmp	r3, r4
 8008b96:	d1fb      	bne.n	8008b90 <_malloc_r+0xdc>
 8008b98:	2300      	movs	r3, #0
 8008b9a:	6053      	str	r3, [r2, #4]
 8008b9c:	e7de      	b.n	8008b5c <_malloc_r+0xa8>
 8008b9e:	230c      	movs	r3, #12
 8008ba0:	6033      	str	r3, [r6, #0]
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	f000 f80c 	bl	8008bc0 <__malloc_unlock>
 8008ba8:	e794      	b.n	8008ad4 <_malloc_r+0x20>
 8008baa:	6005      	str	r5, [r0, #0]
 8008bac:	e7d6      	b.n	8008b5c <_malloc_r+0xa8>
 8008bae:	bf00      	nop
 8008bb0:	20001820 	.word	0x20001820

08008bb4 <__malloc_lock>:
 8008bb4:	4801      	ldr	r0, [pc, #4]	@ (8008bbc <__malloc_lock+0x8>)
 8008bb6:	f7ff bee8 	b.w	800898a <__retarget_lock_acquire_recursive>
 8008bba:	bf00      	nop
 8008bbc:	20001818 	.word	0x20001818

08008bc0 <__malloc_unlock>:
 8008bc0:	4801      	ldr	r0, [pc, #4]	@ (8008bc8 <__malloc_unlock+0x8>)
 8008bc2:	f7ff bee3 	b.w	800898c <__retarget_lock_release_recursive>
 8008bc6:	bf00      	nop
 8008bc8:	20001818 	.word	0x20001818

08008bcc <__sfputc_r>:
 8008bcc:	6893      	ldr	r3, [r2, #8]
 8008bce:	3b01      	subs	r3, #1
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	b410      	push	{r4}
 8008bd4:	6093      	str	r3, [r2, #8]
 8008bd6:	da08      	bge.n	8008bea <__sfputc_r+0x1e>
 8008bd8:	6994      	ldr	r4, [r2, #24]
 8008bda:	42a3      	cmp	r3, r4
 8008bdc:	db01      	blt.n	8008be2 <__sfputc_r+0x16>
 8008bde:	290a      	cmp	r1, #10
 8008be0:	d103      	bne.n	8008bea <__sfputc_r+0x1e>
 8008be2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008be6:	f7ff bd56 	b.w	8008696 <__swbuf_r>
 8008bea:	6813      	ldr	r3, [r2, #0]
 8008bec:	1c58      	adds	r0, r3, #1
 8008bee:	6010      	str	r0, [r2, #0]
 8008bf0:	7019      	strb	r1, [r3, #0]
 8008bf2:	4608      	mov	r0, r1
 8008bf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bf8:	4770      	bx	lr

08008bfa <__sfputs_r>:
 8008bfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bfc:	4606      	mov	r6, r0
 8008bfe:	460f      	mov	r7, r1
 8008c00:	4614      	mov	r4, r2
 8008c02:	18d5      	adds	r5, r2, r3
 8008c04:	42ac      	cmp	r4, r5
 8008c06:	d101      	bne.n	8008c0c <__sfputs_r+0x12>
 8008c08:	2000      	movs	r0, #0
 8008c0a:	e007      	b.n	8008c1c <__sfputs_r+0x22>
 8008c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c10:	463a      	mov	r2, r7
 8008c12:	4630      	mov	r0, r6
 8008c14:	f7ff ffda 	bl	8008bcc <__sfputc_r>
 8008c18:	1c43      	adds	r3, r0, #1
 8008c1a:	d1f3      	bne.n	8008c04 <__sfputs_r+0xa>
 8008c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c20 <_vfiprintf_r>:
 8008c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c24:	460d      	mov	r5, r1
 8008c26:	b09d      	sub	sp, #116	@ 0x74
 8008c28:	4614      	mov	r4, r2
 8008c2a:	4698      	mov	r8, r3
 8008c2c:	4606      	mov	r6, r0
 8008c2e:	b118      	cbz	r0, 8008c38 <_vfiprintf_r+0x18>
 8008c30:	6a03      	ldr	r3, [r0, #32]
 8008c32:	b90b      	cbnz	r3, 8008c38 <_vfiprintf_r+0x18>
 8008c34:	f7ff fc46 	bl	80084c4 <__sinit>
 8008c38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c3a:	07d9      	lsls	r1, r3, #31
 8008c3c:	d405      	bmi.n	8008c4a <_vfiprintf_r+0x2a>
 8008c3e:	89ab      	ldrh	r3, [r5, #12]
 8008c40:	059a      	lsls	r2, r3, #22
 8008c42:	d402      	bmi.n	8008c4a <_vfiprintf_r+0x2a>
 8008c44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c46:	f7ff fea0 	bl	800898a <__retarget_lock_acquire_recursive>
 8008c4a:	89ab      	ldrh	r3, [r5, #12]
 8008c4c:	071b      	lsls	r3, r3, #28
 8008c4e:	d501      	bpl.n	8008c54 <_vfiprintf_r+0x34>
 8008c50:	692b      	ldr	r3, [r5, #16]
 8008c52:	b99b      	cbnz	r3, 8008c7c <_vfiprintf_r+0x5c>
 8008c54:	4629      	mov	r1, r5
 8008c56:	4630      	mov	r0, r6
 8008c58:	f7ff fd5c 	bl	8008714 <__swsetup_r>
 8008c5c:	b170      	cbz	r0, 8008c7c <_vfiprintf_r+0x5c>
 8008c5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c60:	07dc      	lsls	r4, r3, #31
 8008c62:	d504      	bpl.n	8008c6e <_vfiprintf_r+0x4e>
 8008c64:	f04f 30ff 	mov.w	r0, #4294967295
 8008c68:	b01d      	add	sp, #116	@ 0x74
 8008c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c6e:	89ab      	ldrh	r3, [r5, #12]
 8008c70:	0598      	lsls	r0, r3, #22
 8008c72:	d4f7      	bmi.n	8008c64 <_vfiprintf_r+0x44>
 8008c74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c76:	f7ff fe89 	bl	800898c <__retarget_lock_release_recursive>
 8008c7a:	e7f3      	b.n	8008c64 <_vfiprintf_r+0x44>
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c80:	2320      	movs	r3, #32
 8008c82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008c86:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c8a:	2330      	movs	r3, #48	@ 0x30
 8008c8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008e3c <_vfiprintf_r+0x21c>
 8008c90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c94:	f04f 0901 	mov.w	r9, #1
 8008c98:	4623      	mov	r3, r4
 8008c9a:	469a      	mov	sl, r3
 8008c9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ca0:	b10a      	cbz	r2, 8008ca6 <_vfiprintf_r+0x86>
 8008ca2:	2a25      	cmp	r2, #37	@ 0x25
 8008ca4:	d1f9      	bne.n	8008c9a <_vfiprintf_r+0x7a>
 8008ca6:	ebba 0b04 	subs.w	fp, sl, r4
 8008caa:	d00b      	beq.n	8008cc4 <_vfiprintf_r+0xa4>
 8008cac:	465b      	mov	r3, fp
 8008cae:	4622      	mov	r2, r4
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	4630      	mov	r0, r6
 8008cb4:	f7ff ffa1 	bl	8008bfa <__sfputs_r>
 8008cb8:	3001      	adds	r0, #1
 8008cba:	f000 80a7 	beq.w	8008e0c <_vfiprintf_r+0x1ec>
 8008cbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cc0:	445a      	add	r2, fp
 8008cc2:	9209      	str	r2, [sp, #36]	@ 0x24
 8008cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f000 809f 	beq.w	8008e0c <_vfiprintf_r+0x1ec>
 8008cce:	2300      	movs	r3, #0
 8008cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8008cd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cd8:	f10a 0a01 	add.w	sl, sl, #1
 8008cdc:	9304      	str	r3, [sp, #16]
 8008cde:	9307      	str	r3, [sp, #28]
 8008ce0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ce4:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ce6:	4654      	mov	r4, sl
 8008ce8:	2205      	movs	r2, #5
 8008cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cee:	4853      	ldr	r0, [pc, #332]	@ (8008e3c <_vfiprintf_r+0x21c>)
 8008cf0:	f7f7 fa86 	bl	8000200 <memchr>
 8008cf4:	9a04      	ldr	r2, [sp, #16]
 8008cf6:	b9d8      	cbnz	r0, 8008d30 <_vfiprintf_r+0x110>
 8008cf8:	06d1      	lsls	r1, r2, #27
 8008cfa:	bf44      	itt	mi
 8008cfc:	2320      	movmi	r3, #32
 8008cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d02:	0713      	lsls	r3, r2, #28
 8008d04:	bf44      	itt	mi
 8008d06:	232b      	movmi	r3, #43	@ 0x2b
 8008d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d10:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d12:	d015      	beq.n	8008d40 <_vfiprintf_r+0x120>
 8008d14:	9a07      	ldr	r2, [sp, #28]
 8008d16:	4654      	mov	r4, sl
 8008d18:	2000      	movs	r0, #0
 8008d1a:	f04f 0c0a 	mov.w	ip, #10
 8008d1e:	4621      	mov	r1, r4
 8008d20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d24:	3b30      	subs	r3, #48	@ 0x30
 8008d26:	2b09      	cmp	r3, #9
 8008d28:	d94b      	bls.n	8008dc2 <_vfiprintf_r+0x1a2>
 8008d2a:	b1b0      	cbz	r0, 8008d5a <_vfiprintf_r+0x13a>
 8008d2c:	9207      	str	r2, [sp, #28]
 8008d2e:	e014      	b.n	8008d5a <_vfiprintf_r+0x13a>
 8008d30:	eba0 0308 	sub.w	r3, r0, r8
 8008d34:	fa09 f303 	lsl.w	r3, r9, r3
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	9304      	str	r3, [sp, #16]
 8008d3c:	46a2      	mov	sl, r4
 8008d3e:	e7d2      	b.n	8008ce6 <_vfiprintf_r+0xc6>
 8008d40:	9b03      	ldr	r3, [sp, #12]
 8008d42:	1d19      	adds	r1, r3, #4
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	9103      	str	r1, [sp, #12]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	bfbb      	ittet	lt
 8008d4c:	425b      	neglt	r3, r3
 8008d4e:	f042 0202 	orrlt.w	r2, r2, #2
 8008d52:	9307      	strge	r3, [sp, #28]
 8008d54:	9307      	strlt	r3, [sp, #28]
 8008d56:	bfb8      	it	lt
 8008d58:	9204      	strlt	r2, [sp, #16]
 8008d5a:	7823      	ldrb	r3, [r4, #0]
 8008d5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d5e:	d10a      	bne.n	8008d76 <_vfiprintf_r+0x156>
 8008d60:	7863      	ldrb	r3, [r4, #1]
 8008d62:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d64:	d132      	bne.n	8008dcc <_vfiprintf_r+0x1ac>
 8008d66:	9b03      	ldr	r3, [sp, #12]
 8008d68:	1d1a      	adds	r2, r3, #4
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	9203      	str	r2, [sp, #12]
 8008d6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d72:	3402      	adds	r4, #2
 8008d74:	9305      	str	r3, [sp, #20]
 8008d76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008e4c <_vfiprintf_r+0x22c>
 8008d7a:	7821      	ldrb	r1, [r4, #0]
 8008d7c:	2203      	movs	r2, #3
 8008d7e:	4650      	mov	r0, sl
 8008d80:	f7f7 fa3e 	bl	8000200 <memchr>
 8008d84:	b138      	cbz	r0, 8008d96 <_vfiprintf_r+0x176>
 8008d86:	9b04      	ldr	r3, [sp, #16]
 8008d88:	eba0 000a 	sub.w	r0, r0, sl
 8008d8c:	2240      	movs	r2, #64	@ 0x40
 8008d8e:	4082      	lsls	r2, r0
 8008d90:	4313      	orrs	r3, r2
 8008d92:	3401      	adds	r4, #1
 8008d94:	9304      	str	r3, [sp, #16]
 8008d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d9a:	4829      	ldr	r0, [pc, #164]	@ (8008e40 <_vfiprintf_r+0x220>)
 8008d9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008da0:	2206      	movs	r2, #6
 8008da2:	f7f7 fa2d 	bl	8000200 <memchr>
 8008da6:	2800      	cmp	r0, #0
 8008da8:	d03f      	beq.n	8008e2a <_vfiprintf_r+0x20a>
 8008daa:	4b26      	ldr	r3, [pc, #152]	@ (8008e44 <_vfiprintf_r+0x224>)
 8008dac:	bb1b      	cbnz	r3, 8008df6 <_vfiprintf_r+0x1d6>
 8008dae:	9b03      	ldr	r3, [sp, #12]
 8008db0:	3307      	adds	r3, #7
 8008db2:	f023 0307 	bic.w	r3, r3, #7
 8008db6:	3308      	adds	r3, #8
 8008db8:	9303      	str	r3, [sp, #12]
 8008dba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dbc:	443b      	add	r3, r7
 8008dbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dc0:	e76a      	b.n	8008c98 <_vfiprintf_r+0x78>
 8008dc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dc6:	460c      	mov	r4, r1
 8008dc8:	2001      	movs	r0, #1
 8008dca:	e7a8      	b.n	8008d1e <_vfiprintf_r+0xfe>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	3401      	adds	r4, #1
 8008dd0:	9305      	str	r3, [sp, #20]
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	f04f 0c0a 	mov.w	ip, #10
 8008dd8:	4620      	mov	r0, r4
 8008dda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dde:	3a30      	subs	r2, #48	@ 0x30
 8008de0:	2a09      	cmp	r2, #9
 8008de2:	d903      	bls.n	8008dec <_vfiprintf_r+0x1cc>
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d0c6      	beq.n	8008d76 <_vfiprintf_r+0x156>
 8008de8:	9105      	str	r1, [sp, #20]
 8008dea:	e7c4      	b.n	8008d76 <_vfiprintf_r+0x156>
 8008dec:	fb0c 2101 	mla	r1, ip, r1, r2
 8008df0:	4604      	mov	r4, r0
 8008df2:	2301      	movs	r3, #1
 8008df4:	e7f0      	b.n	8008dd8 <_vfiprintf_r+0x1b8>
 8008df6:	ab03      	add	r3, sp, #12
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	462a      	mov	r2, r5
 8008dfc:	4b12      	ldr	r3, [pc, #72]	@ (8008e48 <_vfiprintf_r+0x228>)
 8008dfe:	a904      	add	r1, sp, #16
 8008e00:	4630      	mov	r0, r6
 8008e02:	f3af 8000 	nop.w
 8008e06:	4607      	mov	r7, r0
 8008e08:	1c78      	adds	r0, r7, #1
 8008e0a:	d1d6      	bne.n	8008dba <_vfiprintf_r+0x19a>
 8008e0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e0e:	07d9      	lsls	r1, r3, #31
 8008e10:	d405      	bmi.n	8008e1e <_vfiprintf_r+0x1fe>
 8008e12:	89ab      	ldrh	r3, [r5, #12]
 8008e14:	059a      	lsls	r2, r3, #22
 8008e16:	d402      	bmi.n	8008e1e <_vfiprintf_r+0x1fe>
 8008e18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e1a:	f7ff fdb7 	bl	800898c <__retarget_lock_release_recursive>
 8008e1e:	89ab      	ldrh	r3, [r5, #12]
 8008e20:	065b      	lsls	r3, r3, #25
 8008e22:	f53f af1f 	bmi.w	8008c64 <_vfiprintf_r+0x44>
 8008e26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e28:	e71e      	b.n	8008c68 <_vfiprintf_r+0x48>
 8008e2a:	ab03      	add	r3, sp, #12
 8008e2c:	9300      	str	r3, [sp, #0]
 8008e2e:	462a      	mov	r2, r5
 8008e30:	4b05      	ldr	r3, [pc, #20]	@ (8008e48 <_vfiprintf_r+0x228>)
 8008e32:	a904      	add	r1, sp, #16
 8008e34:	4630      	mov	r0, r6
 8008e36:	f000 f879 	bl	8008f2c <_printf_i>
 8008e3a:	e7e4      	b.n	8008e06 <_vfiprintf_r+0x1e6>
 8008e3c:	0800a94e 	.word	0x0800a94e
 8008e40:	0800a958 	.word	0x0800a958
 8008e44:	00000000 	.word	0x00000000
 8008e48:	08008bfb 	.word	0x08008bfb
 8008e4c:	0800a954 	.word	0x0800a954

08008e50 <_printf_common>:
 8008e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e54:	4616      	mov	r6, r2
 8008e56:	4698      	mov	r8, r3
 8008e58:	688a      	ldr	r2, [r1, #8]
 8008e5a:	690b      	ldr	r3, [r1, #16]
 8008e5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008e60:	4293      	cmp	r3, r2
 8008e62:	bfb8      	it	lt
 8008e64:	4613      	movlt	r3, r2
 8008e66:	6033      	str	r3, [r6, #0]
 8008e68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008e6c:	4607      	mov	r7, r0
 8008e6e:	460c      	mov	r4, r1
 8008e70:	b10a      	cbz	r2, 8008e76 <_printf_common+0x26>
 8008e72:	3301      	adds	r3, #1
 8008e74:	6033      	str	r3, [r6, #0]
 8008e76:	6823      	ldr	r3, [r4, #0]
 8008e78:	0699      	lsls	r1, r3, #26
 8008e7a:	bf42      	ittt	mi
 8008e7c:	6833      	ldrmi	r3, [r6, #0]
 8008e7e:	3302      	addmi	r3, #2
 8008e80:	6033      	strmi	r3, [r6, #0]
 8008e82:	6825      	ldr	r5, [r4, #0]
 8008e84:	f015 0506 	ands.w	r5, r5, #6
 8008e88:	d106      	bne.n	8008e98 <_printf_common+0x48>
 8008e8a:	f104 0a19 	add.w	sl, r4, #25
 8008e8e:	68e3      	ldr	r3, [r4, #12]
 8008e90:	6832      	ldr	r2, [r6, #0]
 8008e92:	1a9b      	subs	r3, r3, r2
 8008e94:	42ab      	cmp	r3, r5
 8008e96:	dc26      	bgt.n	8008ee6 <_printf_common+0x96>
 8008e98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008e9c:	6822      	ldr	r2, [r4, #0]
 8008e9e:	3b00      	subs	r3, #0
 8008ea0:	bf18      	it	ne
 8008ea2:	2301      	movne	r3, #1
 8008ea4:	0692      	lsls	r2, r2, #26
 8008ea6:	d42b      	bmi.n	8008f00 <_printf_common+0xb0>
 8008ea8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008eac:	4641      	mov	r1, r8
 8008eae:	4638      	mov	r0, r7
 8008eb0:	47c8      	blx	r9
 8008eb2:	3001      	adds	r0, #1
 8008eb4:	d01e      	beq.n	8008ef4 <_printf_common+0xa4>
 8008eb6:	6823      	ldr	r3, [r4, #0]
 8008eb8:	6922      	ldr	r2, [r4, #16]
 8008eba:	f003 0306 	and.w	r3, r3, #6
 8008ebe:	2b04      	cmp	r3, #4
 8008ec0:	bf02      	ittt	eq
 8008ec2:	68e5      	ldreq	r5, [r4, #12]
 8008ec4:	6833      	ldreq	r3, [r6, #0]
 8008ec6:	1aed      	subeq	r5, r5, r3
 8008ec8:	68a3      	ldr	r3, [r4, #8]
 8008eca:	bf0c      	ite	eq
 8008ecc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ed0:	2500      	movne	r5, #0
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	bfc4      	itt	gt
 8008ed6:	1a9b      	subgt	r3, r3, r2
 8008ed8:	18ed      	addgt	r5, r5, r3
 8008eda:	2600      	movs	r6, #0
 8008edc:	341a      	adds	r4, #26
 8008ede:	42b5      	cmp	r5, r6
 8008ee0:	d11a      	bne.n	8008f18 <_printf_common+0xc8>
 8008ee2:	2000      	movs	r0, #0
 8008ee4:	e008      	b.n	8008ef8 <_printf_common+0xa8>
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	4652      	mov	r2, sl
 8008eea:	4641      	mov	r1, r8
 8008eec:	4638      	mov	r0, r7
 8008eee:	47c8      	blx	r9
 8008ef0:	3001      	adds	r0, #1
 8008ef2:	d103      	bne.n	8008efc <_printf_common+0xac>
 8008ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008efc:	3501      	adds	r5, #1
 8008efe:	e7c6      	b.n	8008e8e <_printf_common+0x3e>
 8008f00:	18e1      	adds	r1, r4, r3
 8008f02:	1c5a      	adds	r2, r3, #1
 8008f04:	2030      	movs	r0, #48	@ 0x30
 8008f06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008f0a:	4422      	add	r2, r4
 8008f0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008f10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008f14:	3302      	adds	r3, #2
 8008f16:	e7c7      	b.n	8008ea8 <_printf_common+0x58>
 8008f18:	2301      	movs	r3, #1
 8008f1a:	4622      	mov	r2, r4
 8008f1c:	4641      	mov	r1, r8
 8008f1e:	4638      	mov	r0, r7
 8008f20:	47c8      	blx	r9
 8008f22:	3001      	adds	r0, #1
 8008f24:	d0e6      	beq.n	8008ef4 <_printf_common+0xa4>
 8008f26:	3601      	adds	r6, #1
 8008f28:	e7d9      	b.n	8008ede <_printf_common+0x8e>
	...

08008f2c <_printf_i>:
 8008f2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f30:	7e0f      	ldrb	r7, [r1, #24]
 8008f32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008f34:	2f78      	cmp	r7, #120	@ 0x78
 8008f36:	4691      	mov	r9, r2
 8008f38:	4680      	mov	r8, r0
 8008f3a:	460c      	mov	r4, r1
 8008f3c:	469a      	mov	sl, r3
 8008f3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008f42:	d807      	bhi.n	8008f54 <_printf_i+0x28>
 8008f44:	2f62      	cmp	r7, #98	@ 0x62
 8008f46:	d80a      	bhi.n	8008f5e <_printf_i+0x32>
 8008f48:	2f00      	cmp	r7, #0
 8008f4a:	f000 80d2 	beq.w	80090f2 <_printf_i+0x1c6>
 8008f4e:	2f58      	cmp	r7, #88	@ 0x58
 8008f50:	f000 80b9 	beq.w	80090c6 <_printf_i+0x19a>
 8008f54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008f5c:	e03a      	b.n	8008fd4 <_printf_i+0xa8>
 8008f5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008f62:	2b15      	cmp	r3, #21
 8008f64:	d8f6      	bhi.n	8008f54 <_printf_i+0x28>
 8008f66:	a101      	add	r1, pc, #4	@ (adr r1, 8008f6c <_printf_i+0x40>)
 8008f68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f6c:	08008fc5 	.word	0x08008fc5
 8008f70:	08008fd9 	.word	0x08008fd9
 8008f74:	08008f55 	.word	0x08008f55
 8008f78:	08008f55 	.word	0x08008f55
 8008f7c:	08008f55 	.word	0x08008f55
 8008f80:	08008f55 	.word	0x08008f55
 8008f84:	08008fd9 	.word	0x08008fd9
 8008f88:	08008f55 	.word	0x08008f55
 8008f8c:	08008f55 	.word	0x08008f55
 8008f90:	08008f55 	.word	0x08008f55
 8008f94:	08008f55 	.word	0x08008f55
 8008f98:	080090d9 	.word	0x080090d9
 8008f9c:	08009003 	.word	0x08009003
 8008fa0:	08009093 	.word	0x08009093
 8008fa4:	08008f55 	.word	0x08008f55
 8008fa8:	08008f55 	.word	0x08008f55
 8008fac:	080090fb 	.word	0x080090fb
 8008fb0:	08008f55 	.word	0x08008f55
 8008fb4:	08009003 	.word	0x08009003
 8008fb8:	08008f55 	.word	0x08008f55
 8008fbc:	08008f55 	.word	0x08008f55
 8008fc0:	0800909b 	.word	0x0800909b
 8008fc4:	6833      	ldr	r3, [r6, #0]
 8008fc6:	1d1a      	adds	r2, r3, #4
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	6032      	str	r2, [r6, #0]
 8008fcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008fd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e09d      	b.n	8009114 <_printf_i+0x1e8>
 8008fd8:	6833      	ldr	r3, [r6, #0]
 8008fda:	6820      	ldr	r0, [r4, #0]
 8008fdc:	1d19      	adds	r1, r3, #4
 8008fde:	6031      	str	r1, [r6, #0]
 8008fe0:	0606      	lsls	r6, r0, #24
 8008fe2:	d501      	bpl.n	8008fe8 <_printf_i+0xbc>
 8008fe4:	681d      	ldr	r5, [r3, #0]
 8008fe6:	e003      	b.n	8008ff0 <_printf_i+0xc4>
 8008fe8:	0645      	lsls	r5, r0, #25
 8008fea:	d5fb      	bpl.n	8008fe4 <_printf_i+0xb8>
 8008fec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ff0:	2d00      	cmp	r5, #0
 8008ff2:	da03      	bge.n	8008ffc <_printf_i+0xd0>
 8008ff4:	232d      	movs	r3, #45	@ 0x2d
 8008ff6:	426d      	negs	r5, r5
 8008ff8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ffc:	4859      	ldr	r0, [pc, #356]	@ (8009164 <_printf_i+0x238>)
 8008ffe:	230a      	movs	r3, #10
 8009000:	e011      	b.n	8009026 <_printf_i+0xfa>
 8009002:	6821      	ldr	r1, [r4, #0]
 8009004:	6833      	ldr	r3, [r6, #0]
 8009006:	0608      	lsls	r0, r1, #24
 8009008:	f853 5b04 	ldr.w	r5, [r3], #4
 800900c:	d402      	bmi.n	8009014 <_printf_i+0xe8>
 800900e:	0649      	lsls	r1, r1, #25
 8009010:	bf48      	it	mi
 8009012:	b2ad      	uxthmi	r5, r5
 8009014:	2f6f      	cmp	r7, #111	@ 0x6f
 8009016:	4853      	ldr	r0, [pc, #332]	@ (8009164 <_printf_i+0x238>)
 8009018:	6033      	str	r3, [r6, #0]
 800901a:	bf14      	ite	ne
 800901c:	230a      	movne	r3, #10
 800901e:	2308      	moveq	r3, #8
 8009020:	2100      	movs	r1, #0
 8009022:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009026:	6866      	ldr	r6, [r4, #4]
 8009028:	60a6      	str	r6, [r4, #8]
 800902a:	2e00      	cmp	r6, #0
 800902c:	bfa2      	ittt	ge
 800902e:	6821      	ldrge	r1, [r4, #0]
 8009030:	f021 0104 	bicge.w	r1, r1, #4
 8009034:	6021      	strge	r1, [r4, #0]
 8009036:	b90d      	cbnz	r5, 800903c <_printf_i+0x110>
 8009038:	2e00      	cmp	r6, #0
 800903a:	d04b      	beq.n	80090d4 <_printf_i+0x1a8>
 800903c:	4616      	mov	r6, r2
 800903e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009042:	fb03 5711 	mls	r7, r3, r1, r5
 8009046:	5dc7      	ldrb	r7, [r0, r7]
 8009048:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800904c:	462f      	mov	r7, r5
 800904e:	42bb      	cmp	r3, r7
 8009050:	460d      	mov	r5, r1
 8009052:	d9f4      	bls.n	800903e <_printf_i+0x112>
 8009054:	2b08      	cmp	r3, #8
 8009056:	d10b      	bne.n	8009070 <_printf_i+0x144>
 8009058:	6823      	ldr	r3, [r4, #0]
 800905a:	07df      	lsls	r7, r3, #31
 800905c:	d508      	bpl.n	8009070 <_printf_i+0x144>
 800905e:	6923      	ldr	r3, [r4, #16]
 8009060:	6861      	ldr	r1, [r4, #4]
 8009062:	4299      	cmp	r1, r3
 8009064:	bfde      	ittt	le
 8009066:	2330      	movle	r3, #48	@ 0x30
 8009068:	f806 3c01 	strble.w	r3, [r6, #-1]
 800906c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009070:	1b92      	subs	r2, r2, r6
 8009072:	6122      	str	r2, [r4, #16]
 8009074:	f8cd a000 	str.w	sl, [sp]
 8009078:	464b      	mov	r3, r9
 800907a:	aa03      	add	r2, sp, #12
 800907c:	4621      	mov	r1, r4
 800907e:	4640      	mov	r0, r8
 8009080:	f7ff fee6 	bl	8008e50 <_printf_common>
 8009084:	3001      	adds	r0, #1
 8009086:	d14a      	bne.n	800911e <_printf_i+0x1f2>
 8009088:	f04f 30ff 	mov.w	r0, #4294967295
 800908c:	b004      	add	sp, #16
 800908e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009092:	6823      	ldr	r3, [r4, #0]
 8009094:	f043 0320 	orr.w	r3, r3, #32
 8009098:	6023      	str	r3, [r4, #0]
 800909a:	4833      	ldr	r0, [pc, #204]	@ (8009168 <_printf_i+0x23c>)
 800909c:	2778      	movs	r7, #120	@ 0x78
 800909e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80090a2:	6823      	ldr	r3, [r4, #0]
 80090a4:	6831      	ldr	r1, [r6, #0]
 80090a6:	061f      	lsls	r7, r3, #24
 80090a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80090ac:	d402      	bmi.n	80090b4 <_printf_i+0x188>
 80090ae:	065f      	lsls	r7, r3, #25
 80090b0:	bf48      	it	mi
 80090b2:	b2ad      	uxthmi	r5, r5
 80090b4:	6031      	str	r1, [r6, #0]
 80090b6:	07d9      	lsls	r1, r3, #31
 80090b8:	bf44      	itt	mi
 80090ba:	f043 0320 	orrmi.w	r3, r3, #32
 80090be:	6023      	strmi	r3, [r4, #0]
 80090c0:	b11d      	cbz	r5, 80090ca <_printf_i+0x19e>
 80090c2:	2310      	movs	r3, #16
 80090c4:	e7ac      	b.n	8009020 <_printf_i+0xf4>
 80090c6:	4827      	ldr	r0, [pc, #156]	@ (8009164 <_printf_i+0x238>)
 80090c8:	e7e9      	b.n	800909e <_printf_i+0x172>
 80090ca:	6823      	ldr	r3, [r4, #0]
 80090cc:	f023 0320 	bic.w	r3, r3, #32
 80090d0:	6023      	str	r3, [r4, #0]
 80090d2:	e7f6      	b.n	80090c2 <_printf_i+0x196>
 80090d4:	4616      	mov	r6, r2
 80090d6:	e7bd      	b.n	8009054 <_printf_i+0x128>
 80090d8:	6833      	ldr	r3, [r6, #0]
 80090da:	6825      	ldr	r5, [r4, #0]
 80090dc:	6961      	ldr	r1, [r4, #20]
 80090de:	1d18      	adds	r0, r3, #4
 80090e0:	6030      	str	r0, [r6, #0]
 80090e2:	062e      	lsls	r6, r5, #24
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	d501      	bpl.n	80090ec <_printf_i+0x1c0>
 80090e8:	6019      	str	r1, [r3, #0]
 80090ea:	e002      	b.n	80090f2 <_printf_i+0x1c6>
 80090ec:	0668      	lsls	r0, r5, #25
 80090ee:	d5fb      	bpl.n	80090e8 <_printf_i+0x1bc>
 80090f0:	8019      	strh	r1, [r3, #0]
 80090f2:	2300      	movs	r3, #0
 80090f4:	6123      	str	r3, [r4, #16]
 80090f6:	4616      	mov	r6, r2
 80090f8:	e7bc      	b.n	8009074 <_printf_i+0x148>
 80090fa:	6833      	ldr	r3, [r6, #0]
 80090fc:	1d1a      	adds	r2, r3, #4
 80090fe:	6032      	str	r2, [r6, #0]
 8009100:	681e      	ldr	r6, [r3, #0]
 8009102:	6862      	ldr	r2, [r4, #4]
 8009104:	2100      	movs	r1, #0
 8009106:	4630      	mov	r0, r6
 8009108:	f7f7 f87a 	bl	8000200 <memchr>
 800910c:	b108      	cbz	r0, 8009112 <_printf_i+0x1e6>
 800910e:	1b80      	subs	r0, r0, r6
 8009110:	6060      	str	r0, [r4, #4]
 8009112:	6863      	ldr	r3, [r4, #4]
 8009114:	6123      	str	r3, [r4, #16]
 8009116:	2300      	movs	r3, #0
 8009118:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800911c:	e7aa      	b.n	8009074 <_printf_i+0x148>
 800911e:	6923      	ldr	r3, [r4, #16]
 8009120:	4632      	mov	r2, r6
 8009122:	4649      	mov	r1, r9
 8009124:	4640      	mov	r0, r8
 8009126:	47d0      	blx	sl
 8009128:	3001      	adds	r0, #1
 800912a:	d0ad      	beq.n	8009088 <_printf_i+0x15c>
 800912c:	6823      	ldr	r3, [r4, #0]
 800912e:	079b      	lsls	r3, r3, #30
 8009130:	d413      	bmi.n	800915a <_printf_i+0x22e>
 8009132:	68e0      	ldr	r0, [r4, #12]
 8009134:	9b03      	ldr	r3, [sp, #12]
 8009136:	4298      	cmp	r0, r3
 8009138:	bfb8      	it	lt
 800913a:	4618      	movlt	r0, r3
 800913c:	e7a6      	b.n	800908c <_printf_i+0x160>
 800913e:	2301      	movs	r3, #1
 8009140:	4632      	mov	r2, r6
 8009142:	4649      	mov	r1, r9
 8009144:	4640      	mov	r0, r8
 8009146:	47d0      	blx	sl
 8009148:	3001      	adds	r0, #1
 800914a:	d09d      	beq.n	8009088 <_printf_i+0x15c>
 800914c:	3501      	adds	r5, #1
 800914e:	68e3      	ldr	r3, [r4, #12]
 8009150:	9903      	ldr	r1, [sp, #12]
 8009152:	1a5b      	subs	r3, r3, r1
 8009154:	42ab      	cmp	r3, r5
 8009156:	dcf2      	bgt.n	800913e <_printf_i+0x212>
 8009158:	e7eb      	b.n	8009132 <_printf_i+0x206>
 800915a:	2500      	movs	r5, #0
 800915c:	f104 0619 	add.w	r6, r4, #25
 8009160:	e7f5      	b.n	800914e <_printf_i+0x222>
 8009162:	bf00      	nop
 8009164:	0800a95f 	.word	0x0800a95f
 8009168:	0800a970 	.word	0x0800a970

0800916c <fiprintf>:
 800916c:	b40e      	push	{r1, r2, r3}
 800916e:	b503      	push	{r0, r1, lr}
 8009170:	4601      	mov	r1, r0
 8009172:	ab03      	add	r3, sp, #12
 8009174:	4805      	ldr	r0, [pc, #20]	@ (800918c <fiprintf+0x20>)
 8009176:	f853 2b04 	ldr.w	r2, [r3], #4
 800917a:	6800      	ldr	r0, [r0, #0]
 800917c:	9301      	str	r3, [sp, #4]
 800917e:	f7ff fd4f 	bl	8008c20 <_vfiprintf_r>
 8009182:	b002      	add	sp, #8
 8009184:	f85d eb04 	ldr.w	lr, [sp], #4
 8009188:	b003      	add	sp, #12
 800918a:	4770      	bx	lr
 800918c:	20000b2c 	.word	0x20000b2c

08009190 <__swhatbuf_r>:
 8009190:	b570      	push	{r4, r5, r6, lr}
 8009192:	460c      	mov	r4, r1
 8009194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009198:	2900      	cmp	r1, #0
 800919a:	b096      	sub	sp, #88	@ 0x58
 800919c:	4615      	mov	r5, r2
 800919e:	461e      	mov	r6, r3
 80091a0:	da0d      	bge.n	80091be <__swhatbuf_r+0x2e>
 80091a2:	89a3      	ldrh	r3, [r4, #12]
 80091a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80091a8:	f04f 0100 	mov.w	r1, #0
 80091ac:	bf14      	ite	ne
 80091ae:	2340      	movne	r3, #64	@ 0x40
 80091b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80091b4:	2000      	movs	r0, #0
 80091b6:	6031      	str	r1, [r6, #0]
 80091b8:	602b      	str	r3, [r5, #0]
 80091ba:	b016      	add	sp, #88	@ 0x58
 80091bc:	bd70      	pop	{r4, r5, r6, pc}
 80091be:	466a      	mov	r2, sp
 80091c0:	f000 f848 	bl	8009254 <_fstat_r>
 80091c4:	2800      	cmp	r0, #0
 80091c6:	dbec      	blt.n	80091a2 <__swhatbuf_r+0x12>
 80091c8:	9901      	ldr	r1, [sp, #4]
 80091ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80091ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80091d2:	4259      	negs	r1, r3
 80091d4:	4159      	adcs	r1, r3
 80091d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80091da:	e7eb      	b.n	80091b4 <__swhatbuf_r+0x24>

080091dc <__smakebuf_r>:
 80091dc:	898b      	ldrh	r3, [r1, #12]
 80091de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091e0:	079d      	lsls	r5, r3, #30
 80091e2:	4606      	mov	r6, r0
 80091e4:	460c      	mov	r4, r1
 80091e6:	d507      	bpl.n	80091f8 <__smakebuf_r+0x1c>
 80091e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80091ec:	6023      	str	r3, [r4, #0]
 80091ee:	6123      	str	r3, [r4, #16]
 80091f0:	2301      	movs	r3, #1
 80091f2:	6163      	str	r3, [r4, #20]
 80091f4:	b003      	add	sp, #12
 80091f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091f8:	ab01      	add	r3, sp, #4
 80091fa:	466a      	mov	r2, sp
 80091fc:	f7ff ffc8 	bl	8009190 <__swhatbuf_r>
 8009200:	9f00      	ldr	r7, [sp, #0]
 8009202:	4605      	mov	r5, r0
 8009204:	4639      	mov	r1, r7
 8009206:	4630      	mov	r0, r6
 8009208:	f7ff fc54 	bl	8008ab4 <_malloc_r>
 800920c:	b948      	cbnz	r0, 8009222 <__smakebuf_r+0x46>
 800920e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009212:	059a      	lsls	r2, r3, #22
 8009214:	d4ee      	bmi.n	80091f4 <__smakebuf_r+0x18>
 8009216:	f023 0303 	bic.w	r3, r3, #3
 800921a:	f043 0302 	orr.w	r3, r3, #2
 800921e:	81a3      	strh	r3, [r4, #12]
 8009220:	e7e2      	b.n	80091e8 <__smakebuf_r+0xc>
 8009222:	89a3      	ldrh	r3, [r4, #12]
 8009224:	6020      	str	r0, [r4, #0]
 8009226:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800922a:	81a3      	strh	r3, [r4, #12]
 800922c:	9b01      	ldr	r3, [sp, #4]
 800922e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009232:	b15b      	cbz	r3, 800924c <__smakebuf_r+0x70>
 8009234:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009238:	4630      	mov	r0, r6
 800923a:	f000 f81d 	bl	8009278 <_isatty_r>
 800923e:	b128      	cbz	r0, 800924c <__smakebuf_r+0x70>
 8009240:	89a3      	ldrh	r3, [r4, #12]
 8009242:	f023 0303 	bic.w	r3, r3, #3
 8009246:	f043 0301 	orr.w	r3, r3, #1
 800924a:	81a3      	strh	r3, [r4, #12]
 800924c:	89a3      	ldrh	r3, [r4, #12]
 800924e:	431d      	orrs	r5, r3
 8009250:	81a5      	strh	r5, [r4, #12]
 8009252:	e7cf      	b.n	80091f4 <__smakebuf_r+0x18>

08009254 <_fstat_r>:
 8009254:	b538      	push	{r3, r4, r5, lr}
 8009256:	4d07      	ldr	r5, [pc, #28]	@ (8009274 <_fstat_r+0x20>)
 8009258:	2300      	movs	r3, #0
 800925a:	4604      	mov	r4, r0
 800925c:	4608      	mov	r0, r1
 800925e:	4611      	mov	r1, r2
 8009260:	602b      	str	r3, [r5, #0]
 8009262:	f7f8 fa01 	bl	8001668 <_fstat>
 8009266:	1c43      	adds	r3, r0, #1
 8009268:	d102      	bne.n	8009270 <_fstat_r+0x1c>
 800926a:	682b      	ldr	r3, [r5, #0]
 800926c:	b103      	cbz	r3, 8009270 <_fstat_r+0x1c>
 800926e:	6023      	str	r3, [r4, #0]
 8009270:	bd38      	pop	{r3, r4, r5, pc}
 8009272:	bf00      	nop
 8009274:	20001814 	.word	0x20001814

08009278 <_isatty_r>:
 8009278:	b538      	push	{r3, r4, r5, lr}
 800927a:	4d06      	ldr	r5, [pc, #24]	@ (8009294 <_isatty_r+0x1c>)
 800927c:	2300      	movs	r3, #0
 800927e:	4604      	mov	r4, r0
 8009280:	4608      	mov	r0, r1
 8009282:	602b      	str	r3, [r5, #0]
 8009284:	f7f8 fa00 	bl	8001688 <_isatty>
 8009288:	1c43      	adds	r3, r0, #1
 800928a:	d102      	bne.n	8009292 <_isatty_r+0x1a>
 800928c:	682b      	ldr	r3, [r5, #0]
 800928e:	b103      	cbz	r3, 8009292 <_isatty_r+0x1a>
 8009290:	6023      	str	r3, [r4, #0]
 8009292:	bd38      	pop	{r3, r4, r5, pc}
 8009294:	20001814 	.word	0x20001814

08009298 <_sbrk_r>:
 8009298:	b538      	push	{r3, r4, r5, lr}
 800929a:	4d06      	ldr	r5, [pc, #24]	@ (80092b4 <_sbrk_r+0x1c>)
 800929c:	2300      	movs	r3, #0
 800929e:	4604      	mov	r4, r0
 80092a0:	4608      	mov	r0, r1
 80092a2:	602b      	str	r3, [r5, #0]
 80092a4:	f7f8 fa08 	bl	80016b8 <_sbrk>
 80092a8:	1c43      	adds	r3, r0, #1
 80092aa:	d102      	bne.n	80092b2 <_sbrk_r+0x1a>
 80092ac:	682b      	ldr	r3, [r5, #0]
 80092ae:	b103      	cbz	r3, 80092b2 <_sbrk_r+0x1a>
 80092b0:	6023      	str	r3, [r4, #0]
 80092b2:	bd38      	pop	{r3, r4, r5, pc}
 80092b4:	20001814 	.word	0x20001814

080092b8 <abort>:
 80092b8:	b508      	push	{r3, lr}
 80092ba:	2006      	movs	r0, #6
 80092bc:	f000 f82c 	bl	8009318 <raise>
 80092c0:	2001      	movs	r0, #1
 80092c2:	f7f8 f99d 	bl	8001600 <_exit>

080092c6 <_raise_r>:
 80092c6:	291f      	cmp	r1, #31
 80092c8:	b538      	push	{r3, r4, r5, lr}
 80092ca:	4605      	mov	r5, r0
 80092cc:	460c      	mov	r4, r1
 80092ce:	d904      	bls.n	80092da <_raise_r+0x14>
 80092d0:	2316      	movs	r3, #22
 80092d2:	6003      	str	r3, [r0, #0]
 80092d4:	f04f 30ff 	mov.w	r0, #4294967295
 80092d8:	bd38      	pop	{r3, r4, r5, pc}
 80092da:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80092dc:	b112      	cbz	r2, 80092e4 <_raise_r+0x1e>
 80092de:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80092e2:	b94b      	cbnz	r3, 80092f8 <_raise_r+0x32>
 80092e4:	4628      	mov	r0, r5
 80092e6:	f000 f831 	bl	800934c <_getpid_r>
 80092ea:	4622      	mov	r2, r4
 80092ec:	4601      	mov	r1, r0
 80092ee:	4628      	mov	r0, r5
 80092f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092f4:	f000 b818 	b.w	8009328 <_kill_r>
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d00a      	beq.n	8009312 <_raise_r+0x4c>
 80092fc:	1c59      	adds	r1, r3, #1
 80092fe:	d103      	bne.n	8009308 <_raise_r+0x42>
 8009300:	2316      	movs	r3, #22
 8009302:	6003      	str	r3, [r0, #0]
 8009304:	2001      	movs	r0, #1
 8009306:	e7e7      	b.n	80092d8 <_raise_r+0x12>
 8009308:	2100      	movs	r1, #0
 800930a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800930e:	4620      	mov	r0, r4
 8009310:	4798      	blx	r3
 8009312:	2000      	movs	r0, #0
 8009314:	e7e0      	b.n	80092d8 <_raise_r+0x12>
	...

08009318 <raise>:
 8009318:	4b02      	ldr	r3, [pc, #8]	@ (8009324 <raise+0xc>)
 800931a:	4601      	mov	r1, r0
 800931c:	6818      	ldr	r0, [r3, #0]
 800931e:	f7ff bfd2 	b.w	80092c6 <_raise_r>
 8009322:	bf00      	nop
 8009324:	20000b2c 	.word	0x20000b2c

08009328 <_kill_r>:
 8009328:	b538      	push	{r3, r4, r5, lr}
 800932a:	4d07      	ldr	r5, [pc, #28]	@ (8009348 <_kill_r+0x20>)
 800932c:	2300      	movs	r3, #0
 800932e:	4604      	mov	r4, r0
 8009330:	4608      	mov	r0, r1
 8009332:	4611      	mov	r1, r2
 8009334:	602b      	str	r3, [r5, #0]
 8009336:	f7f8 f953 	bl	80015e0 <_kill>
 800933a:	1c43      	adds	r3, r0, #1
 800933c:	d102      	bne.n	8009344 <_kill_r+0x1c>
 800933e:	682b      	ldr	r3, [r5, #0]
 8009340:	b103      	cbz	r3, 8009344 <_kill_r+0x1c>
 8009342:	6023      	str	r3, [r4, #0]
 8009344:	bd38      	pop	{r3, r4, r5, pc}
 8009346:	bf00      	nop
 8009348:	20001814 	.word	0x20001814

0800934c <_getpid_r>:
 800934c:	f7f8 b940 	b.w	80015d0 <_getpid>

08009350 <sin>:
 8009350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009352:	ec53 2b10 	vmov	r2, r3, d0
 8009356:	4826      	ldr	r0, [pc, #152]	@ (80093f0 <sin+0xa0>)
 8009358:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800935c:	4281      	cmp	r1, r0
 800935e:	d807      	bhi.n	8009370 <sin+0x20>
 8009360:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80093e8 <sin+0x98>
 8009364:	2000      	movs	r0, #0
 8009366:	b005      	add	sp, #20
 8009368:	f85d eb04 	ldr.w	lr, [sp], #4
 800936c:	f000 b90c 	b.w	8009588 <__kernel_sin>
 8009370:	4820      	ldr	r0, [pc, #128]	@ (80093f4 <sin+0xa4>)
 8009372:	4281      	cmp	r1, r0
 8009374:	d908      	bls.n	8009388 <sin+0x38>
 8009376:	4610      	mov	r0, r2
 8009378:	4619      	mov	r1, r3
 800937a:	f7f6 ff95 	bl	80002a8 <__aeabi_dsub>
 800937e:	ec41 0b10 	vmov	d0, r0, r1
 8009382:	b005      	add	sp, #20
 8009384:	f85d fb04 	ldr.w	pc, [sp], #4
 8009388:	4668      	mov	r0, sp
 800938a:	f000 f9b9 	bl	8009700 <__ieee754_rem_pio2>
 800938e:	f000 0003 	and.w	r0, r0, #3
 8009392:	2801      	cmp	r0, #1
 8009394:	d00c      	beq.n	80093b0 <sin+0x60>
 8009396:	2802      	cmp	r0, #2
 8009398:	d011      	beq.n	80093be <sin+0x6e>
 800939a:	b9e8      	cbnz	r0, 80093d8 <sin+0x88>
 800939c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80093a0:	ed9d 0b00 	vldr	d0, [sp]
 80093a4:	2001      	movs	r0, #1
 80093a6:	f000 f8ef 	bl	8009588 <__kernel_sin>
 80093aa:	ec51 0b10 	vmov	r0, r1, d0
 80093ae:	e7e6      	b.n	800937e <sin+0x2e>
 80093b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80093b4:	ed9d 0b00 	vldr	d0, [sp]
 80093b8:	f000 f81e 	bl	80093f8 <__kernel_cos>
 80093bc:	e7f5      	b.n	80093aa <sin+0x5a>
 80093be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80093c2:	ed9d 0b00 	vldr	d0, [sp]
 80093c6:	2001      	movs	r0, #1
 80093c8:	f000 f8de 	bl	8009588 <__kernel_sin>
 80093cc:	ec53 2b10 	vmov	r2, r3, d0
 80093d0:	4610      	mov	r0, r2
 80093d2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80093d6:	e7d2      	b.n	800937e <sin+0x2e>
 80093d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80093dc:	ed9d 0b00 	vldr	d0, [sp]
 80093e0:	f000 f80a 	bl	80093f8 <__kernel_cos>
 80093e4:	e7f2      	b.n	80093cc <sin+0x7c>
 80093e6:	bf00      	nop
	...
 80093f0:	3fe921fb 	.word	0x3fe921fb
 80093f4:	7fefffff 	.word	0x7fefffff

080093f8 <__kernel_cos>:
 80093f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093fc:	ec57 6b10 	vmov	r6, r7, d0
 8009400:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009404:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8009408:	ed8d 1b00 	vstr	d1, [sp]
 800940c:	d206      	bcs.n	800941c <__kernel_cos+0x24>
 800940e:	4630      	mov	r0, r6
 8009410:	4639      	mov	r1, r7
 8009412:	f7f7 fb9b 	bl	8000b4c <__aeabi_d2iz>
 8009416:	2800      	cmp	r0, #0
 8009418:	f000 8088 	beq.w	800952c <__kernel_cos+0x134>
 800941c:	4632      	mov	r2, r6
 800941e:	463b      	mov	r3, r7
 8009420:	4630      	mov	r0, r6
 8009422:	4639      	mov	r1, r7
 8009424:	f7f7 f8f8 	bl	8000618 <__aeabi_dmul>
 8009428:	4b51      	ldr	r3, [pc, #324]	@ (8009570 <__kernel_cos+0x178>)
 800942a:	2200      	movs	r2, #0
 800942c:	4604      	mov	r4, r0
 800942e:	460d      	mov	r5, r1
 8009430:	f7f7 f8f2 	bl	8000618 <__aeabi_dmul>
 8009434:	a340      	add	r3, pc, #256	@ (adr r3, 8009538 <__kernel_cos+0x140>)
 8009436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943a:	4682      	mov	sl, r0
 800943c:	468b      	mov	fp, r1
 800943e:	4620      	mov	r0, r4
 8009440:	4629      	mov	r1, r5
 8009442:	f7f7 f8e9 	bl	8000618 <__aeabi_dmul>
 8009446:	a33e      	add	r3, pc, #248	@ (adr r3, 8009540 <__kernel_cos+0x148>)
 8009448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944c:	f7f6 ff2e 	bl	80002ac <__adddf3>
 8009450:	4622      	mov	r2, r4
 8009452:	462b      	mov	r3, r5
 8009454:	f7f7 f8e0 	bl	8000618 <__aeabi_dmul>
 8009458:	a33b      	add	r3, pc, #236	@ (adr r3, 8009548 <__kernel_cos+0x150>)
 800945a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945e:	f7f6 ff23 	bl	80002a8 <__aeabi_dsub>
 8009462:	4622      	mov	r2, r4
 8009464:	462b      	mov	r3, r5
 8009466:	f7f7 f8d7 	bl	8000618 <__aeabi_dmul>
 800946a:	a339      	add	r3, pc, #228	@ (adr r3, 8009550 <__kernel_cos+0x158>)
 800946c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009470:	f7f6 ff1c 	bl	80002ac <__adddf3>
 8009474:	4622      	mov	r2, r4
 8009476:	462b      	mov	r3, r5
 8009478:	f7f7 f8ce 	bl	8000618 <__aeabi_dmul>
 800947c:	a336      	add	r3, pc, #216	@ (adr r3, 8009558 <__kernel_cos+0x160>)
 800947e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009482:	f7f6 ff11 	bl	80002a8 <__aeabi_dsub>
 8009486:	4622      	mov	r2, r4
 8009488:	462b      	mov	r3, r5
 800948a:	f7f7 f8c5 	bl	8000618 <__aeabi_dmul>
 800948e:	a334      	add	r3, pc, #208	@ (adr r3, 8009560 <__kernel_cos+0x168>)
 8009490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009494:	f7f6 ff0a 	bl	80002ac <__adddf3>
 8009498:	4622      	mov	r2, r4
 800949a:	462b      	mov	r3, r5
 800949c:	f7f7 f8bc 	bl	8000618 <__aeabi_dmul>
 80094a0:	4622      	mov	r2, r4
 80094a2:	462b      	mov	r3, r5
 80094a4:	f7f7 f8b8 	bl	8000618 <__aeabi_dmul>
 80094a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094ac:	4604      	mov	r4, r0
 80094ae:	460d      	mov	r5, r1
 80094b0:	4630      	mov	r0, r6
 80094b2:	4639      	mov	r1, r7
 80094b4:	f7f7 f8b0 	bl	8000618 <__aeabi_dmul>
 80094b8:	460b      	mov	r3, r1
 80094ba:	4602      	mov	r2, r0
 80094bc:	4629      	mov	r1, r5
 80094be:	4620      	mov	r0, r4
 80094c0:	f7f6 fef2 	bl	80002a8 <__aeabi_dsub>
 80094c4:	4b2b      	ldr	r3, [pc, #172]	@ (8009574 <__kernel_cos+0x17c>)
 80094c6:	4598      	cmp	r8, r3
 80094c8:	4606      	mov	r6, r0
 80094ca:	460f      	mov	r7, r1
 80094cc:	d810      	bhi.n	80094f0 <__kernel_cos+0xf8>
 80094ce:	4602      	mov	r2, r0
 80094d0:	460b      	mov	r3, r1
 80094d2:	4650      	mov	r0, sl
 80094d4:	4659      	mov	r1, fp
 80094d6:	f7f6 fee7 	bl	80002a8 <__aeabi_dsub>
 80094da:	460b      	mov	r3, r1
 80094dc:	4926      	ldr	r1, [pc, #152]	@ (8009578 <__kernel_cos+0x180>)
 80094de:	4602      	mov	r2, r0
 80094e0:	2000      	movs	r0, #0
 80094e2:	f7f6 fee1 	bl	80002a8 <__aeabi_dsub>
 80094e6:	ec41 0b10 	vmov	d0, r0, r1
 80094ea:	b003      	add	sp, #12
 80094ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094f0:	4b22      	ldr	r3, [pc, #136]	@ (800957c <__kernel_cos+0x184>)
 80094f2:	4921      	ldr	r1, [pc, #132]	@ (8009578 <__kernel_cos+0x180>)
 80094f4:	4598      	cmp	r8, r3
 80094f6:	bf8c      	ite	hi
 80094f8:	4d21      	ldrhi	r5, [pc, #132]	@ (8009580 <__kernel_cos+0x188>)
 80094fa:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80094fe:	2400      	movs	r4, #0
 8009500:	4622      	mov	r2, r4
 8009502:	462b      	mov	r3, r5
 8009504:	2000      	movs	r0, #0
 8009506:	f7f6 fecf 	bl	80002a8 <__aeabi_dsub>
 800950a:	4622      	mov	r2, r4
 800950c:	4680      	mov	r8, r0
 800950e:	4689      	mov	r9, r1
 8009510:	462b      	mov	r3, r5
 8009512:	4650      	mov	r0, sl
 8009514:	4659      	mov	r1, fp
 8009516:	f7f6 fec7 	bl	80002a8 <__aeabi_dsub>
 800951a:	4632      	mov	r2, r6
 800951c:	463b      	mov	r3, r7
 800951e:	f7f6 fec3 	bl	80002a8 <__aeabi_dsub>
 8009522:	4602      	mov	r2, r0
 8009524:	460b      	mov	r3, r1
 8009526:	4640      	mov	r0, r8
 8009528:	4649      	mov	r1, r9
 800952a:	e7da      	b.n	80094e2 <__kernel_cos+0xea>
 800952c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8009568 <__kernel_cos+0x170>
 8009530:	e7db      	b.n	80094ea <__kernel_cos+0xf2>
 8009532:	bf00      	nop
 8009534:	f3af 8000 	nop.w
 8009538:	be8838d4 	.word	0xbe8838d4
 800953c:	bda8fae9 	.word	0xbda8fae9
 8009540:	bdb4b1c4 	.word	0xbdb4b1c4
 8009544:	3e21ee9e 	.word	0x3e21ee9e
 8009548:	809c52ad 	.word	0x809c52ad
 800954c:	3e927e4f 	.word	0x3e927e4f
 8009550:	19cb1590 	.word	0x19cb1590
 8009554:	3efa01a0 	.word	0x3efa01a0
 8009558:	16c15177 	.word	0x16c15177
 800955c:	3f56c16c 	.word	0x3f56c16c
 8009560:	5555554c 	.word	0x5555554c
 8009564:	3fa55555 	.word	0x3fa55555
 8009568:	00000000 	.word	0x00000000
 800956c:	3ff00000 	.word	0x3ff00000
 8009570:	3fe00000 	.word	0x3fe00000
 8009574:	3fd33332 	.word	0x3fd33332
 8009578:	3ff00000 	.word	0x3ff00000
 800957c:	3fe90000 	.word	0x3fe90000
 8009580:	3fd20000 	.word	0x3fd20000
 8009584:	00000000 	.word	0x00000000

08009588 <__kernel_sin>:
 8009588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800958c:	ec55 4b10 	vmov	r4, r5, d0
 8009590:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009594:	b085      	sub	sp, #20
 8009596:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800959a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800959e:	4680      	mov	r8, r0
 80095a0:	d205      	bcs.n	80095ae <__kernel_sin+0x26>
 80095a2:	4620      	mov	r0, r4
 80095a4:	4629      	mov	r1, r5
 80095a6:	f7f7 fad1 	bl	8000b4c <__aeabi_d2iz>
 80095aa:	2800      	cmp	r0, #0
 80095ac:	d052      	beq.n	8009654 <__kernel_sin+0xcc>
 80095ae:	4622      	mov	r2, r4
 80095b0:	462b      	mov	r3, r5
 80095b2:	4620      	mov	r0, r4
 80095b4:	4629      	mov	r1, r5
 80095b6:	f7f7 f82f 	bl	8000618 <__aeabi_dmul>
 80095ba:	4682      	mov	sl, r0
 80095bc:	468b      	mov	fp, r1
 80095be:	4602      	mov	r2, r0
 80095c0:	460b      	mov	r3, r1
 80095c2:	4620      	mov	r0, r4
 80095c4:	4629      	mov	r1, r5
 80095c6:	f7f7 f827 	bl	8000618 <__aeabi_dmul>
 80095ca:	a342      	add	r3, pc, #264	@ (adr r3, 80096d4 <__kernel_sin+0x14c>)
 80095cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d0:	e9cd 0100 	strd	r0, r1, [sp]
 80095d4:	4650      	mov	r0, sl
 80095d6:	4659      	mov	r1, fp
 80095d8:	f7f7 f81e 	bl	8000618 <__aeabi_dmul>
 80095dc:	a33f      	add	r3, pc, #252	@ (adr r3, 80096dc <__kernel_sin+0x154>)
 80095de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e2:	f7f6 fe61 	bl	80002a8 <__aeabi_dsub>
 80095e6:	4652      	mov	r2, sl
 80095e8:	465b      	mov	r3, fp
 80095ea:	f7f7 f815 	bl	8000618 <__aeabi_dmul>
 80095ee:	a33d      	add	r3, pc, #244	@ (adr r3, 80096e4 <__kernel_sin+0x15c>)
 80095f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f4:	f7f6 fe5a 	bl	80002ac <__adddf3>
 80095f8:	4652      	mov	r2, sl
 80095fa:	465b      	mov	r3, fp
 80095fc:	f7f7 f80c 	bl	8000618 <__aeabi_dmul>
 8009600:	a33a      	add	r3, pc, #232	@ (adr r3, 80096ec <__kernel_sin+0x164>)
 8009602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009606:	f7f6 fe4f 	bl	80002a8 <__aeabi_dsub>
 800960a:	4652      	mov	r2, sl
 800960c:	465b      	mov	r3, fp
 800960e:	f7f7 f803 	bl	8000618 <__aeabi_dmul>
 8009612:	a338      	add	r3, pc, #224	@ (adr r3, 80096f4 <__kernel_sin+0x16c>)
 8009614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009618:	f7f6 fe48 	bl	80002ac <__adddf3>
 800961c:	4606      	mov	r6, r0
 800961e:	460f      	mov	r7, r1
 8009620:	f1b8 0f00 	cmp.w	r8, #0
 8009624:	d11b      	bne.n	800965e <__kernel_sin+0xd6>
 8009626:	4602      	mov	r2, r0
 8009628:	460b      	mov	r3, r1
 800962a:	4650      	mov	r0, sl
 800962c:	4659      	mov	r1, fp
 800962e:	f7f6 fff3 	bl	8000618 <__aeabi_dmul>
 8009632:	a325      	add	r3, pc, #148	@ (adr r3, 80096c8 <__kernel_sin+0x140>)
 8009634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009638:	f7f6 fe36 	bl	80002a8 <__aeabi_dsub>
 800963c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009640:	f7f6 ffea 	bl	8000618 <__aeabi_dmul>
 8009644:	4602      	mov	r2, r0
 8009646:	460b      	mov	r3, r1
 8009648:	4620      	mov	r0, r4
 800964a:	4629      	mov	r1, r5
 800964c:	f7f6 fe2e 	bl	80002ac <__adddf3>
 8009650:	4604      	mov	r4, r0
 8009652:	460d      	mov	r5, r1
 8009654:	ec45 4b10 	vmov	d0, r4, r5
 8009658:	b005      	add	sp, #20
 800965a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800965e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009662:	4b1b      	ldr	r3, [pc, #108]	@ (80096d0 <__kernel_sin+0x148>)
 8009664:	2200      	movs	r2, #0
 8009666:	f7f6 ffd7 	bl	8000618 <__aeabi_dmul>
 800966a:	4632      	mov	r2, r6
 800966c:	4680      	mov	r8, r0
 800966e:	4689      	mov	r9, r1
 8009670:	463b      	mov	r3, r7
 8009672:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009676:	f7f6 ffcf 	bl	8000618 <__aeabi_dmul>
 800967a:	4602      	mov	r2, r0
 800967c:	460b      	mov	r3, r1
 800967e:	4640      	mov	r0, r8
 8009680:	4649      	mov	r1, r9
 8009682:	f7f6 fe11 	bl	80002a8 <__aeabi_dsub>
 8009686:	4652      	mov	r2, sl
 8009688:	465b      	mov	r3, fp
 800968a:	f7f6 ffc5 	bl	8000618 <__aeabi_dmul>
 800968e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009692:	f7f6 fe09 	bl	80002a8 <__aeabi_dsub>
 8009696:	a30c      	add	r3, pc, #48	@ (adr r3, 80096c8 <__kernel_sin+0x140>)
 8009698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969c:	4606      	mov	r6, r0
 800969e:	460f      	mov	r7, r1
 80096a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096a4:	f7f6 ffb8 	bl	8000618 <__aeabi_dmul>
 80096a8:	4602      	mov	r2, r0
 80096aa:	460b      	mov	r3, r1
 80096ac:	4630      	mov	r0, r6
 80096ae:	4639      	mov	r1, r7
 80096b0:	f7f6 fdfc 	bl	80002ac <__adddf3>
 80096b4:	4602      	mov	r2, r0
 80096b6:	460b      	mov	r3, r1
 80096b8:	4620      	mov	r0, r4
 80096ba:	4629      	mov	r1, r5
 80096bc:	f7f6 fdf4 	bl	80002a8 <__aeabi_dsub>
 80096c0:	e7c6      	b.n	8009650 <__kernel_sin+0xc8>
 80096c2:	bf00      	nop
 80096c4:	f3af 8000 	nop.w
 80096c8:	55555549 	.word	0x55555549
 80096cc:	3fc55555 	.word	0x3fc55555
 80096d0:	3fe00000 	.word	0x3fe00000
 80096d4:	5acfd57c 	.word	0x5acfd57c
 80096d8:	3de5d93a 	.word	0x3de5d93a
 80096dc:	8a2b9ceb 	.word	0x8a2b9ceb
 80096e0:	3e5ae5e6 	.word	0x3e5ae5e6
 80096e4:	57b1fe7d 	.word	0x57b1fe7d
 80096e8:	3ec71de3 	.word	0x3ec71de3
 80096ec:	19c161d5 	.word	0x19c161d5
 80096f0:	3f2a01a0 	.word	0x3f2a01a0
 80096f4:	1110f8a6 	.word	0x1110f8a6
 80096f8:	3f811111 	.word	0x3f811111
 80096fc:	00000000 	.word	0x00000000

08009700 <__ieee754_rem_pio2>:
 8009700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009704:	ec57 6b10 	vmov	r6, r7, d0
 8009708:	4bc5      	ldr	r3, [pc, #788]	@ (8009a20 <__ieee754_rem_pio2+0x320>)
 800970a:	b08d      	sub	sp, #52	@ 0x34
 800970c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009710:	4598      	cmp	r8, r3
 8009712:	4604      	mov	r4, r0
 8009714:	9704      	str	r7, [sp, #16]
 8009716:	d807      	bhi.n	8009728 <__ieee754_rem_pio2+0x28>
 8009718:	2200      	movs	r2, #0
 800971a:	2300      	movs	r3, #0
 800971c:	ed80 0b00 	vstr	d0, [r0]
 8009720:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009724:	2500      	movs	r5, #0
 8009726:	e028      	b.n	800977a <__ieee754_rem_pio2+0x7a>
 8009728:	4bbe      	ldr	r3, [pc, #760]	@ (8009a24 <__ieee754_rem_pio2+0x324>)
 800972a:	4598      	cmp	r8, r3
 800972c:	d878      	bhi.n	8009820 <__ieee754_rem_pio2+0x120>
 800972e:	9b04      	ldr	r3, [sp, #16]
 8009730:	4dbd      	ldr	r5, [pc, #756]	@ (8009a28 <__ieee754_rem_pio2+0x328>)
 8009732:	2b00      	cmp	r3, #0
 8009734:	4630      	mov	r0, r6
 8009736:	a3ac      	add	r3, pc, #688	@ (adr r3, 80099e8 <__ieee754_rem_pio2+0x2e8>)
 8009738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973c:	4639      	mov	r1, r7
 800973e:	dd38      	ble.n	80097b2 <__ieee754_rem_pio2+0xb2>
 8009740:	f7f6 fdb2 	bl	80002a8 <__aeabi_dsub>
 8009744:	45a8      	cmp	r8, r5
 8009746:	4606      	mov	r6, r0
 8009748:	460f      	mov	r7, r1
 800974a:	d01a      	beq.n	8009782 <__ieee754_rem_pio2+0x82>
 800974c:	a3a8      	add	r3, pc, #672	@ (adr r3, 80099f0 <__ieee754_rem_pio2+0x2f0>)
 800974e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009752:	f7f6 fda9 	bl	80002a8 <__aeabi_dsub>
 8009756:	4602      	mov	r2, r0
 8009758:	460b      	mov	r3, r1
 800975a:	4680      	mov	r8, r0
 800975c:	4689      	mov	r9, r1
 800975e:	4630      	mov	r0, r6
 8009760:	4639      	mov	r1, r7
 8009762:	f7f6 fda1 	bl	80002a8 <__aeabi_dsub>
 8009766:	a3a2      	add	r3, pc, #648	@ (adr r3, 80099f0 <__ieee754_rem_pio2+0x2f0>)
 8009768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976c:	f7f6 fd9c 	bl	80002a8 <__aeabi_dsub>
 8009770:	e9c4 8900 	strd	r8, r9, [r4]
 8009774:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009778:	2501      	movs	r5, #1
 800977a:	4628      	mov	r0, r5
 800977c:	b00d      	add	sp, #52	@ 0x34
 800977e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009782:	a39d      	add	r3, pc, #628	@ (adr r3, 80099f8 <__ieee754_rem_pio2+0x2f8>)
 8009784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009788:	f7f6 fd8e 	bl	80002a8 <__aeabi_dsub>
 800978c:	a39c      	add	r3, pc, #624	@ (adr r3, 8009a00 <__ieee754_rem_pio2+0x300>)
 800978e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009792:	4606      	mov	r6, r0
 8009794:	460f      	mov	r7, r1
 8009796:	f7f6 fd87 	bl	80002a8 <__aeabi_dsub>
 800979a:	4602      	mov	r2, r0
 800979c:	460b      	mov	r3, r1
 800979e:	4680      	mov	r8, r0
 80097a0:	4689      	mov	r9, r1
 80097a2:	4630      	mov	r0, r6
 80097a4:	4639      	mov	r1, r7
 80097a6:	f7f6 fd7f 	bl	80002a8 <__aeabi_dsub>
 80097aa:	a395      	add	r3, pc, #596	@ (adr r3, 8009a00 <__ieee754_rem_pio2+0x300>)
 80097ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b0:	e7dc      	b.n	800976c <__ieee754_rem_pio2+0x6c>
 80097b2:	f7f6 fd7b 	bl	80002ac <__adddf3>
 80097b6:	45a8      	cmp	r8, r5
 80097b8:	4606      	mov	r6, r0
 80097ba:	460f      	mov	r7, r1
 80097bc:	d018      	beq.n	80097f0 <__ieee754_rem_pio2+0xf0>
 80097be:	a38c      	add	r3, pc, #560	@ (adr r3, 80099f0 <__ieee754_rem_pio2+0x2f0>)
 80097c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c4:	f7f6 fd72 	bl	80002ac <__adddf3>
 80097c8:	4602      	mov	r2, r0
 80097ca:	460b      	mov	r3, r1
 80097cc:	4680      	mov	r8, r0
 80097ce:	4689      	mov	r9, r1
 80097d0:	4630      	mov	r0, r6
 80097d2:	4639      	mov	r1, r7
 80097d4:	f7f6 fd68 	bl	80002a8 <__aeabi_dsub>
 80097d8:	a385      	add	r3, pc, #532	@ (adr r3, 80099f0 <__ieee754_rem_pio2+0x2f0>)
 80097da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097de:	f7f6 fd65 	bl	80002ac <__adddf3>
 80097e2:	f04f 35ff 	mov.w	r5, #4294967295
 80097e6:	e9c4 8900 	strd	r8, r9, [r4]
 80097ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80097ee:	e7c4      	b.n	800977a <__ieee754_rem_pio2+0x7a>
 80097f0:	a381      	add	r3, pc, #516	@ (adr r3, 80099f8 <__ieee754_rem_pio2+0x2f8>)
 80097f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f6:	f7f6 fd59 	bl	80002ac <__adddf3>
 80097fa:	a381      	add	r3, pc, #516	@ (adr r3, 8009a00 <__ieee754_rem_pio2+0x300>)
 80097fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009800:	4606      	mov	r6, r0
 8009802:	460f      	mov	r7, r1
 8009804:	f7f6 fd52 	bl	80002ac <__adddf3>
 8009808:	4602      	mov	r2, r0
 800980a:	460b      	mov	r3, r1
 800980c:	4680      	mov	r8, r0
 800980e:	4689      	mov	r9, r1
 8009810:	4630      	mov	r0, r6
 8009812:	4639      	mov	r1, r7
 8009814:	f7f6 fd48 	bl	80002a8 <__aeabi_dsub>
 8009818:	a379      	add	r3, pc, #484	@ (adr r3, 8009a00 <__ieee754_rem_pio2+0x300>)
 800981a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981e:	e7de      	b.n	80097de <__ieee754_rem_pio2+0xde>
 8009820:	4b82      	ldr	r3, [pc, #520]	@ (8009a2c <__ieee754_rem_pio2+0x32c>)
 8009822:	4598      	cmp	r8, r3
 8009824:	f200 80d1 	bhi.w	80099ca <__ieee754_rem_pio2+0x2ca>
 8009828:	f000 f966 	bl	8009af8 <fabs>
 800982c:	ec57 6b10 	vmov	r6, r7, d0
 8009830:	a375      	add	r3, pc, #468	@ (adr r3, 8009a08 <__ieee754_rem_pio2+0x308>)
 8009832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009836:	4630      	mov	r0, r6
 8009838:	4639      	mov	r1, r7
 800983a:	f7f6 feed 	bl	8000618 <__aeabi_dmul>
 800983e:	4b7c      	ldr	r3, [pc, #496]	@ (8009a30 <__ieee754_rem_pio2+0x330>)
 8009840:	2200      	movs	r2, #0
 8009842:	f7f6 fd33 	bl	80002ac <__adddf3>
 8009846:	f7f7 f981 	bl	8000b4c <__aeabi_d2iz>
 800984a:	4605      	mov	r5, r0
 800984c:	f7f6 fe7a 	bl	8000544 <__aeabi_i2d>
 8009850:	4602      	mov	r2, r0
 8009852:	460b      	mov	r3, r1
 8009854:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009858:	a363      	add	r3, pc, #396	@ (adr r3, 80099e8 <__ieee754_rem_pio2+0x2e8>)
 800985a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985e:	f7f6 fedb 	bl	8000618 <__aeabi_dmul>
 8009862:	4602      	mov	r2, r0
 8009864:	460b      	mov	r3, r1
 8009866:	4630      	mov	r0, r6
 8009868:	4639      	mov	r1, r7
 800986a:	f7f6 fd1d 	bl	80002a8 <__aeabi_dsub>
 800986e:	a360      	add	r3, pc, #384	@ (adr r3, 80099f0 <__ieee754_rem_pio2+0x2f0>)
 8009870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009874:	4682      	mov	sl, r0
 8009876:	468b      	mov	fp, r1
 8009878:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800987c:	f7f6 fecc 	bl	8000618 <__aeabi_dmul>
 8009880:	2d1f      	cmp	r5, #31
 8009882:	4606      	mov	r6, r0
 8009884:	460f      	mov	r7, r1
 8009886:	dc0c      	bgt.n	80098a2 <__ieee754_rem_pio2+0x1a2>
 8009888:	4b6a      	ldr	r3, [pc, #424]	@ (8009a34 <__ieee754_rem_pio2+0x334>)
 800988a:	1e6a      	subs	r2, r5, #1
 800988c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009890:	4543      	cmp	r3, r8
 8009892:	d006      	beq.n	80098a2 <__ieee754_rem_pio2+0x1a2>
 8009894:	4632      	mov	r2, r6
 8009896:	463b      	mov	r3, r7
 8009898:	4650      	mov	r0, sl
 800989a:	4659      	mov	r1, fp
 800989c:	f7f6 fd04 	bl	80002a8 <__aeabi_dsub>
 80098a0:	e00e      	b.n	80098c0 <__ieee754_rem_pio2+0x1c0>
 80098a2:	463b      	mov	r3, r7
 80098a4:	4632      	mov	r2, r6
 80098a6:	4650      	mov	r0, sl
 80098a8:	4659      	mov	r1, fp
 80098aa:	f7f6 fcfd 	bl	80002a8 <__aeabi_dsub>
 80098ae:	ea4f 5328 	mov.w	r3, r8, asr #20
 80098b2:	9305      	str	r3, [sp, #20]
 80098b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80098b8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80098bc:	2b10      	cmp	r3, #16
 80098be:	dc02      	bgt.n	80098c6 <__ieee754_rem_pio2+0x1c6>
 80098c0:	e9c4 0100 	strd	r0, r1, [r4]
 80098c4:	e039      	b.n	800993a <__ieee754_rem_pio2+0x23a>
 80098c6:	a34c      	add	r3, pc, #304	@ (adr r3, 80099f8 <__ieee754_rem_pio2+0x2f8>)
 80098c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098d0:	f7f6 fea2 	bl	8000618 <__aeabi_dmul>
 80098d4:	4606      	mov	r6, r0
 80098d6:	460f      	mov	r7, r1
 80098d8:	4602      	mov	r2, r0
 80098da:	460b      	mov	r3, r1
 80098dc:	4650      	mov	r0, sl
 80098de:	4659      	mov	r1, fp
 80098e0:	f7f6 fce2 	bl	80002a8 <__aeabi_dsub>
 80098e4:	4602      	mov	r2, r0
 80098e6:	460b      	mov	r3, r1
 80098e8:	4680      	mov	r8, r0
 80098ea:	4689      	mov	r9, r1
 80098ec:	4650      	mov	r0, sl
 80098ee:	4659      	mov	r1, fp
 80098f0:	f7f6 fcda 	bl	80002a8 <__aeabi_dsub>
 80098f4:	4632      	mov	r2, r6
 80098f6:	463b      	mov	r3, r7
 80098f8:	f7f6 fcd6 	bl	80002a8 <__aeabi_dsub>
 80098fc:	a340      	add	r3, pc, #256	@ (adr r3, 8009a00 <__ieee754_rem_pio2+0x300>)
 80098fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009902:	4606      	mov	r6, r0
 8009904:	460f      	mov	r7, r1
 8009906:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800990a:	f7f6 fe85 	bl	8000618 <__aeabi_dmul>
 800990e:	4632      	mov	r2, r6
 8009910:	463b      	mov	r3, r7
 8009912:	f7f6 fcc9 	bl	80002a8 <__aeabi_dsub>
 8009916:	4602      	mov	r2, r0
 8009918:	460b      	mov	r3, r1
 800991a:	4606      	mov	r6, r0
 800991c:	460f      	mov	r7, r1
 800991e:	4640      	mov	r0, r8
 8009920:	4649      	mov	r1, r9
 8009922:	f7f6 fcc1 	bl	80002a8 <__aeabi_dsub>
 8009926:	9a05      	ldr	r2, [sp, #20]
 8009928:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800992c:	1ad3      	subs	r3, r2, r3
 800992e:	2b31      	cmp	r3, #49	@ 0x31
 8009930:	dc20      	bgt.n	8009974 <__ieee754_rem_pio2+0x274>
 8009932:	e9c4 0100 	strd	r0, r1, [r4]
 8009936:	46c2      	mov	sl, r8
 8009938:	46cb      	mov	fp, r9
 800993a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800993e:	4650      	mov	r0, sl
 8009940:	4642      	mov	r2, r8
 8009942:	464b      	mov	r3, r9
 8009944:	4659      	mov	r1, fp
 8009946:	f7f6 fcaf 	bl	80002a8 <__aeabi_dsub>
 800994a:	463b      	mov	r3, r7
 800994c:	4632      	mov	r2, r6
 800994e:	f7f6 fcab 	bl	80002a8 <__aeabi_dsub>
 8009952:	9b04      	ldr	r3, [sp, #16]
 8009954:	2b00      	cmp	r3, #0
 8009956:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800995a:	f6bf af0e 	bge.w	800977a <__ieee754_rem_pio2+0x7a>
 800995e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8009962:	6063      	str	r3, [r4, #4]
 8009964:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009968:	f8c4 8000 	str.w	r8, [r4]
 800996c:	60a0      	str	r0, [r4, #8]
 800996e:	60e3      	str	r3, [r4, #12]
 8009970:	426d      	negs	r5, r5
 8009972:	e702      	b.n	800977a <__ieee754_rem_pio2+0x7a>
 8009974:	a326      	add	r3, pc, #152	@ (adr r3, 8009a10 <__ieee754_rem_pio2+0x310>)
 8009976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800997a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800997e:	f7f6 fe4b 	bl	8000618 <__aeabi_dmul>
 8009982:	4606      	mov	r6, r0
 8009984:	460f      	mov	r7, r1
 8009986:	4602      	mov	r2, r0
 8009988:	460b      	mov	r3, r1
 800998a:	4640      	mov	r0, r8
 800998c:	4649      	mov	r1, r9
 800998e:	f7f6 fc8b 	bl	80002a8 <__aeabi_dsub>
 8009992:	4602      	mov	r2, r0
 8009994:	460b      	mov	r3, r1
 8009996:	4682      	mov	sl, r0
 8009998:	468b      	mov	fp, r1
 800999a:	4640      	mov	r0, r8
 800999c:	4649      	mov	r1, r9
 800999e:	f7f6 fc83 	bl	80002a8 <__aeabi_dsub>
 80099a2:	4632      	mov	r2, r6
 80099a4:	463b      	mov	r3, r7
 80099a6:	f7f6 fc7f 	bl	80002a8 <__aeabi_dsub>
 80099aa:	a31b      	add	r3, pc, #108	@ (adr r3, 8009a18 <__ieee754_rem_pio2+0x318>)
 80099ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b0:	4606      	mov	r6, r0
 80099b2:	460f      	mov	r7, r1
 80099b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099b8:	f7f6 fe2e 	bl	8000618 <__aeabi_dmul>
 80099bc:	4632      	mov	r2, r6
 80099be:	463b      	mov	r3, r7
 80099c0:	f7f6 fc72 	bl	80002a8 <__aeabi_dsub>
 80099c4:	4606      	mov	r6, r0
 80099c6:	460f      	mov	r7, r1
 80099c8:	e764      	b.n	8009894 <__ieee754_rem_pio2+0x194>
 80099ca:	4b1b      	ldr	r3, [pc, #108]	@ (8009a38 <__ieee754_rem_pio2+0x338>)
 80099cc:	4598      	cmp	r8, r3
 80099ce:	d935      	bls.n	8009a3c <__ieee754_rem_pio2+0x33c>
 80099d0:	4632      	mov	r2, r6
 80099d2:	463b      	mov	r3, r7
 80099d4:	4630      	mov	r0, r6
 80099d6:	4639      	mov	r1, r7
 80099d8:	f7f6 fc66 	bl	80002a8 <__aeabi_dsub>
 80099dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80099e0:	e9c4 0100 	strd	r0, r1, [r4]
 80099e4:	e69e      	b.n	8009724 <__ieee754_rem_pio2+0x24>
 80099e6:	bf00      	nop
 80099e8:	54400000 	.word	0x54400000
 80099ec:	3ff921fb 	.word	0x3ff921fb
 80099f0:	1a626331 	.word	0x1a626331
 80099f4:	3dd0b461 	.word	0x3dd0b461
 80099f8:	1a600000 	.word	0x1a600000
 80099fc:	3dd0b461 	.word	0x3dd0b461
 8009a00:	2e037073 	.word	0x2e037073
 8009a04:	3ba3198a 	.word	0x3ba3198a
 8009a08:	6dc9c883 	.word	0x6dc9c883
 8009a0c:	3fe45f30 	.word	0x3fe45f30
 8009a10:	2e000000 	.word	0x2e000000
 8009a14:	3ba3198a 	.word	0x3ba3198a
 8009a18:	252049c1 	.word	0x252049c1
 8009a1c:	397b839a 	.word	0x397b839a
 8009a20:	3fe921fb 	.word	0x3fe921fb
 8009a24:	4002d97b 	.word	0x4002d97b
 8009a28:	3ff921fb 	.word	0x3ff921fb
 8009a2c:	413921fb 	.word	0x413921fb
 8009a30:	3fe00000 	.word	0x3fe00000
 8009a34:	0800a984 	.word	0x0800a984
 8009a38:	7fefffff 	.word	0x7fefffff
 8009a3c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009a40:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8009a44:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009a48:	4630      	mov	r0, r6
 8009a4a:	460f      	mov	r7, r1
 8009a4c:	f7f7 f87e 	bl	8000b4c <__aeabi_d2iz>
 8009a50:	f7f6 fd78 	bl	8000544 <__aeabi_i2d>
 8009a54:	4602      	mov	r2, r0
 8009a56:	460b      	mov	r3, r1
 8009a58:	4630      	mov	r0, r6
 8009a5a:	4639      	mov	r1, r7
 8009a5c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009a60:	f7f6 fc22 	bl	80002a8 <__aeabi_dsub>
 8009a64:	4b22      	ldr	r3, [pc, #136]	@ (8009af0 <__ieee754_rem_pio2+0x3f0>)
 8009a66:	2200      	movs	r2, #0
 8009a68:	f7f6 fdd6 	bl	8000618 <__aeabi_dmul>
 8009a6c:	460f      	mov	r7, r1
 8009a6e:	4606      	mov	r6, r0
 8009a70:	f7f7 f86c 	bl	8000b4c <__aeabi_d2iz>
 8009a74:	f7f6 fd66 	bl	8000544 <__aeabi_i2d>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	4630      	mov	r0, r6
 8009a7e:	4639      	mov	r1, r7
 8009a80:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009a84:	f7f6 fc10 	bl	80002a8 <__aeabi_dsub>
 8009a88:	4b19      	ldr	r3, [pc, #100]	@ (8009af0 <__ieee754_rem_pio2+0x3f0>)
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f7f6 fdc4 	bl	8000618 <__aeabi_dmul>
 8009a90:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8009a94:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8009a98:	f04f 0803 	mov.w	r8, #3
 8009a9c:	2600      	movs	r6, #0
 8009a9e:	2700      	movs	r7, #0
 8009aa0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009aa4:	4632      	mov	r2, r6
 8009aa6:	463b      	mov	r3, r7
 8009aa8:	46c2      	mov	sl, r8
 8009aaa:	f108 38ff 	add.w	r8, r8, #4294967295
 8009aae:	f7f7 f81b 	bl	8000ae8 <__aeabi_dcmpeq>
 8009ab2:	2800      	cmp	r0, #0
 8009ab4:	d1f4      	bne.n	8009aa0 <__ieee754_rem_pio2+0x3a0>
 8009ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8009af4 <__ieee754_rem_pio2+0x3f4>)
 8009ab8:	9301      	str	r3, [sp, #4]
 8009aba:	2302      	movs	r3, #2
 8009abc:	9300      	str	r3, [sp, #0]
 8009abe:	462a      	mov	r2, r5
 8009ac0:	4653      	mov	r3, sl
 8009ac2:	4621      	mov	r1, r4
 8009ac4:	a806      	add	r0, sp, #24
 8009ac6:	f000 f81f 	bl	8009b08 <__kernel_rem_pio2>
 8009aca:	9b04      	ldr	r3, [sp, #16]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	4605      	mov	r5, r0
 8009ad0:	f6bf ae53 	bge.w	800977a <__ieee754_rem_pio2+0x7a>
 8009ad4:	e9d4 2100 	ldrd	r2, r1, [r4]
 8009ad8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009adc:	e9c4 2300 	strd	r2, r3, [r4]
 8009ae0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8009ae4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009ae8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009aec:	e740      	b.n	8009970 <__ieee754_rem_pio2+0x270>
 8009aee:	bf00      	nop
 8009af0:	41700000 	.word	0x41700000
 8009af4:	0800aa04 	.word	0x0800aa04

08009af8 <fabs>:
 8009af8:	ec51 0b10 	vmov	r0, r1, d0
 8009afc:	4602      	mov	r2, r0
 8009afe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009b02:	ec43 2b10 	vmov	d0, r2, r3
 8009b06:	4770      	bx	lr

08009b08 <__kernel_rem_pio2>:
 8009b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b0c:	ed2d 8b02 	vpush	{d8}
 8009b10:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8009b14:	f112 0f14 	cmn.w	r2, #20
 8009b18:	9306      	str	r3, [sp, #24]
 8009b1a:	9104      	str	r1, [sp, #16]
 8009b1c:	4bbe      	ldr	r3, [pc, #760]	@ (8009e18 <__kernel_rem_pio2+0x310>)
 8009b1e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8009b20:	9008      	str	r0, [sp, #32]
 8009b22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b26:	9300      	str	r3, [sp, #0]
 8009b28:	9b06      	ldr	r3, [sp, #24]
 8009b2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8009b2e:	bfa8      	it	ge
 8009b30:	1ed4      	subge	r4, r2, #3
 8009b32:	9305      	str	r3, [sp, #20]
 8009b34:	bfb2      	itee	lt
 8009b36:	2400      	movlt	r4, #0
 8009b38:	2318      	movge	r3, #24
 8009b3a:	fb94 f4f3 	sdivge	r4, r4, r3
 8009b3e:	f06f 0317 	mvn.w	r3, #23
 8009b42:	fb04 3303 	mla	r3, r4, r3, r3
 8009b46:	eb03 0b02 	add.w	fp, r3, r2
 8009b4a:	9b00      	ldr	r3, [sp, #0]
 8009b4c:	9a05      	ldr	r2, [sp, #20]
 8009b4e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8009e08 <__kernel_rem_pio2+0x300>
 8009b52:	eb03 0802 	add.w	r8, r3, r2
 8009b56:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009b58:	1aa7      	subs	r7, r4, r2
 8009b5a:	ae20      	add	r6, sp, #128	@ 0x80
 8009b5c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009b60:	2500      	movs	r5, #0
 8009b62:	4545      	cmp	r5, r8
 8009b64:	dd13      	ble.n	8009b8e <__kernel_rem_pio2+0x86>
 8009b66:	9b06      	ldr	r3, [sp, #24]
 8009b68:	aa20      	add	r2, sp, #128	@ 0x80
 8009b6a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009b6e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8009b72:	f04f 0800 	mov.w	r8, #0
 8009b76:	9b00      	ldr	r3, [sp, #0]
 8009b78:	4598      	cmp	r8, r3
 8009b7a:	dc31      	bgt.n	8009be0 <__kernel_rem_pio2+0xd8>
 8009b7c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8009e08 <__kernel_rem_pio2+0x300>
 8009b80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009b84:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009b88:	462f      	mov	r7, r5
 8009b8a:	2600      	movs	r6, #0
 8009b8c:	e01b      	b.n	8009bc6 <__kernel_rem_pio2+0xbe>
 8009b8e:	42ef      	cmn	r7, r5
 8009b90:	d407      	bmi.n	8009ba2 <__kernel_rem_pio2+0x9a>
 8009b92:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009b96:	f7f6 fcd5 	bl	8000544 <__aeabi_i2d>
 8009b9a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009b9e:	3501      	adds	r5, #1
 8009ba0:	e7df      	b.n	8009b62 <__kernel_rem_pio2+0x5a>
 8009ba2:	ec51 0b18 	vmov	r0, r1, d8
 8009ba6:	e7f8      	b.n	8009b9a <__kernel_rem_pio2+0x92>
 8009ba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009bb0:	f7f6 fd32 	bl	8000618 <__aeabi_dmul>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bbc:	f7f6 fb76 	bl	80002ac <__adddf3>
 8009bc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bc4:	3601      	adds	r6, #1
 8009bc6:	9b05      	ldr	r3, [sp, #20]
 8009bc8:	429e      	cmp	r6, r3
 8009bca:	f1a7 0708 	sub.w	r7, r7, #8
 8009bce:	ddeb      	ble.n	8009ba8 <__kernel_rem_pio2+0xa0>
 8009bd0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009bd4:	f108 0801 	add.w	r8, r8, #1
 8009bd8:	ecaa 7b02 	vstmia	sl!, {d7}
 8009bdc:	3508      	adds	r5, #8
 8009bde:	e7ca      	b.n	8009b76 <__kernel_rem_pio2+0x6e>
 8009be0:	9b00      	ldr	r3, [sp, #0]
 8009be2:	f8dd 8000 	ldr.w	r8, [sp]
 8009be6:	aa0c      	add	r2, sp, #48	@ 0x30
 8009be8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009bec:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bee:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009bf0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009bf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bf6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8009bfa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bfc:	ab98      	add	r3, sp, #608	@ 0x260
 8009bfe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009c02:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8009c06:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c0a:	ac0c      	add	r4, sp, #48	@ 0x30
 8009c0c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009c0e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8009c12:	46a1      	mov	r9, r4
 8009c14:	46c2      	mov	sl, r8
 8009c16:	f1ba 0f00 	cmp.w	sl, #0
 8009c1a:	f1a5 0508 	sub.w	r5, r5, #8
 8009c1e:	dc77      	bgt.n	8009d10 <__kernel_rem_pio2+0x208>
 8009c20:	4658      	mov	r0, fp
 8009c22:	ed9d 0b02 	vldr	d0, [sp, #8]
 8009c26:	f000 fac7 	bl	800a1b8 <scalbn>
 8009c2a:	ec57 6b10 	vmov	r6, r7, d0
 8009c2e:	2200      	movs	r2, #0
 8009c30:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8009c34:	4630      	mov	r0, r6
 8009c36:	4639      	mov	r1, r7
 8009c38:	f7f6 fcee 	bl	8000618 <__aeabi_dmul>
 8009c3c:	ec41 0b10 	vmov	d0, r0, r1
 8009c40:	f000 fb3a 	bl	800a2b8 <floor>
 8009c44:	4b75      	ldr	r3, [pc, #468]	@ (8009e1c <__kernel_rem_pio2+0x314>)
 8009c46:	ec51 0b10 	vmov	r0, r1, d0
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f7f6 fce4 	bl	8000618 <__aeabi_dmul>
 8009c50:	4602      	mov	r2, r0
 8009c52:	460b      	mov	r3, r1
 8009c54:	4630      	mov	r0, r6
 8009c56:	4639      	mov	r1, r7
 8009c58:	f7f6 fb26 	bl	80002a8 <__aeabi_dsub>
 8009c5c:	460f      	mov	r7, r1
 8009c5e:	4606      	mov	r6, r0
 8009c60:	f7f6 ff74 	bl	8000b4c <__aeabi_d2iz>
 8009c64:	9002      	str	r0, [sp, #8]
 8009c66:	f7f6 fc6d 	bl	8000544 <__aeabi_i2d>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	4630      	mov	r0, r6
 8009c70:	4639      	mov	r1, r7
 8009c72:	f7f6 fb19 	bl	80002a8 <__aeabi_dsub>
 8009c76:	f1bb 0f00 	cmp.w	fp, #0
 8009c7a:	4606      	mov	r6, r0
 8009c7c:	460f      	mov	r7, r1
 8009c7e:	dd6c      	ble.n	8009d5a <__kernel_rem_pio2+0x252>
 8009c80:	f108 31ff 	add.w	r1, r8, #4294967295
 8009c84:	ab0c      	add	r3, sp, #48	@ 0x30
 8009c86:	9d02      	ldr	r5, [sp, #8]
 8009c88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009c8c:	f1cb 0018 	rsb	r0, fp, #24
 8009c90:	fa43 f200 	asr.w	r2, r3, r0
 8009c94:	4415      	add	r5, r2
 8009c96:	4082      	lsls	r2, r0
 8009c98:	1a9b      	subs	r3, r3, r2
 8009c9a:	aa0c      	add	r2, sp, #48	@ 0x30
 8009c9c:	9502      	str	r5, [sp, #8]
 8009c9e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009ca2:	f1cb 0217 	rsb	r2, fp, #23
 8009ca6:	fa43 f902 	asr.w	r9, r3, r2
 8009caa:	f1b9 0f00 	cmp.w	r9, #0
 8009cae:	dd64      	ble.n	8009d7a <__kernel_rem_pio2+0x272>
 8009cb0:	9b02      	ldr	r3, [sp, #8]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	9302      	str	r3, [sp, #8]
 8009cb8:	4615      	mov	r5, r2
 8009cba:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8009cbe:	4590      	cmp	r8, r2
 8009cc0:	f300 80b8 	bgt.w	8009e34 <__kernel_rem_pio2+0x32c>
 8009cc4:	f1bb 0f00 	cmp.w	fp, #0
 8009cc8:	dd07      	ble.n	8009cda <__kernel_rem_pio2+0x1d2>
 8009cca:	f1bb 0f01 	cmp.w	fp, #1
 8009cce:	f000 80bf 	beq.w	8009e50 <__kernel_rem_pio2+0x348>
 8009cd2:	f1bb 0f02 	cmp.w	fp, #2
 8009cd6:	f000 80c6 	beq.w	8009e66 <__kernel_rem_pio2+0x35e>
 8009cda:	f1b9 0f02 	cmp.w	r9, #2
 8009cde:	d14c      	bne.n	8009d7a <__kernel_rem_pio2+0x272>
 8009ce0:	4632      	mov	r2, r6
 8009ce2:	463b      	mov	r3, r7
 8009ce4:	494e      	ldr	r1, [pc, #312]	@ (8009e20 <__kernel_rem_pio2+0x318>)
 8009ce6:	2000      	movs	r0, #0
 8009ce8:	f7f6 fade 	bl	80002a8 <__aeabi_dsub>
 8009cec:	4606      	mov	r6, r0
 8009cee:	460f      	mov	r7, r1
 8009cf0:	2d00      	cmp	r5, #0
 8009cf2:	d042      	beq.n	8009d7a <__kernel_rem_pio2+0x272>
 8009cf4:	4658      	mov	r0, fp
 8009cf6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8009e10 <__kernel_rem_pio2+0x308>
 8009cfa:	f000 fa5d 	bl	800a1b8 <scalbn>
 8009cfe:	4630      	mov	r0, r6
 8009d00:	4639      	mov	r1, r7
 8009d02:	ec53 2b10 	vmov	r2, r3, d0
 8009d06:	f7f6 facf 	bl	80002a8 <__aeabi_dsub>
 8009d0a:	4606      	mov	r6, r0
 8009d0c:	460f      	mov	r7, r1
 8009d0e:	e034      	b.n	8009d7a <__kernel_rem_pio2+0x272>
 8009d10:	4b44      	ldr	r3, [pc, #272]	@ (8009e24 <__kernel_rem_pio2+0x31c>)
 8009d12:	2200      	movs	r2, #0
 8009d14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d18:	f7f6 fc7e 	bl	8000618 <__aeabi_dmul>
 8009d1c:	f7f6 ff16 	bl	8000b4c <__aeabi_d2iz>
 8009d20:	f7f6 fc10 	bl	8000544 <__aeabi_i2d>
 8009d24:	4b40      	ldr	r3, [pc, #256]	@ (8009e28 <__kernel_rem_pio2+0x320>)
 8009d26:	2200      	movs	r2, #0
 8009d28:	4606      	mov	r6, r0
 8009d2a:	460f      	mov	r7, r1
 8009d2c:	f7f6 fc74 	bl	8000618 <__aeabi_dmul>
 8009d30:	4602      	mov	r2, r0
 8009d32:	460b      	mov	r3, r1
 8009d34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d38:	f7f6 fab6 	bl	80002a8 <__aeabi_dsub>
 8009d3c:	f7f6 ff06 	bl	8000b4c <__aeabi_d2iz>
 8009d40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d44:	f849 0b04 	str.w	r0, [r9], #4
 8009d48:	4639      	mov	r1, r7
 8009d4a:	4630      	mov	r0, r6
 8009d4c:	f7f6 faae 	bl	80002ac <__adddf3>
 8009d50:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d58:	e75d      	b.n	8009c16 <__kernel_rem_pio2+0x10e>
 8009d5a:	d107      	bne.n	8009d6c <__kernel_rem_pio2+0x264>
 8009d5c:	f108 33ff 	add.w	r3, r8, #4294967295
 8009d60:	aa0c      	add	r2, sp, #48	@ 0x30
 8009d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d66:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8009d6a:	e79e      	b.n	8009caa <__kernel_rem_pio2+0x1a2>
 8009d6c:	4b2f      	ldr	r3, [pc, #188]	@ (8009e2c <__kernel_rem_pio2+0x324>)
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f7f6 fed8 	bl	8000b24 <__aeabi_dcmpge>
 8009d74:	2800      	cmp	r0, #0
 8009d76:	d143      	bne.n	8009e00 <__kernel_rem_pio2+0x2f8>
 8009d78:	4681      	mov	r9, r0
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	4630      	mov	r0, r6
 8009d80:	4639      	mov	r1, r7
 8009d82:	f7f6 feb1 	bl	8000ae8 <__aeabi_dcmpeq>
 8009d86:	2800      	cmp	r0, #0
 8009d88:	f000 80bf 	beq.w	8009f0a <__kernel_rem_pio2+0x402>
 8009d8c:	f108 33ff 	add.w	r3, r8, #4294967295
 8009d90:	2200      	movs	r2, #0
 8009d92:	9900      	ldr	r1, [sp, #0]
 8009d94:	428b      	cmp	r3, r1
 8009d96:	da6e      	bge.n	8009e76 <__kernel_rem_pio2+0x36e>
 8009d98:	2a00      	cmp	r2, #0
 8009d9a:	f000 8089 	beq.w	8009eb0 <__kernel_rem_pio2+0x3a8>
 8009d9e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009da2:	ab0c      	add	r3, sp, #48	@ 0x30
 8009da4:	f1ab 0b18 	sub.w	fp, fp, #24
 8009da8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d0f6      	beq.n	8009d9e <__kernel_rem_pio2+0x296>
 8009db0:	4658      	mov	r0, fp
 8009db2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8009e10 <__kernel_rem_pio2+0x308>
 8009db6:	f000 f9ff 	bl	800a1b8 <scalbn>
 8009dba:	f108 0301 	add.w	r3, r8, #1
 8009dbe:	00da      	lsls	r2, r3, #3
 8009dc0:	9205      	str	r2, [sp, #20]
 8009dc2:	ec55 4b10 	vmov	r4, r5, d0
 8009dc6:	aa70      	add	r2, sp, #448	@ 0x1c0
 8009dc8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8009e24 <__kernel_rem_pio2+0x31c>
 8009dcc:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8009dd0:	4646      	mov	r6, r8
 8009dd2:	f04f 0a00 	mov.w	sl, #0
 8009dd6:	2e00      	cmp	r6, #0
 8009dd8:	f280 80cf 	bge.w	8009f7a <__kernel_rem_pio2+0x472>
 8009ddc:	4644      	mov	r4, r8
 8009dde:	2c00      	cmp	r4, #0
 8009de0:	f2c0 80fd 	blt.w	8009fde <__kernel_rem_pio2+0x4d6>
 8009de4:	4b12      	ldr	r3, [pc, #72]	@ (8009e30 <__kernel_rem_pio2+0x328>)
 8009de6:	461f      	mov	r7, r3
 8009de8:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009dea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009dee:	9306      	str	r3, [sp, #24]
 8009df0:	f04f 0a00 	mov.w	sl, #0
 8009df4:	f04f 0b00 	mov.w	fp, #0
 8009df8:	2600      	movs	r6, #0
 8009dfa:	eba8 0504 	sub.w	r5, r8, r4
 8009dfe:	e0e2      	b.n	8009fc6 <__kernel_rem_pio2+0x4be>
 8009e00:	f04f 0902 	mov.w	r9, #2
 8009e04:	e754      	b.n	8009cb0 <__kernel_rem_pio2+0x1a8>
 8009e06:	bf00      	nop
	...
 8009e14:	3ff00000 	.word	0x3ff00000
 8009e18:	0800ab50 	.word	0x0800ab50
 8009e1c:	40200000 	.word	0x40200000
 8009e20:	3ff00000 	.word	0x3ff00000
 8009e24:	3e700000 	.word	0x3e700000
 8009e28:	41700000 	.word	0x41700000
 8009e2c:	3fe00000 	.word	0x3fe00000
 8009e30:	0800ab10 	.word	0x0800ab10
 8009e34:	f854 3b04 	ldr.w	r3, [r4], #4
 8009e38:	b945      	cbnz	r5, 8009e4c <__kernel_rem_pio2+0x344>
 8009e3a:	b123      	cbz	r3, 8009e46 <__kernel_rem_pio2+0x33e>
 8009e3c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8009e40:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e44:	2301      	movs	r3, #1
 8009e46:	3201      	adds	r2, #1
 8009e48:	461d      	mov	r5, r3
 8009e4a:	e738      	b.n	8009cbe <__kernel_rem_pio2+0x1b6>
 8009e4c:	1acb      	subs	r3, r1, r3
 8009e4e:	e7f7      	b.n	8009e40 <__kernel_rem_pio2+0x338>
 8009e50:	f108 32ff 	add.w	r2, r8, #4294967295
 8009e54:	ab0c      	add	r3, sp, #48	@ 0x30
 8009e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e5a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009e5e:	a90c      	add	r1, sp, #48	@ 0x30
 8009e60:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009e64:	e739      	b.n	8009cda <__kernel_rem_pio2+0x1d2>
 8009e66:	f108 32ff 	add.w	r2, r8, #4294967295
 8009e6a:	ab0c      	add	r3, sp, #48	@ 0x30
 8009e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e70:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009e74:	e7f3      	b.n	8009e5e <__kernel_rem_pio2+0x356>
 8009e76:	a90c      	add	r1, sp, #48	@ 0x30
 8009e78:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	430a      	orrs	r2, r1
 8009e80:	e787      	b.n	8009d92 <__kernel_rem_pio2+0x28a>
 8009e82:	3401      	adds	r4, #1
 8009e84:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009e88:	2a00      	cmp	r2, #0
 8009e8a:	d0fa      	beq.n	8009e82 <__kernel_rem_pio2+0x37a>
 8009e8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e8e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009e92:	eb0d 0503 	add.w	r5, sp, r3
 8009e96:	9b06      	ldr	r3, [sp, #24]
 8009e98:	aa20      	add	r2, sp, #128	@ 0x80
 8009e9a:	4443      	add	r3, r8
 8009e9c:	f108 0701 	add.w	r7, r8, #1
 8009ea0:	3d98      	subs	r5, #152	@ 0x98
 8009ea2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8009ea6:	4444      	add	r4, r8
 8009ea8:	42bc      	cmp	r4, r7
 8009eaa:	da04      	bge.n	8009eb6 <__kernel_rem_pio2+0x3ae>
 8009eac:	46a0      	mov	r8, r4
 8009eae:	e6a2      	b.n	8009bf6 <__kernel_rem_pio2+0xee>
 8009eb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009eb2:	2401      	movs	r4, #1
 8009eb4:	e7e6      	b.n	8009e84 <__kernel_rem_pio2+0x37c>
 8009eb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eb8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8009ebc:	f7f6 fb42 	bl	8000544 <__aeabi_i2d>
 8009ec0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800a188 <__kernel_rem_pio2+0x680>
 8009ec4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009ec8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009ecc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009ed0:	46b2      	mov	sl, r6
 8009ed2:	f04f 0800 	mov.w	r8, #0
 8009ed6:	9b05      	ldr	r3, [sp, #20]
 8009ed8:	4598      	cmp	r8, r3
 8009eda:	dd05      	ble.n	8009ee8 <__kernel_rem_pio2+0x3e0>
 8009edc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ee0:	3701      	adds	r7, #1
 8009ee2:	eca5 7b02 	vstmia	r5!, {d7}
 8009ee6:	e7df      	b.n	8009ea8 <__kernel_rem_pio2+0x3a0>
 8009ee8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8009eec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009ef0:	f7f6 fb92 	bl	8000618 <__aeabi_dmul>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009efc:	f7f6 f9d6 	bl	80002ac <__adddf3>
 8009f00:	f108 0801 	add.w	r8, r8, #1
 8009f04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f08:	e7e5      	b.n	8009ed6 <__kernel_rem_pio2+0x3ce>
 8009f0a:	f1cb 0000 	rsb	r0, fp, #0
 8009f0e:	ec47 6b10 	vmov	d0, r6, r7
 8009f12:	f000 f951 	bl	800a1b8 <scalbn>
 8009f16:	ec55 4b10 	vmov	r4, r5, d0
 8009f1a:	4b9d      	ldr	r3, [pc, #628]	@ (800a190 <__kernel_rem_pio2+0x688>)
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	4620      	mov	r0, r4
 8009f20:	4629      	mov	r1, r5
 8009f22:	f7f6 fdff 	bl	8000b24 <__aeabi_dcmpge>
 8009f26:	b300      	cbz	r0, 8009f6a <__kernel_rem_pio2+0x462>
 8009f28:	4b9a      	ldr	r3, [pc, #616]	@ (800a194 <__kernel_rem_pio2+0x68c>)
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	4620      	mov	r0, r4
 8009f2e:	4629      	mov	r1, r5
 8009f30:	f7f6 fb72 	bl	8000618 <__aeabi_dmul>
 8009f34:	f7f6 fe0a 	bl	8000b4c <__aeabi_d2iz>
 8009f38:	4606      	mov	r6, r0
 8009f3a:	f7f6 fb03 	bl	8000544 <__aeabi_i2d>
 8009f3e:	4b94      	ldr	r3, [pc, #592]	@ (800a190 <__kernel_rem_pio2+0x688>)
 8009f40:	2200      	movs	r2, #0
 8009f42:	f7f6 fb69 	bl	8000618 <__aeabi_dmul>
 8009f46:	460b      	mov	r3, r1
 8009f48:	4602      	mov	r2, r0
 8009f4a:	4629      	mov	r1, r5
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	f7f6 f9ab 	bl	80002a8 <__aeabi_dsub>
 8009f52:	f7f6 fdfb 	bl	8000b4c <__aeabi_d2iz>
 8009f56:	ab0c      	add	r3, sp, #48	@ 0x30
 8009f58:	f10b 0b18 	add.w	fp, fp, #24
 8009f5c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009f60:	f108 0801 	add.w	r8, r8, #1
 8009f64:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8009f68:	e722      	b.n	8009db0 <__kernel_rem_pio2+0x2a8>
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	4629      	mov	r1, r5
 8009f6e:	f7f6 fded 	bl	8000b4c <__aeabi_d2iz>
 8009f72:	ab0c      	add	r3, sp, #48	@ 0x30
 8009f74:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009f78:	e71a      	b.n	8009db0 <__kernel_rem_pio2+0x2a8>
 8009f7a:	ab0c      	add	r3, sp, #48	@ 0x30
 8009f7c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009f80:	f7f6 fae0 	bl	8000544 <__aeabi_i2d>
 8009f84:	4622      	mov	r2, r4
 8009f86:	462b      	mov	r3, r5
 8009f88:	f7f6 fb46 	bl	8000618 <__aeabi_dmul>
 8009f8c:	4652      	mov	r2, sl
 8009f8e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8009f92:	465b      	mov	r3, fp
 8009f94:	4620      	mov	r0, r4
 8009f96:	4629      	mov	r1, r5
 8009f98:	f7f6 fb3e 	bl	8000618 <__aeabi_dmul>
 8009f9c:	3e01      	subs	r6, #1
 8009f9e:	4604      	mov	r4, r0
 8009fa0:	460d      	mov	r5, r1
 8009fa2:	e718      	b.n	8009dd6 <__kernel_rem_pio2+0x2ce>
 8009fa4:	9906      	ldr	r1, [sp, #24]
 8009fa6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8009faa:	9106      	str	r1, [sp, #24]
 8009fac:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8009fb0:	f7f6 fb32 	bl	8000618 <__aeabi_dmul>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	4650      	mov	r0, sl
 8009fba:	4659      	mov	r1, fp
 8009fbc:	f7f6 f976 	bl	80002ac <__adddf3>
 8009fc0:	3601      	adds	r6, #1
 8009fc2:	4682      	mov	sl, r0
 8009fc4:	468b      	mov	fp, r1
 8009fc6:	9b00      	ldr	r3, [sp, #0]
 8009fc8:	429e      	cmp	r6, r3
 8009fca:	dc01      	bgt.n	8009fd0 <__kernel_rem_pio2+0x4c8>
 8009fcc:	42b5      	cmp	r5, r6
 8009fce:	dae9      	bge.n	8009fa4 <__kernel_rem_pio2+0x49c>
 8009fd0:	ab48      	add	r3, sp, #288	@ 0x120
 8009fd2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009fd6:	e9c5 ab00 	strd	sl, fp, [r5]
 8009fda:	3c01      	subs	r4, #1
 8009fdc:	e6ff      	b.n	8009dde <__kernel_rem_pio2+0x2d6>
 8009fde:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009fe0:	2b02      	cmp	r3, #2
 8009fe2:	dc0b      	bgt.n	8009ffc <__kernel_rem_pio2+0x4f4>
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	dc39      	bgt.n	800a05c <__kernel_rem_pio2+0x554>
 8009fe8:	d05d      	beq.n	800a0a6 <__kernel_rem_pio2+0x59e>
 8009fea:	9b02      	ldr	r3, [sp, #8]
 8009fec:	f003 0007 	and.w	r0, r3, #7
 8009ff0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8009ff4:	ecbd 8b02 	vpop	{d8}
 8009ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ffc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009ffe:	2b03      	cmp	r3, #3
 800a000:	d1f3      	bne.n	8009fea <__kernel_rem_pio2+0x4e2>
 800a002:	9b05      	ldr	r3, [sp, #20]
 800a004:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a008:	eb0d 0403 	add.w	r4, sp, r3
 800a00c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800a010:	4625      	mov	r5, r4
 800a012:	46c2      	mov	sl, r8
 800a014:	f1ba 0f00 	cmp.w	sl, #0
 800a018:	f1a5 0508 	sub.w	r5, r5, #8
 800a01c:	dc6b      	bgt.n	800a0f6 <__kernel_rem_pio2+0x5ee>
 800a01e:	4645      	mov	r5, r8
 800a020:	2d01      	cmp	r5, #1
 800a022:	f1a4 0408 	sub.w	r4, r4, #8
 800a026:	f300 8087 	bgt.w	800a138 <__kernel_rem_pio2+0x630>
 800a02a:	9c05      	ldr	r4, [sp, #20]
 800a02c:	ab48      	add	r3, sp, #288	@ 0x120
 800a02e:	441c      	add	r4, r3
 800a030:	2000      	movs	r0, #0
 800a032:	2100      	movs	r1, #0
 800a034:	f1b8 0f01 	cmp.w	r8, #1
 800a038:	f300 809c 	bgt.w	800a174 <__kernel_rem_pio2+0x66c>
 800a03c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800a040:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800a044:	f1b9 0f00 	cmp.w	r9, #0
 800a048:	f040 80a6 	bne.w	800a198 <__kernel_rem_pio2+0x690>
 800a04c:	9b04      	ldr	r3, [sp, #16]
 800a04e:	e9c3 7800 	strd	r7, r8, [r3]
 800a052:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a056:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a05a:	e7c6      	b.n	8009fea <__kernel_rem_pio2+0x4e2>
 800a05c:	9d05      	ldr	r5, [sp, #20]
 800a05e:	ab48      	add	r3, sp, #288	@ 0x120
 800a060:	441d      	add	r5, r3
 800a062:	4644      	mov	r4, r8
 800a064:	2000      	movs	r0, #0
 800a066:	2100      	movs	r1, #0
 800a068:	2c00      	cmp	r4, #0
 800a06a:	da35      	bge.n	800a0d8 <__kernel_rem_pio2+0x5d0>
 800a06c:	f1b9 0f00 	cmp.w	r9, #0
 800a070:	d038      	beq.n	800a0e4 <__kernel_rem_pio2+0x5dc>
 800a072:	4602      	mov	r2, r0
 800a074:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a078:	9c04      	ldr	r4, [sp, #16]
 800a07a:	e9c4 2300 	strd	r2, r3, [r4]
 800a07e:	4602      	mov	r2, r0
 800a080:	460b      	mov	r3, r1
 800a082:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800a086:	f7f6 f90f 	bl	80002a8 <__aeabi_dsub>
 800a08a:	ad4a      	add	r5, sp, #296	@ 0x128
 800a08c:	2401      	movs	r4, #1
 800a08e:	45a0      	cmp	r8, r4
 800a090:	da2b      	bge.n	800a0ea <__kernel_rem_pio2+0x5e2>
 800a092:	f1b9 0f00 	cmp.w	r9, #0
 800a096:	d002      	beq.n	800a09e <__kernel_rem_pio2+0x596>
 800a098:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a09c:	4619      	mov	r1, r3
 800a09e:	9b04      	ldr	r3, [sp, #16]
 800a0a0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a0a4:	e7a1      	b.n	8009fea <__kernel_rem_pio2+0x4e2>
 800a0a6:	9c05      	ldr	r4, [sp, #20]
 800a0a8:	ab48      	add	r3, sp, #288	@ 0x120
 800a0aa:	441c      	add	r4, r3
 800a0ac:	2000      	movs	r0, #0
 800a0ae:	2100      	movs	r1, #0
 800a0b0:	f1b8 0f00 	cmp.w	r8, #0
 800a0b4:	da09      	bge.n	800a0ca <__kernel_rem_pio2+0x5c2>
 800a0b6:	f1b9 0f00 	cmp.w	r9, #0
 800a0ba:	d002      	beq.n	800a0c2 <__kernel_rem_pio2+0x5ba>
 800a0bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	9b04      	ldr	r3, [sp, #16]
 800a0c4:	e9c3 0100 	strd	r0, r1, [r3]
 800a0c8:	e78f      	b.n	8009fea <__kernel_rem_pio2+0x4e2>
 800a0ca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a0ce:	f7f6 f8ed 	bl	80002ac <__adddf3>
 800a0d2:	f108 38ff 	add.w	r8, r8, #4294967295
 800a0d6:	e7eb      	b.n	800a0b0 <__kernel_rem_pio2+0x5a8>
 800a0d8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800a0dc:	f7f6 f8e6 	bl	80002ac <__adddf3>
 800a0e0:	3c01      	subs	r4, #1
 800a0e2:	e7c1      	b.n	800a068 <__kernel_rem_pio2+0x560>
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	e7c6      	b.n	800a078 <__kernel_rem_pio2+0x570>
 800a0ea:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800a0ee:	f7f6 f8dd 	bl	80002ac <__adddf3>
 800a0f2:	3401      	adds	r4, #1
 800a0f4:	e7cb      	b.n	800a08e <__kernel_rem_pio2+0x586>
 800a0f6:	ed95 7b00 	vldr	d7, [r5]
 800a0fa:	ed8d 7b00 	vstr	d7, [sp]
 800a0fe:	ed95 7b02 	vldr	d7, [r5, #8]
 800a102:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a106:	ec53 2b17 	vmov	r2, r3, d7
 800a10a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a10e:	f7f6 f8cd 	bl	80002ac <__adddf3>
 800a112:	4602      	mov	r2, r0
 800a114:	460b      	mov	r3, r1
 800a116:	4606      	mov	r6, r0
 800a118:	460f      	mov	r7, r1
 800a11a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a11e:	f7f6 f8c3 	bl	80002a8 <__aeabi_dsub>
 800a122:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a126:	f7f6 f8c1 	bl	80002ac <__adddf3>
 800a12a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a12e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800a132:	e9c5 6700 	strd	r6, r7, [r5]
 800a136:	e76d      	b.n	800a014 <__kernel_rem_pio2+0x50c>
 800a138:	ed94 7b00 	vldr	d7, [r4]
 800a13c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800a140:	ec51 0b17 	vmov	r0, r1, d7
 800a144:	4652      	mov	r2, sl
 800a146:	465b      	mov	r3, fp
 800a148:	ed8d 7b00 	vstr	d7, [sp]
 800a14c:	f7f6 f8ae 	bl	80002ac <__adddf3>
 800a150:	4602      	mov	r2, r0
 800a152:	460b      	mov	r3, r1
 800a154:	4606      	mov	r6, r0
 800a156:	460f      	mov	r7, r1
 800a158:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a15c:	f7f6 f8a4 	bl	80002a8 <__aeabi_dsub>
 800a160:	4652      	mov	r2, sl
 800a162:	465b      	mov	r3, fp
 800a164:	f7f6 f8a2 	bl	80002ac <__adddf3>
 800a168:	3d01      	subs	r5, #1
 800a16a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a16e:	e9c4 6700 	strd	r6, r7, [r4]
 800a172:	e755      	b.n	800a020 <__kernel_rem_pio2+0x518>
 800a174:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a178:	f7f6 f898 	bl	80002ac <__adddf3>
 800a17c:	f108 38ff 	add.w	r8, r8, #4294967295
 800a180:	e758      	b.n	800a034 <__kernel_rem_pio2+0x52c>
 800a182:	bf00      	nop
 800a184:	f3af 8000 	nop.w
	...
 800a190:	41700000 	.word	0x41700000
 800a194:	3e700000 	.word	0x3e700000
 800a198:	9b04      	ldr	r3, [sp, #16]
 800a19a:	9a04      	ldr	r2, [sp, #16]
 800a19c:	601f      	str	r7, [r3, #0]
 800a19e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800a1a2:	605c      	str	r4, [r3, #4]
 800a1a4:	609d      	str	r5, [r3, #8]
 800a1a6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a1aa:	60d3      	str	r3, [r2, #12]
 800a1ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a1b0:	6110      	str	r0, [r2, #16]
 800a1b2:	6153      	str	r3, [r2, #20]
 800a1b4:	e719      	b.n	8009fea <__kernel_rem_pio2+0x4e2>
 800a1b6:	bf00      	nop

0800a1b8 <scalbn>:
 800a1b8:	b570      	push	{r4, r5, r6, lr}
 800a1ba:	ec55 4b10 	vmov	r4, r5, d0
 800a1be:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a1c2:	4606      	mov	r6, r0
 800a1c4:	462b      	mov	r3, r5
 800a1c6:	b991      	cbnz	r1, 800a1ee <scalbn+0x36>
 800a1c8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a1cc:	4323      	orrs	r3, r4
 800a1ce:	d03d      	beq.n	800a24c <scalbn+0x94>
 800a1d0:	4b35      	ldr	r3, [pc, #212]	@ (800a2a8 <scalbn+0xf0>)
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	4629      	mov	r1, r5
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	f7f6 fa1e 	bl	8000618 <__aeabi_dmul>
 800a1dc:	4b33      	ldr	r3, [pc, #204]	@ (800a2ac <scalbn+0xf4>)
 800a1de:	429e      	cmp	r6, r3
 800a1e0:	4604      	mov	r4, r0
 800a1e2:	460d      	mov	r5, r1
 800a1e4:	da0f      	bge.n	800a206 <scalbn+0x4e>
 800a1e6:	a328      	add	r3, pc, #160	@ (adr r3, 800a288 <scalbn+0xd0>)
 800a1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ec:	e01e      	b.n	800a22c <scalbn+0x74>
 800a1ee:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800a1f2:	4291      	cmp	r1, r2
 800a1f4:	d10b      	bne.n	800a20e <scalbn+0x56>
 800a1f6:	4622      	mov	r2, r4
 800a1f8:	4620      	mov	r0, r4
 800a1fa:	4629      	mov	r1, r5
 800a1fc:	f7f6 f856 	bl	80002ac <__adddf3>
 800a200:	4604      	mov	r4, r0
 800a202:	460d      	mov	r5, r1
 800a204:	e022      	b.n	800a24c <scalbn+0x94>
 800a206:	460b      	mov	r3, r1
 800a208:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a20c:	3936      	subs	r1, #54	@ 0x36
 800a20e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a212:	4296      	cmp	r6, r2
 800a214:	dd0d      	ble.n	800a232 <scalbn+0x7a>
 800a216:	2d00      	cmp	r5, #0
 800a218:	a11d      	add	r1, pc, #116	@ (adr r1, 800a290 <scalbn+0xd8>)
 800a21a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a21e:	da02      	bge.n	800a226 <scalbn+0x6e>
 800a220:	a11d      	add	r1, pc, #116	@ (adr r1, 800a298 <scalbn+0xe0>)
 800a222:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a226:	a31a      	add	r3, pc, #104	@ (adr r3, 800a290 <scalbn+0xd8>)
 800a228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22c:	f7f6 f9f4 	bl	8000618 <__aeabi_dmul>
 800a230:	e7e6      	b.n	800a200 <scalbn+0x48>
 800a232:	1872      	adds	r2, r6, r1
 800a234:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a238:	428a      	cmp	r2, r1
 800a23a:	dcec      	bgt.n	800a216 <scalbn+0x5e>
 800a23c:	2a00      	cmp	r2, #0
 800a23e:	dd08      	ble.n	800a252 <scalbn+0x9a>
 800a240:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a244:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a248:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a24c:	ec45 4b10 	vmov	d0, r4, r5
 800a250:	bd70      	pop	{r4, r5, r6, pc}
 800a252:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a256:	da08      	bge.n	800a26a <scalbn+0xb2>
 800a258:	2d00      	cmp	r5, #0
 800a25a:	a10b      	add	r1, pc, #44	@ (adr r1, 800a288 <scalbn+0xd0>)
 800a25c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a260:	dac1      	bge.n	800a1e6 <scalbn+0x2e>
 800a262:	a10f      	add	r1, pc, #60	@ (adr r1, 800a2a0 <scalbn+0xe8>)
 800a264:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a268:	e7bd      	b.n	800a1e6 <scalbn+0x2e>
 800a26a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a26e:	3236      	adds	r2, #54	@ 0x36
 800a270:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a274:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a278:	4620      	mov	r0, r4
 800a27a:	4b0d      	ldr	r3, [pc, #52]	@ (800a2b0 <scalbn+0xf8>)
 800a27c:	4629      	mov	r1, r5
 800a27e:	2200      	movs	r2, #0
 800a280:	e7d4      	b.n	800a22c <scalbn+0x74>
 800a282:	bf00      	nop
 800a284:	f3af 8000 	nop.w
 800a288:	c2f8f359 	.word	0xc2f8f359
 800a28c:	01a56e1f 	.word	0x01a56e1f
 800a290:	8800759c 	.word	0x8800759c
 800a294:	7e37e43c 	.word	0x7e37e43c
 800a298:	8800759c 	.word	0x8800759c
 800a29c:	fe37e43c 	.word	0xfe37e43c
 800a2a0:	c2f8f359 	.word	0xc2f8f359
 800a2a4:	81a56e1f 	.word	0x81a56e1f
 800a2a8:	43500000 	.word	0x43500000
 800a2ac:	ffff3cb0 	.word	0xffff3cb0
 800a2b0:	3c900000 	.word	0x3c900000
 800a2b4:	00000000 	.word	0x00000000

0800a2b8 <floor>:
 800a2b8:	ec51 0b10 	vmov	r0, r1, d0
 800a2bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800a2c8:	2e13      	cmp	r6, #19
 800a2ca:	460c      	mov	r4, r1
 800a2cc:	4605      	mov	r5, r0
 800a2ce:	4680      	mov	r8, r0
 800a2d0:	dc34      	bgt.n	800a33c <floor+0x84>
 800a2d2:	2e00      	cmp	r6, #0
 800a2d4:	da17      	bge.n	800a306 <floor+0x4e>
 800a2d6:	a332      	add	r3, pc, #200	@ (adr r3, 800a3a0 <floor+0xe8>)
 800a2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2dc:	f7f5 ffe6 	bl	80002ac <__adddf3>
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	f7f6 fc28 	bl	8000b38 <__aeabi_dcmpgt>
 800a2e8:	b150      	cbz	r0, 800a300 <floor+0x48>
 800a2ea:	2c00      	cmp	r4, #0
 800a2ec:	da55      	bge.n	800a39a <floor+0xe2>
 800a2ee:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800a2f2:	432c      	orrs	r4, r5
 800a2f4:	2500      	movs	r5, #0
 800a2f6:	42ac      	cmp	r4, r5
 800a2f8:	4c2b      	ldr	r4, [pc, #172]	@ (800a3a8 <floor+0xf0>)
 800a2fa:	bf08      	it	eq
 800a2fc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800a300:	4621      	mov	r1, r4
 800a302:	4628      	mov	r0, r5
 800a304:	e023      	b.n	800a34e <floor+0x96>
 800a306:	4f29      	ldr	r7, [pc, #164]	@ (800a3ac <floor+0xf4>)
 800a308:	4137      	asrs	r7, r6
 800a30a:	ea01 0307 	and.w	r3, r1, r7
 800a30e:	4303      	orrs	r3, r0
 800a310:	d01d      	beq.n	800a34e <floor+0x96>
 800a312:	a323      	add	r3, pc, #140	@ (adr r3, 800a3a0 <floor+0xe8>)
 800a314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a318:	f7f5 ffc8 	bl	80002ac <__adddf3>
 800a31c:	2200      	movs	r2, #0
 800a31e:	2300      	movs	r3, #0
 800a320:	f7f6 fc0a 	bl	8000b38 <__aeabi_dcmpgt>
 800a324:	2800      	cmp	r0, #0
 800a326:	d0eb      	beq.n	800a300 <floor+0x48>
 800a328:	2c00      	cmp	r4, #0
 800a32a:	bfbe      	ittt	lt
 800a32c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800a330:	4133      	asrlt	r3, r6
 800a332:	18e4      	addlt	r4, r4, r3
 800a334:	ea24 0407 	bic.w	r4, r4, r7
 800a338:	2500      	movs	r5, #0
 800a33a:	e7e1      	b.n	800a300 <floor+0x48>
 800a33c:	2e33      	cmp	r6, #51	@ 0x33
 800a33e:	dd0a      	ble.n	800a356 <floor+0x9e>
 800a340:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800a344:	d103      	bne.n	800a34e <floor+0x96>
 800a346:	4602      	mov	r2, r0
 800a348:	460b      	mov	r3, r1
 800a34a:	f7f5 ffaf 	bl	80002ac <__adddf3>
 800a34e:	ec41 0b10 	vmov	d0, r0, r1
 800a352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a356:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800a35a:	f04f 37ff 	mov.w	r7, #4294967295
 800a35e:	40df      	lsrs	r7, r3
 800a360:	4207      	tst	r7, r0
 800a362:	d0f4      	beq.n	800a34e <floor+0x96>
 800a364:	a30e      	add	r3, pc, #56	@ (adr r3, 800a3a0 <floor+0xe8>)
 800a366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36a:	f7f5 ff9f 	bl	80002ac <__adddf3>
 800a36e:	2200      	movs	r2, #0
 800a370:	2300      	movs	r3, #0
 800a372:	f7f6 fbe1 	bl	8000b38 <__aeabi_dcmpgt>
 800a376:	2800      	cmp	r0, #0
 800a378:	d0c2      	beq.n	800a300 <floor+0x48>
 800a37a:	2c00      	cmp	r4, #0
 800a37c:	da0a      	bge.n	800a394 <floor+0xdc>
 800a37e:	2e14      	cmp	r6, #20
 800a380:	d101      	bne.n	800a386 <floor+0xce>
 800a382:	3401      	adds	r4, #1
 800a384:	e006      	b.n	800a394 <floor+0xdc>
 800a386:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800a38a:	2301      	movs	r3, #1
 800a38c:	40b3      	lsls	r3, r6
 800a38e:	441d      	add	r5, r3
 800a390:	4545      	cmp	r5, r8
 800a392:	d3f6      	bcc.n	800a382 <floor+0xca>
 800a394:	ea25 0507 	bic.w	r5, r5, r7
 800a398:	e7b2      	b.n	800a300 <floor+0x48>
 800a39a:	2500      	movs	r5, #0
 800a39c:	462c      	mov	r4, r5
 800a39e:	e7af      	b.n	800a300 <floor+0x48>
 800a3a0:	8800759c 	.word	0x8800759c
 800a3a4:	7e37e43c 	.word	0x7e37e43c
 800a3a8:	bff00000 	.word	0xbff00000
 800a3ac:	000fffff 	.word	0x000fffff

0800a3b0 <_init>:
 800a3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b2:	bf00      	nop
 800a3b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3b6:	bc08      	pop	{r3}
 800a3b8:	469e      	mov	lr, r3
 800a3ba:	4770      	bx	lr

0800a3bc <_fini>:
 800a3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3be:	bf00      	nop
 800a3c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3c2:	bc08      	pop	{r3}
 800a3c4:	469e      	mov	lr, r3
 800a3c6:	4770      	bx	lr
